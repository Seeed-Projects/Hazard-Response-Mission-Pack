[
    {
        "id": "0c809b82525ab765",
        "type": "tab",
        "label": "0-Dashboard (Digital Twin)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ea6938ae37cbe94",
        "type": "tab",
        "label": "1-Early Warning System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9319fe458afe6b6",
        "type": "tab",
        "label": "2-Communication and information sharing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1d374d406a20801f",
        "type": "tab",
        "label": "3-Remote monitoring and Surveillance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce3acd4e9503d8d4",
        "type": "tab",
        "label": "4-Resilient Infrastructure",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f11a6acbc82d2c5c",
        "type": "subflow",
        "name": "7in1 weather station",
        "info": "",
        "category": "※sensecap-weather-station",
        "in": [],
        "out": [
            {
                "x": 1220,
                "y": 200,
                "wires": [
                    {
                        "id": "9c84a20fd70247b6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "Title - Select data to output",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "Select data to output:",
                        "en-US": "Select data to output:"
                    },
                    "type": "none"
                }
            },
            {
                "name": "temperature",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Temperature",
                        "en-US": "Temperature"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "humidity",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Humidity",
                        "en-US": "Humidity"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "windSpeed",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Wind Speed",
                        "en-US": "Wind Speed"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "precipitation",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Precipitation",
                        "en-US": "Precipitation"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "vegetationDensity",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Vegetation Density",
                        "en-US": "Vegetation Density"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "fuelMoisture",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Fuel Moisture",
                        "en-US": "Fuel Moisture"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "soilMoisture",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Soil Moisture",
                        "en-US": "Soil Moisture"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "fireRisk",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "zh-CN": "Fire Risk",
                        "en-US": "Fire Risk"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "status": {
            "x": 1220,
            "y": 360,
            "wires": []
        }
    },
    {
        "id": "c64ffede4f1f69bd",
        "type": "subflow",
        "name": "Digital Twin Background",
        "info": "",
        "category": "※digital-twins",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "↓ Dashboard UI",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "type": "conf-types"
                }
            },
            {
                "name": "Width",
                "type": "num",
                "value": "1"
            },
            {
                "name": "Height",
                "type": "num",
                "value": "1"
            },
            {
                "name": "↓ Background Image",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "imageSelector",
                "type": "str",
                "value": "url",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Web image links",
                                    "en-US": "Web image links"
                                },
                                "v": "url"
                            },
                            {
                                "l": {
                                    "zh-CN": "Local image filename",
                                    "en-US": "Local image filename"
                                },
                                "v": "file"
                            }
                        ]
                    }
                }
            },
            {
                "name": "imagePath",
                "type": "str",
                "value": "http://192.168.100.10:8092/default_background.jpg",
                "ui": {
                    "label": {
                        "zh-CN": "url or filename",
                        "en-US": "url or filename"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed"
        },
        "color": "#9FE6EC",
        "icon": "font-awesome/fa-building-o",
        "status": {
            "x": 1060,
            "y": 440,
            "wires": []
        }
    },
    {
        "id": "c25ee8e3cadf74f6",
        "type": "subflow",
        "name": "Digital Twin Data Card",
        "info": "",
        "category": "※digital-twins",
        "in": [
            {
                "x": 220,
                "y": 620,
                "wires": [
                    {
                        "id": "81111372d49074cf"
                    },
                    {
                        "id": "270964d67cd7e5ca"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "↓ Dashboard UI",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "type": "conf-types"
                }
            },
            {
                "name": "↓ Card",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "card_name",
                "type": "str",
                "value": "Ultrasonic",
                "ui": {
                    "icon": "font-awesome/fa-vcard-o",
                    "label": {
                        "zh-CN": "Name",
                        "en-US": "Name"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "card_font_size",
                "type": "num",
                "value": "14",
                "ui": {
                    "icon": "font-awesome/fa-sort-numeric-asc",
                    "label": {
                        "zh-CN": "Font size",
                        "en-US": "Font size"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "card_unit",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "Value Unit",
                        "en-US": "Value Unit"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "↓ Position",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "card_position_y",
                "type": "str",
                "value": "0%",
                "ui": {
                    "icon": "font-awesome/fa-percent",
                    "label": {
                        "zh-CN": "Top Position(%)",
                        "en-US": "Top Position(%)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "card_position_x",
                "type": "str",
                "value": "0%",
                "ui": {
                    "icon": "font-awesome/fa-percent",
                    "label": {
                        "zh-CN": "Left Position(%)",
                        "en-US": "Left Position(%)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#9FE6EC",
        "icon": "font-awesome/fa-building-o",
        "status": {
            "x": 740,
            "y": 680,
            "wires": [
                {
                    "id": "270964d67cd7e5ca",
                    "port": 0
                },
                {
                    "id": "ed8749cbb76eaff3",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1766c4cb75850c2c",
        "type": "subflow",
        "name": "Grove Vision AI V2 - Get Camera",
        "info": "",
        "category": "※camera-grove-vision-ai-v2",
        "in": [
            {
                "x": 40,
                "y": 360,
                "wires": [
                    {
                        "id": "17bdb18a27c66e11"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1680,
                "y": 740,
                "wires": [
                    {
                        "id": "7712b011fe04d5e2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1680,
                "y": 840,
                "wires": [
                    {
                        "id": "a3d2cf36d30ad3a8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1810,
                "y": 1000,
                "wires": [
                    {
                        "id": "2a5b878f4609d83d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1930,
                "y": 1240,
                "wires": [
                    {
                        "id": "e4db2d42d0a9aab5",
                        "port": 0
                    },
                    {
                        "id": "3d8473d039795dd6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Device Settings -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "----- Camera Settings -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "cameraId",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-camera",
                    "label": {
                        "zh-CN": "Camera ID",
                        "en-US": "Camera ID"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "!note_camera",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "",
                        "en-US": "....Note: You can also leave it blank and configure it dynamically through input"
                    },
                    "type": "none"
                }
            },
            {
                "name": "----- Output 4: Trigger -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "triggerMode",
                "type": "str",
                "value": "yes",
                "ui": {
                    "label": {
                        "zh-CN": "When ...",
                        "en-US": "When ..."
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Detected",
                                    "en-US": "Detected"
                                },
                                "v": "yes"
                            },
                            {
                                "l": {
                                    "zh-CN": "Not detected",
                                    "en-US": "Not detected"
                                },
                                "v": "no"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "Grove Vision AI V2 - Get Camera",
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B8EA4F",
        "outputLabels": [
            "Original Image",
            "Inference Result",
            "Iriginal Data (only can connect to 'tracking analyze' node)",
            "Detection Trigger"
        ],
        "status": {
            "x": 1660,
            "y": 1060,
            "wires": [
                {
                    "id": "cc53c77934293557",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cca203ebc25b2ce6",
        "type": "subflow",
        "name": "IP Camera rtsp",
        "info": "",
        "category": "※camera-general",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f8c167e299ad5d74"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 80,
                "wires": [
                    {
                        "id": "f8c167e299ad5d74",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "url",
                "type": "str",
                "value": "rtsp://",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "username",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "passowrd",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "frameRate",
                "type": "num",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "quality",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "resolution",
                "type": "str",
                "value": "<width>x<height>",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "icon": "font-awesome/fa-camera",
        "status": {
            "x": 420,
            "y": 160,
            "wires": [
                {
                    "id": "96a1b615dbe08457",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "fdfd26c77e5e2a42",
        "type": "subflow",
        "name": "SenseCAP Data Logger - Tripwire",
        "info": "",
        "category": "※data-logger-tripwire",
        "in": [],
        "out": [
            {
                "x": 2040,
                "y": 60,
                "wires": [
                    {
                        "id": "fbb4b0a21824b98f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Device Connection ---",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "mqttBroker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "applicationId",
                "type": "str",
                "value": "447ecfe1-6d26-4e82-bf28-d6dba2fb0d36",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "zh-CN": "*AppId",
                        "en-US": "*AppId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "deviceId",
                "type": "str",
                "value": "2cf7f1c0434000e3",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "zh-CN": "*EUI",
                        "en-US": "*EUI"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "----- Output Filter ---",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "whenFalseOutput",
                "type": "str",
                "value": "0",
                "ui": {
                    "label": {
                        "zh-CN": "if is 0, output:",
                        "en-US": "if is 0, output:"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool"
                        ]
                    }
                }
            },
            {
                "name": "whenTrueOutput",
                "type": "str",
                "value": "1",
                "ui": {
                    "label": {
                        "zh-CN": "if is 1, output:",
                        "en-US": "if is 1, output:"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "icon": "node-red/node_icon_s2100.png",
        "status": {
            "x": 2040,
            "y": 180,
            "wires": [
                {
                    "id": "d6f6d0ab45a73962",
                    "port": 0
                },
                {
                    "id": "statusNode",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "e0d523198c47fac8",
        "type": "subflow",
        "name": "SenseCAP Data Logger - Ultrasonic",
        "info": "",
        "category": "※data-logger-ultrasonic",
        "in": [],
        "out": [
            {
                "x": 1660,
                "y": 80,
                "wires": [
                    {
                        "id": "4a6bb66a194ebecb",
                        "port": 0
                    },
                    {
                        "id": "e759cd06d6462147",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Device Connection -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "mqttBroker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "applicationId",
                "type": "str",
                "value": "447ecfe1-6d26-4e82-bf28-d6dba2fb0d36",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "zh-CN": "*AppId",
                        "en-US": "*AppId"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "deviceId",
                "type": "str",
                "value": "2cf7f1c0446001bf",
                "ui": {
                    "icon": "font-awesome/fa-align-justify",
                    "label": {
                        "zh-CN": "*EUI",
                        "en-US": "*EUI"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "icon": "node-red/node_icon_s2100.png",
        "status": {
            "x": 1660,
            "y": 180,
            "wires": [
                {
                    "id": "bf8cf61d9a1c87e9",
                    "port": 0
                },
                {
                    "id": "b4cae0a3a27b6aa9",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "864d0ea09f268ade",
        "type": "subflow",
        "name": "clear geofence",
        "info": "",
        "category": "※geofence",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "6118cd66d545feee"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#B0CBFF",
        "status": {
            "x": 320,
            "y": 160,
            "wires": [
                {
                    "id": "b4fa1b291be93bd0",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "3222c245ca4d6f5a",
        "type": "subflow",
        "name": "condition item",
        "info": "",
        "category": "※conditions",
        "in": [
            {
                "x": 480,
                "y": 200,
                "wires": [
                    {
                        "id": "cdf78b2f3d8e9912"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 160,
                "wires": [
                    {
                        "id": "9abdef358b9063d3",
                        "port": 0
                    },
                    {
                        "id": "6feedcb6904fe0b7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "The following conditions are also satisfied:",
                        "en-US": "The following conditions are also satisfied:"
                    },
                    "type": "none"
                }
            },
            {
                "name": "--1:",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "condition1",
                "type": "str",
                "value": "any",
                "ui": {
                    "label": {
                        "zh-CN": "condition",
                        "en-US": "condition"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "any",
                                    "en-US": "any"
                                },
                                "v": "any"
                            },
                            {
                                "l": {
                                    "zh-CN": "equal to",
                                    "en-US": "equal to"
                                },
                                "v": "=="
                            },
                            {
                                "l": {
                                    "zh-CN": "not equal to",
                                    "en-US": "not equal to"
                                },
                                "v": "!="
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than",
                                    "en-US": "greater than"
                                },
                                "v": ">"
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than or equal",
                                    "en-US": "greater than or equal"
                                },
                                "v": ">="
                            },
                            {
                                "l": {
                                    "zh-CN": "less than",
                                    "en-US": "less than"
                                },
                                "v": "<"
                            },
                            {
                                "l": {
                                    "zh-CN": "less than or equal",
                                    "en-US": "less than or equal"
                                },
                                "v": "<="
                            }
                        ]
                    }
                }
            },
            {
                "name": "value1",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "value",
                        "en-US": "value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            },
            {
                "name": "--2:",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "condition2",
                "type": "str",
                "value": "any",
                "ui": {
                    "label": {
                        "zh-CN": "condition",
                        "en-US": "condition"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "any",
                                    "en-US": "any"
                                },
                                "v": "any"
                            },
                            {
                                "l": {
                                    "zh-CN": "equal to",
                                    "en-US": "equal to"
                                },
                                "v": "=="
                            },
                            {
                                "l": {
                                    "zh-CN": "not equal to",
                                    "en-US": "not equal to"
                                },
                                "v": "!="
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than",
                                    "en-US": "greater than"
                                },
                                "v": ">"
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than or equal",
                                    "en-US": "greater than or equal"
                                },
                                "v": ">="
                            },
                            {
                                "l": {
                                    "zh-CN": "less than",
                                    "en-US": "less than"
                                },
                                "v": "<"
                            },
                            {
                                "l": {
                                    "zh-CN": "less than or equal",
                                    "en-US": "less than or equal"
                                },
                                "v": "<="
                            }
                        ]
                    }
                }
            },
            {
                "name": "value2",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "value",
                        "en-US": "value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            },
            {
                "name": "--3:",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "condition3",
                "type": "str",
                "value": "any",
                "ui": {
                    "label": {
                        "zh-CN": "condition",
                        "en-US": "condition"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "any",
                                    "en-US": "any"
                                },
                                "v": "any"
                            },
                            {
                                "l": {
                                    "zh-CN": "equal to",
                                    "en-US": "equal to"
                                },
                                "v": "=="
                            },
                            {
                                "l": {
                                    "zh-CN": "not equal to",
                                    "en-US": "not equal to"
                                },
                                "v": "!="
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than",
                                    "en-US": "greater than"
                                },
                                "v": ">"
                            },
                            {
                                "l": {
                                    "zh-CN": "greater than or equal",
                                    "en-US": "greater than or equal"
                                },
                                "v": ">="
                            },
                            {
                                "l": {
                                    "zh-CN": "less than",
                                    "en-US": "less than"
                                },
                                "v": "<"
                            },
                            {
                                "l": {
                                    "zh-CN": "less than or equal",
                                    "en-US": "less than or equal"
                                },
                                "v": "<="
                            }
                        ]
                    }
                }
            },
            {
                "name": "value3",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "value",
                        "en-US": "value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#98942B",
        "status": {
            "x": 1120,
            "y": 280,
            "wires": []
        }
    },
    {
        "id": "aa193c820dc14bcf",
        "type": "subflow",
        "name": "condition judgment",
        "info": "",
        "category": "※conditions",
        "in": [
            {
                "x": 100,
                "y": 160,
                "wires": [
                    {
                        "id": "a1a49100e860fc7f"
                    },
                    {
                        "id": "58a570950dc50edf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 650,
                "y": 260,
                "wires": [
                    {
                        "id": "3452e74a6f467e5e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 650,
                "y": 340,
                "wires": [
                    {
                        "id": "3452e74a6f467e5e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "title-judgmentTriggerMode",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "Judgment Trigger mode:",
                        "en-US": "Judgment Trigger mode:"
                    },
                    "type": "none"
                }
            },
            {
                "name": "judgmentTriggerMode",
                "type": "str",
                "value": "any",
                "ui": {
                    "label": {
                        "zh-CN": "On",
                        "en-US": "On"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "All the items have matched the conditions",
                                    "en-US": "All the items have matched the conditions"
                                },
                                "v": "all"
                            },
                            {
                                "l": {
                                    "zh-CN": "Any item has match the condition",
                                    "en-US": "Any item has match the condition"
                                },
                                "v": "any"
                            }
                        ]
                    }
                }
            },
            {
                "name": "output",
                "type": "str",
                "value": "yes",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "When yes",
                                    "en-US": "When yes"
                                },
                                "v": "yes"
                            },
                            {
                                "l": {
                                    "zh-CN": "When no",
                                    "en-US": "When no"
                                },
                                "v": "no"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#E2D96E",
        "outputLabels": [
            "true",
            "false"
        ],
        "status": {
            "x": 620,
            "y": 440,
            "wires": [
                {
                    "id": "ea3247f6fb34b34b",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "cb0af35beb73a330",
        "type": "subflow",
        "name": "condition no",
        "info": "",
        "category": "※conditions",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "9657bcc00fd4b2a5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 100,
                "wires": [
                    {
                        "id": "9657bcc00fd4b2a5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#E2D96E",
        "status": {
            "x": 480,
            "y": 180,
            "wires": []
        }
    },
    {
        "id": "71fa94fa94dbdf24",
        "type": "subflow",
        "name": "condition yes",
        "info": "",
        "category": "※conditions",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#E2D96E"
    },
    {
        "id": "e404a21a200ea798",
        "type": "subflow",
        "name": "face recognization - clear faces",
        "info": "",
        "category": "※vision-computing",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "2271c8e79360da12"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1620,
                "y": 120,
                "wires": [
                    {
                        "id": "99c9b37632c5c033",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#B0CBFF",
        "status": {
            "x": 980,
            "y": 280,
            "wires": [
                {
                    "id": "27ac2da36edceb77",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4090eb5792412927",
        "type": "subflow",
        "name": "face recognization - get faces",
        "info": "",
        "category": "※vision-computing",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "16b0d0cdb64d28b3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 100,
                "wires": [
                    {
                        "id": "a13cca7fb9aa7d7f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#B0CBFF",
        "status": {
            "x": 560,
            "y": 200,
            "wires": [
                {
                    "id": "c3a84f1cf9e4f549",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c5b584eb17fdf706",
        "type": "subflow",
        "name": "face recognization - recognize face",
        "info": "",
        "category": "※vision-computing",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "16819fbb21a27697"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 520,
                "wires": [
                    {
                        "id": "5b94bf340246e2f4",
                        "port": 0
                    },
                    {
                        "id": "44d6327fc2130e2d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "similarity",
                "type": "num",
                "value": "0.5",
                "ui": {
                    "label": {
                        "zh-CN": "Similarity",
                        "en-US": "Similarity"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0CBFF",
        "status": {
            "x": 1240,
            "y": 580,
            "wires": [
                {
                    "id": "3d9fa93c082008e6",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "5bb547dce475f866",
        "type": "subflow",
        "name": "face recognization - register a face",
        "info": "",
        "category": "※vision-computing",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "1bd947ef0136bf4a"
                    },
                    {
                        "id": "fb700ec9c87b1f8b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2340,
                "y": 400,
                "wires": [
                    {
                        "id": "09d5c1594e88a074",
                        "port": 0
                    },
                    {
                        "id": "a601c4964f762916",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#B0CBFF",
        "status": {
            "x": 2340,
            "y": 540,
            "wires": [
                {
                    "id": "0b1a4ae0fb685dac",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8e71ad1d725a1c4b",
        "type": "subflow",
        "name": "geofence check",
        "info": "",
        "category": "※geofence",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "4c66e73173def117"
                    },
                    {
                        "id": "6043d188a20436b2"
                    },
                    {
                        "id": "08675c9954291a36"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 750,
                "y": 140,
                "wires": [
                    {
                        "id": "60dcdf32abc3caca",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B0CBFF",
        "inputLabels": [
            "input from meshtastic gps position original data"
        ],
        "outputLabels": [
            "true or false"
        ],
        "icon": "font-awesome/fa-map-marker",
        "status": {
            "x": 800,
            "y": 280,
            "wires": [
                {
                    "id": "56ab0313b569ca75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c4c69de5166fafdd",
        "type": "subflow",
        "name": "geofence map ui",
        "info": "",
        "category": "※geofence",
        "in": [
            {
                "x": 100,
                "y": 480,
                "wires": [
                    {
                        "id": "08ebc59461b725fb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "type": "conf-types"
                }
            },
            {
                "name": "webPath",
                "type": "str",
                "value": "/w",
                "ui": {
                    "label": {
                        "zh-CN": "webPath",
                        "en-US": "webPath"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "startLatitude",
                "type": "str",
                "value": "22.57"
            },
            {
                "name": "startLongitude",
                "type": "str",
                "value": "113.92"
            },
            {
                "name": "zoom",
                "type": "str",
                "value": "11"
            },
            {
                "name": "----- Offline Map -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "useOfflineMap",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "zh-CN": "Offline map",
                        "en-US": "Offline map"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool"
                        ]
                    }
                }
            },
            {
                "name": "offlineMapZoom",
                "type": "str",
                "value": "1",
                "ui": {
                    "label": {
                        "zh-CN": "Offline Map Zoom",
                        "en-US": "Offline Map Zoom"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "1 (map-1.pmtiles)",
                                    "en-US": "1 (map-1.pmtiles)"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "zh-CN": "2 (map-2.pmtiles)",
                                    "en-US": "2 (map-2.pmtiles)"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "zh-CN": "3 (map-3.pmtiles)",
                                    "en-US": "3 (map-3.pmtiles)"
                                },
                                "v": "3"
                            },
                            {
                                "l": {
                                    "zh-CN": "4 (map-4.pmtiles)",
                                    "en-US": "4 (map-4.pmtiles)"
                                },
                                "v": "4"
                            },
                            {
                                "l": {
                                    "zh-CN": "5 (map-5.pmtiles)",
                                    "en-US": "5 (map-5.pmtiles)"
                                },
                                "v": "5"
                            },
                            {
                                "l": {
                                    "zh-CN": "6 (map-6.pmtiles)",
                                    "en-US": "6 (map-6.pmtiles)"
                                },
                                "v": "6"
                            },
                            {
                                "l": {
                                    "zh-CN": "7 (map-7.pmtiles)",
                                    "en-US": "7 (map-7.pmtiles)"
                                },
                                "v": "7"
                            },
                            {
                                "l": {
                                    "zh-CN": "8 (map-8.pmtiles)",
                                    "en-US": "8 (map-8.pmtiles)"
                                },
                                "v": "8"
                            },
                            {
                                "l": {
                                    "zh-CN": "9 (map-9.pmtiles)",
                                    "en-US": "9 (map-9.pmtiles)"
                                },
                                "v": "9"
                            },
                            {
                                "l": {
                                    "zh-CN": "10 (map-10.pmtiles)",
                                    "en-US": "10 (map-10.pmtiles)"
                                },
                                "v": "10"
                            },
                            {
                                "l": {
                                    "zh-CN": "11 (map-11.pmtiles)",
                                    "en-US": "11 (map-11.pmtiles)"
                                },
                                "v": "11"
                            },
                            {
                                "l": {
                                    "zh-CN": "12 (map-12.pmtiles)",
                                    "en-US": "12 (map-12.pmtiles)"
                                },
                                "v": "12"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#9FE6EC",
        "status": {
            "x": 640,
            "y": 580,
            "wires": [
                {
                    "id": "6e67621c825551cf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "38e9748a918c1e10",
        "type": "subflow",
        "name": "geological sensor",
        "info": "",
        "category": "※sensecap-weather-station",
        "in": [],
        "out": [
            {
                "x": 1500,
                "y": 180,
                "wires": [
                    {
                        "id": "1149f0a0b9fd843e",
                        "port": 0
                    },
                    {
                        "id": "64a108e017924245",
                        "port": 0
                    },
                    {
                        "id": "5f7a3634e1d812be",
                        "port": 0
                    },
                    {
                        "id": "54fbd230597f32cc",
                        "port": 0
                    },
                    {
                        "id": "f9708d2c3af3b53f",
                        "port": 0
                    },
                    {
                        "id": "0693edfe70c78b67",
                        "port": 0
                    },
                    {
                        "id": "5edb4c8f76a82f6a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            },
            {
                "name": "total",
                "type": "bool",
                "value": "true",
                "ui": {
                    "type": "checkbox"
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "status": {
            "x": 1500,
            "y": 400,
            "wires": []
        }
    },
    {
        "id": "24744a865787dab5",
        "type": "subflow",
        "name": "image preview ui",
        "info": "",
        "category": "※camera-grove-vision-ai-v2",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "6b8f8035357f4902"
                    },
                    {
                        "id": "25ab445582af8af5"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "Group",
                        "en-US": "Group"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "height",
                "type": "num",
                "value": "48",
                "ui": {
                    "label": {
                        "zh-CN": "Height",
                        "en-US": "Height"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 1920
                    }
                }
            },
            {
                "name": "mirror",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "zh-CN": "Image mirror",
                        "en-US": "Image mirror"
                    }
                }
            }
        ],
        "meta": {},
        "color": "#9FE6EC",
        "icon": "font-awesome/fa-video-camera",
        "status": {
            "x": 560,
            "y": 320,
            "wires": [
                {
                    "id": "53efe0a905a0143c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "ff55010600100001",
        "type": "subflow",
        "name": "meshtastic chat - init route state",
        "info": "",
        "category": "※meshtastic_chat",
        "in": [],
        "out": [
            {
                "x": 740,
                "y": 160,
                "wires": [
                    {
                        "id": "9e8f4a0ffd0eda44",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B8EA4F",
        "icon": "node-red/node_icon_meshtastic.png",
        "status": {
            "x": 740,
            "y": 240,
            "wires": [
                {
                    "id": "5b54f9c21e1e18cf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "c331a93ea0d418b4",
        "type": "subflow",
        "name": "meshtastic chat - receive message",
        "info": "",
        "category": "※meshtastic_chat",
        "in": [],
        "out": [
            {
                "x": 1020,
                "y": 100,
                "wires": [
                    {
                        "id": "9ebe95fbfa40c393",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B8EA4F",
        "outputLabels": [
            "chat message"
        ],
        "icon": "node-red/node_icon_meshtastic.png",
        "status": {
            "x": 960,
            "y": 200,
            "wires": [
                {
                    "id": "cc68c7211e329ee0",
                    "port": 0
                },
                {
                    "id": "9ebe95fbfa40c393",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "15e3d881bcd13372",
        "type": "subflow",
        "name": "meshtastic chat - send message",
        "info": "",
        "category": "※meshtastic_chat",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "5872a66485b62222"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "firstLineText",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "zh-CN": "First line text",
                        "en-US": "First line text"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "prefixText",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "zh-CN": "Prefix text",
                        "en-US": "Prefix text"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "suffixText",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-text-o",
                    "label": {
                        "zh-CN": "Suffix text",
                        "en-US": "Suffix text"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "inputLabels": [
            "chat message"
        ],
        "icon": "node-red/node_icon_meshtastic.png",
        "status": {
            "x": 700,
            "y": 160,
            "wires": [
                {
                    "id": "0a4a0cebe01e9bab",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "6b6c5faec21326f9",
        "type": "subflow",
        "name": "meshtastic chat ui",
        "info": "",
        "category": "※meshtastic_chat",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0a0e8259eebb401b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "Group",
                "type": "ui-group",
                "value": "",
                "ui": {
                    "type": "conf-types"
                }
            }
        ],
        "meta": {},
        "color": "#9FE6EC",
        "icon": "node-red/node_icon_meshtastic.png",
        "status": {
            "x": 300,
            "y": 180,
            "wires": []
        }
    },
    {
        "id": "ff55010600100002",
        "type": "subflow",
        "name": "meshtastic tracker - get gps position",
        "info": "## Introduction\n\nThrough the network of meshtastic, the location information of trackers in the network is obtained.\n\n\n---\n\n## input\n\nNo input is required, and when it runs in flow, it automatically listens for gps location messages in the meshtastic network, according to the configuration\n\n---\n\n## output\n\n#### Port 1\n\n#### Port 2\n",
        "category": "※meshtastic_tracker",
        "in": [],
        "out": [
            {
                "x": 840,
                "y": 160,
                "wires": [
                    {
                        "id": "c751dff9f403c31b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Device Connection -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "mqtt-broker",
                "type": "mqtt-broker",
                "value": "ff55020100010001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B8EA4F",
        "outputLabels": [
            "a mapping point"
        ],
        "icon": "font-awesome/fa-sitemap",
        "status": {
            "x": 780,
            "y": 280,
            "wires": [
                {
                    "id": "cb2302df9f3430d8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "db0357a026e3fe9d",
        "type": "subflow",
        "name": "object detection",
        "info": "",
        "category": "※vision-computing",
        "in": [
            {
                "x": 80,
                "y": 660,
                "wires": [
                    {
                        "id": "3f6aeb65d3e2c942"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2170,
                "y": 620,
                "wires": [
                    {
                        "id": "5f4428b940c5bf31",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2160,
                "y": 920,
                "wires": [
                    {
                        "id": "8df1bae56c96b08c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2310,
                "y": 1040,
                "wires": [
                    {
                        "id": "7b1d5ceaabf82e41",
                        "port": 0
                    },
                    {
                        "id": "a1aa1633b40cbc7f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Inference Settings -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "detectObject",
                "type": "str",
                "value": "person",
                "ui": {
                    "icon": "font-awesome/fa-bullseye",
                    "label": {
                        "zh-CN": "Detect object",
                        "en-US": "Detect object"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "person",
                                    "en-US": "person"
                                },
                                "v": "person"
                            },
                            {
                                "l": {
                                    "zh-CN": "bicycle",
                                    "en-US": "bicycle"
                                },
                                "v": "bicycle"
                            },
                            {
                                "l": {
                                    "zh-CN": "car",
                                    "en-US": "car"
                                },
                                "v": "car"
                            },
                            {
                                "l": {
                                    "zh-CN": "motorcycle",
                                    "en-US": "motorcycle"
                                },
                                "v": "motorcycle"
                            },
                            {
                                "l": {
                                    "zh-CN": "airplane",
                                    "en-US": "airplane"
                                },
                                "v": "airplane"
                            },
                            {
                                "l": {
                                    "zh-CN": "bus",
                                    "en-US": "bus"
                                },
                                "v": "bus"
                            },
                            {
                                "l": {
                                    "zh-CN": "train",
                                    "en-US": "train"
                                },
                                "v": "train"
                            },
                            {
                                "l": {
                                    "zh-CN": "truck",
                                    "en-US": "truck"
                                },
                                "v": "truck"
                            },
                            {
                                "l": {
                                    "zh-CN": "boat",
                                    "en-US": "boat"
                                },
                                "v": "boat"
                            },
                            {
                                "l": {
                                    "zh-CN": "traffic light",
                                    "en-US": "traffic light"
                                },
                                "v": "traffic light"
                            },
                            {
                                "l": {
                                    "zh-CN": "fire hydrant",
                                    "en-US": "fire hydrant"
                                },
                                "v": "fire hydrant"
                            },
                            {
                                "l": {
                                    "zh-CN": "stop sign",
                                    "en-US": "stop sign"
                                },
                                "v": "stop sign"
                            },
                            {
                                "l": {
                                    "zh-CN": "parking meter",
                                    "en-US": "parking meter"
                                },
                                "v": "parking meter"
                            },
                            {
                                "l": {
                                    "zh-CN": "bench",
                                    "en-US": "bench"
                                },
                                "v": "bench"
                            },
                            {
                                "l": {
                                    "zh-CN": "bird",
                                    "en-US": "bird"
                                },
                                "v": "bird"
                            },
                            {
                                "l": {
                                    "zh-CN": "cat",
                                    "en-US": "cat"
                                },
                                "v": "cat"
                            },
                            {
                                "l": {
                                    "zh-CN": "dog",
                                    "en-US": "dog"
                                },
                                "v": "dog"
                            },
                            {
                                "l": {
                                    "zh-CN": "horse",
                                    "en-US": "horse"
                                },
                                "v": "horse"
                            },
                            {
                                "l": {
                                    "zh-CN": "sheep",
                                    "en-US": "sheep"
                                },
                                "v": "sheep"
                            },
                            {
                                "l": {
                                    "zh-CN": "cow",
                                    "en-US": "cow"
                                },
                                "v": "cow"
                            },
                            {
                                "l": {
                                    "zh-CN": "elephant",
                                    "en-US": "elephant"
                                },
                                "v": "elephant"
                            },
                            {
                                "l": {
                                    "zh-CN": "bear",
                                    "en-US": "bear"
                                },
                                "v": "bear"
                            },
                            {
                                "l": {
                                    "zh-CN": "zebra",
                                    "en-US": "zebra"
                                },
                                "v": "zebra"
                            },
                            {
                                "l": {
                                    "zh-CN": "giraffe",
                                    "en-US": "giraffe"
                                },
                                "v": "giraffe"
                            },
                            {
                                "l": {
                                    "zh-CN": "backpack",
                                    "en-US": "backpack"
                                },
                                "v": "backpack"
                            },
                            {
                                "l": {
                                    "zh-CN": "umbrella",
                                    "en-US": "umbrella"
                                },
                                "v": "umbrella"
                            },
                            {
                                "l": {
                                    "zh-CN": "handbag",
                                    "en-US": "handbag"
                                },
                                "v": "handbag"
                            },
                            {
                                "l": {
                                    "zh-CN": "tie",
                                    "en-US": "tie"
                                },
                                "v": "tie"
                            },
                            {
                                "l": {
                                    "zh-CN": "suitcase",
                                    "en-US": "suitcase"
                                },
                                "v": "suitcase"
                            },
                            {
                                "l": {
                                    "zh-CN": "frisbee",
                                    "en-US": "frisbee"
                                },
                                "v": "frisbee"
                            },
                            {
                                "l": {
                                    "zh-CN": "skis",
                                    "en-US": "skis"
                                },
                                "v": "skis"
                            },
                            {
                                "l": {
                                    "zh-CN": "snowboard",
                                    "en-US": "snowboard"
                                },
                                "v": "snowboard"
                            },
                            {
                                "l": {
                                    "zh-CN": "sports ball",
                                    "en-US": "sports ball"
                                },
                                "v": "sports ball"
                            },
                            {
                                "l": {
                                    "zh-CN": "kite",
                                    "en-US": "kite"
                                },
                                "v": "kite"
                            },
                            {
                                "l": {
                                    "zh-CN": "baseball bat",
                                    "en-US": "baseball bat"
                                },
                                "v": "baseball bat"
                            },
                            {
                                "l": {
                                    "zh-CN": "baseball glove",
                                    "en-US": "baseball glove"
                                },
                                "v": "baseball glove"
                            },
                            {
                                "l": {
                                    "zh-CN": "skateboard",
                                    "en-US": "skateboard"
                                },
                                "v": "skateboard"
                            },
                            {
                                "l": {
                                    "zh-CN": "surfboard",
                                    "en-US": "surfboard"
                                },
                                "v": "surfboard"
                            },
                            {
                                "l": {
                                    "zh-CN": "tennis racket",
                                    "en-US": "tennis racket"
                                },
                                "v": "tennis racket"
                            },
                            {
                                "l": {
                                    "zh-CN": "bottle",
                                    "en-US": "bottle"
                                },
                                "v": "bottle"
                            },
                            {
                                "l": {
                                    "zh-CN": "wine glass",
                                    "en-US": "wine glass"
                                },
                                "v": "wine glass"
                            },
                            {
                                "l": {
                                    "zh-CN": "cup",
                                    "en-US": "cup"
                                },
                                "v": "cup"
                            },
                            {
                                "l": {
                                    "zh-CN": "fork",
                                    "en-US": "fork"
                                },
                                "v": "fork"
                            },
                            {
                                "l": {
                                    "zh-CN": "knife",
                                    "en-US": "knife"
                                },
                                "v": "knife"
                            },
                            {
                                "l": {
                                    "zh-CN": "spoon",
                                    "en-US": "spoon"
                                },
                                "v": "spoon"
                            },
                            {
                                "l": {
                                    "zh-CN": "bowl",
                                    "en-US": "bowl"
                                },
                                "v": "bowl"
                            },
                            {
                                "l": {
                                    "zh-CN": "banana",
                                    "en-US": "banana"
                                },
                                "v": "banana"
                            },
                            {
                                "l": {
                                    "zh-CN": "apple",
                                    "en-US": "apple"
                                },
                                "v": "apple"
                            },
                            {
                                "l": {
                                    "zh-CN": "sandwich",
                                    "en-US": "sandwich"
                                },
                                "v": "sandwich"
                            },
                            {
                                "l": {
                                    "zh-CN": "orange",
                                    "en-US": "orange"
                                },
                                "v": "orange"
                            },
                            {
                                "l": {
                                    "zh-CN": "broccoli",
                                    "en-US": "broccoli"
                                },
                                "v": "broccoli"
                            },
                            {
                                "l": {
                                    "zh-CN": "carrot",
                                    "en-US": "carrot"
                                },
                                "v": "carrot"
                            },
                            {
                                "l": {
                                    "zh-CN": "hot dog",
                                    "en-US": "hot dog"
                                },
                                "v": "hot dog"
                            },
                            {
                                "l": {
                                    "zh-CN": "pizza",
                                    "en-US": "pizza"
                                },
                                "v": "pizza"
                            },
                            {
                                "l": {
                                    "zh-CN": "donut",
                                    "en-US": "donut"
                                },
                                "v": "donut"
                            },
                            {
                                "l": {
                                    "zh-CN": "cake",
                                    "en-US": "cake"
                                },
                                "v": "cake"
                            },
                            {
                                "l": {
                                    "zh-CN": "chair",
                                    "en-US": "chair"
                                },
                                "v": "chair"
                            },
                            {
                                "l": {
                                    "zh-CN": "couch",
                                    "en-US": "couch"
                                },
                                "v": "couch"
                            },
                            {
                                "l": {
                                    "zh-CN": "potted plant",
                                    "en-US": "potted plant"
                                },
                                "v": "potted plant"
                            },
                            {
                                "l": {
                                    "zh-CN": "bed",
                                    "en-US": "bed"
                                },
                                "v": "bed"
                            },
                            {
                                "l": {
                                    "zh-CN": "dining table",
                                    "en-US": "dining table"
                                },
                                "v": "dining table"
                            },
                            {
                                "l": {
                                    "zh-CN": "toilet",
                                    "en-US": "toilet"
                                },
                                "v": "toilet"
                            },
                            {
                                "l": {
                                    "zh-CN": "tv",
                                    "en-US": "tv"
                                },
                                "v": "tv"
                            },
                            {
                                "l": {
                                    "zh-CN": "laptop",
                                    "en-US": "laptop"
                                },
                                "v": "laptop"
                            },
                            {
                                "l": {
                                    "zh-CN": "mouse",
                                    "en-US": "mouse"
                                },
                                "v": "mouse"
                            },
                            {
                                "l": {
                                    "zh-CN": "remote",
                                    "en-US": "remote"
                                },
                                "v": "remote"
                            },
                            {
                                "l": {
                                    "zh-CN": "keyboard",
                                    "en-US": "keyboard"
                                },
                                "v": "keyboard"
                            },
                            {
                                "l": {
                                    "zh-CN": "cell phone",
                                    "en-US": "cell phone"
                                },
                                "v": "cell phone"
                            },
                            {
                                "l": {
                                    "zh-CN": "microwave",
                                    "en-US": "microwave"
                                },
                                "v": "microwave"
                            },
                            {
                                "l": {
                                    "zh-CN": "oven",
                                    "en-US": "oven"
                                },
                                "v": "oven"
                            },
                            {
                                "l": {
                                    "zh-CN": "toaster",
                                    "en-US": "toaster"
                                },
                                "v": "toaster"
                            },
                            {
                                "l": {
                                    "zh-CN": "sink",
                                    "en-US": "sink"
                                },
                                "v": "sink"
                            },
                            {
                                "l": {
                                    "zh-CN": "refrigerator",
                                    "en-US": "refrigerator"
                                },
                                "v": "refrigerator"
                            },
                            {
                                "l": {
                                    "zh-CN": "book",
                                    "en-US": "book"
                                },
                                "v": "book"
                            },
                            {
                                "l": {
                                    "zh-CN": "clock",
                                    "en-US": "clock"
                                },
                                "v": "clock"
                            },
                            {
                                "l": {
                                    "zh-CN": "vase",
                                    "en-US": "vase"
                                },
                                "v": "vase"
                            },
                            {
                                "l": {
                                    "zh-CN": "scissors",
                                    "en-US": "scissors"
                                },
                                "v": "scissors"
                            },
                            {
                                "l": {
                                    "zh-CN": "teddy bear",
                                    "en-US": "teddy bear"
                                },
                                "v": "teddy bear"
                            },
                            {
                                "l": {
                                    "zh-CN": "hair drier",
                                    "en-US": "hair drier"
                                },
                                "v": "hair drier"
                            },
                            {
                                "l": {
                                    "zh-CN": "toothbrush",
                                    "en-US": "toothbrush"
                                },
                                "v": "toothbrush"
                            }
                        ]
                    }
                }
            },
            {
                "name": "confidence",
                "type": "str",
                "value": "50%",
                "ui": {
                    "label": {
                        "zh-CN": "Confidence",
                        "en-US": "Confidence"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "10%",
                                    "en-US": "10%"
                                },
                                "v": "10%"
                            },
                            {
                                "l": {
                                    "zh-CN": "20%",
                                    "en-US": "20%"
                                },
                                "v": "20%"
                            },
                            {
                                "l": {
                                    "zh-CN": "30%",
                                    "en-US": "30%"
                                },
                                "v": "30%"
                            },
                            {
                                "l": {
                                    "zh-CN": "40%",
                                    "en-US": "40%"
                                },
                                "v": "40%"
                            },
                            {
                                "l": {
                                    "zh-CN": "50%",
                                    "en-US": "50%"
                                },
                                "v": "50%"
                            },
                            {
                                "l": {
                                    "zh-CN": "60%",
                                    "en-US": "60%"
                                },
                                "v": "60%"
                            },
                            {
                                "l": {
                                    "zh-CN": "70%",
                                    "en-US": "70%"
                                },
                                "v": "70%"
                            },
                            {
                                "l": {
                                    "zh-CN": "80%",
                                    "en-US": "80%"
                                },
                                "v": "80%"
                            },
                            {
                                "l": {
                                    "zh-CN": "90%",
                                    "en-US": "90%"
                                },
                                "v": "90%"
                            }
                        ]
                    }
                }
            },
            {
                "name": "accuracy",
                "type": "str",
                "value": "low",
                "ui": {
                    "label": {
                        "zh-CN": "Accuracy",
                        "en-US": "Accuracy"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "(Takes 2 seconds) Low",
                                    "en-US": "(Takes 2 seconds) Low"
                                },
                                "v": "low"
                            },
                            {
                                "l": {
                                    "zh-CN": "(Takes 5 seconds) Medium",
                                    "en-US": "(Takes 5 seconds) Medium"
                                },
                                "v": "medium"
                            },
                            {
                                "l": {
                                    "zh-CN": "(Takes 10 seconds) High",
                                    "en-US": "(Takes 10 seconds) High"
                                },
                                "v": "high"
                            }
                        ]
                    }
                }
            },
            {
                "name": "----- Output 1: image -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "enabled",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "----- Output 2: inference result -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "enabled",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "----- Output 3: trigger -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "triggerMode",
                "type": "str",
                "value": "yes",
                "ui": {
                    "label": {
                        "zh-CN": "When ...",
                        "en-US": "When ..."
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Detected",
                                    "en-US": "Detected"
                                },
                                "v": "yes"
                            },
                            {
                                "l": {
                                    "zh-CN": "Not detected",
                                    "en-US": "Not detected"
                                },
                                "v": "no"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B0CBFF",
        "outputLabels": [
            "Annotated Image",
            "Inference Result",
            "Detection Trigger"
        ],
        "status": {
            "x": 2160,
            "y": 1320,
            "wires": [
                {
                    "id": "112bd9434fbbd5f1",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a71c1f4952addcd7",
        "type": "subflow",
        "name": "power system sensor",
        "info": "",
        "category": "※sensecap-weather-station",
        "in": [],
        "out": [
            {
                "x": 910,
                "y": 80,
                "wires": [
                    {
                        "id": "e00aad24bc1ea0c0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 920,
                "y": 140,
                "wires": [
                    {
                        "id": "506c2695b3dcac2a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 920,
                "y": 200,
                "wires": [
                    {
                        "id": "899ccd7752f11fc2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 930,
                "y": 260,
                "wires": [
                    {
                        "id": "ae2892c04d73113b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#B8EA4F",
        "outputLabels": [
            "Solar voltage",
            "Power of charge",
            "Battery status",
            "Battery discharge"
        ],
        "status": {
            "x": 860,
            "y": 360,
            "wires": []
        }
    },
    {
        "id": "61d68b31136dfa92",
        "type": "subflow",
        "name": "rs485 light controller - control light",
        "info": "The Light Controller Node is designed to control the state of a light based on two environment variables: `LIGHT_COLOR` and `LIGHT_MODE`. Set the light color to red, green, or yellow and the light mode to blink, flashing, on, or off. The node converts these settings into corresponding decimal values for further processing.\n\n### Environment Variables\n\n- **LIGHT_COLOR**: Defines the color of the light.\n  - Valid options: `red`, `green`, `yellow`\n  \n- **LIGHT_MODE**: Defines the mode of the light.\n  - Valid options: `blink`, `flashing`, `on`, `off`\n\n### Output Values\n\nThe node maps the combinations of `LIGHT_COLOR` and `LIGHT_MODE` to specific hexadecimal values, which are then converted to decimal values and output through the node's message payload.\n\n| LIGHT_COLOR | LIGHT_MODE | Hex Value | Decimal Value |\n|-------------|-------------|-----------|---------------|\n| red         | blink       | 0x21      | 33            |\n| red         | flashing    | 0x31      | 49            |\n| red         | on          | 0x11      | 17            |\n| red         | off         | 0x60      | 96            |\n| green       | blink       | 0x23      | 35            |\n| green       | flashing    | 0x33      | 51            |\n| green       | on          | 0x13      | 19            |\n| green       | off         | 0x60      | 96            |\n| yellow      | blink       | 0x22      | 34            |\n| yellow      | flashing    | 0x32      | 50            |\n| yellow      | on          | 0x12      | 18            |\n| yellow      | off         | 0x60      | 96            |\n\n### How to Use\n\n1. **Set Environment Variables**:\n   - Define `LIGHT_COLOR` and `LIGHT_MODE` in the node properties.\n\n2. **Deploy the Node**:\n   - Ensure the node is deployed and integrated into your main flow.\n\n3. **Trigger the Node**:\n   - Use an Inject node to set and trigger the environment variables.\n\n4. **Check Output**:\n   - The output will be a decimal value corresponding to the light settings, viewable through a Debug node.\n\n### Example Flow\n\n1. **Inject Node**: Use to set and trigger the environment variables.\n2. **Light Controller Node**: Insert the Light Controller Node.\n3. **Debug Node**: Connect to the node output to see the result.\n\nConfigure the Inject node to set `LIGHT_COLOR` and `LIGHT_MODE`. Deploy the flow, trigger the inject node, and view the output in the debug panel.",
        "category": "※rs485-light-controller",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "cc379f45cd70a2bb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "----- Device Settings -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "modbus-client",
                "type": "modbus-client",
                "value": "ff55020100020001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "productModel",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "zh-CN": "*Product model",
                        "en-US": "*Product model"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Type A",
                                    "en-US": "Type A"
                                },
                                "v": "typea"
                            }
                        ]
                    }
                }
            },
            {
                "name": "----- Light Mode -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "LIGHT_MODE",
                "type": "str",
                "value": "on",
                "ui": {
                    "label": {
                        "zh-CN": "*Light mode",
                        "en-US": "*Light mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "On",
                                    "en-US": "On"
                                },
                                "v": "on"
                            },
                            {
                                "l": {
                                    "zh-CN": "Blink",
                                    "en-US": "Blink"
                                },
                                "v": "blink"
                            },
                            {
                                "l": {
                                    "zh-CN": "Flashing",
                                    "en-US": "Flashing"
                                },
                                "v": "flashing"
                            },
                            {
                                "l": {
                                    "zh-CN": "Off",
                                    "en-US": "Off"
                                },
                                "v": "off"
                            }
                        ]
                    }
                }
            },
            {
                "name": "LIGHT_COLOR",
                "type": "str",
                "value": "red",
                "ui": {
                    "label": {
                        "zh-CN": "*Light color",
                        "en-US": "*Light color"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Red",
                                    "en-US": "Red"
                                },
                                "v": "red"
                            },
                            {
                                "l": {
                                    "zh-CN": "Green",
                                    "en-US": "Green"
                                },
                                "v": "green"
                            },
                            {
                                "l": {
                                    "zh-CN": "Yellow",
                                    "en-US": "Yellow"
                                },
                                "v": "yellow"
                            }
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "lgiht-controller-yx75r-ryg",
            "version": "0.0.1",
            "author": "Peter Pan",
            "desc": "This is a modbus Light Controller for yx75r-ryg light",
            "license": "MIT"
        },
        "color": "#B8EA4F",
        "icon": "node-red/light.svg",
        "status": {
            "x": 960,
            "y": 140,
            "wires": [
                {
                    "id": "de52d590953c98c7",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "b8596ac29abcf525",
        "type": "subflow",
        "name": "rs485 light controller - control sound",
        "info": "",
        "category": "※rs485-light-controller",
        "in": [
            {
                "x": 300,
                "y": 460,
                "wires": [
                    {
                        "id": "f25ba559326dccfb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "----- Device Connection -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "modbus-client",
                "type": "modbus-client",
                "value": "ff55020100020001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            },
            {
                "name": "product-model",
                "type": "str",
                "value": "type_a",
                "ui": {
                    "label": {
                        "zh-CN": "*Product model",
                        "en-US": "*Product model"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Type A",
                                    "en-US": "Type A"
                                },
                                "v": "type_a"
                            }
                        ]
                    }
                }
            },
            {
                "name": "----- Device Settings -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "action",
                "type": "str",
                "value": "play",
                "ui": {
                    "label": {
                        "zh-CN": "Action",
                        "en-US": "Action"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "zh-CN": "Play",
                                    "en-US": "Play"
                                },
                                "v": "play"
                            },
                            {
                                "l": {
                                    "zh-CN": "Stop",
                                    "en-US": "Stop"
                                },
                                "v": "stop"
                            }
                        ]
                    }
                }
            },
            {
                "name": "volume",
                "type": "num",
                "value": "1",
                "ui": {
                    "label": {
                        "zh-CN": "Volume",
                        "en-US": "Volume"
                    },
                    "type": "spinner",
                    "opts": {
                        "min": 1,
                        "max": 30
                    }
                }
            }
        ],
        "meta": {},
        "color": "#B8EA4F",
        "icon": "font-awesome/fa-volume-up",
        "status": {
            "x": 1220,
            "y": 640,
            "wires": [
                {
                    "id": "7f7fc470a59b569f",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f31e55153689cae9",
        "type": "subflow",
        "name": "rs485 light controller - get light status",
        "info": "",
        "category": "※rs485-light-controller",
        "in": [],
        "out": [
            {
                "x": 860,
                "y": 60,
                "wires": [
                    {
                        "id": "1e6f02dddd31a2e7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "----- Device Connection -----",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "none"
                }
            },
            {
                "name": "modbus-client",
                "type": "modbus-client",
                "value": "ff55020100020001",
                "ui": {
                    "icon": "font-awesome/fa-server",
                    "label": {
                        "zh-CN": "*Server",
                        "en-US": "*Server"
                    },
                    "type": "conf-types"
                }
            }
        ],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B8EA4F",
        "icon": "node-red/light.svg",
        "status": {
            "x": 860,
            "y": 260,
            "wires": [
                {
                    "id": "7bae1afd782eeb71",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "0d921b2cdb2f47a8",
        "type": "subflow",
        "name": "tracking analyze",
        "info": "",
        "category": "※meshtastic_tracker",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "b7006d8725379028"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1530,
                "y": 220,
                "wires": [
                    {
                        "id": "4dc77c2354f525c8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1530,
                "y": 260,
                "wires": [
                    {
                        "id": "1c0afd68563ff258",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1530,
                "y": 300,
                "wires": [
                    {
                        "id": "1c0afd68563ff258",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#B0CBFF",
        "outputLabels": [
            "Annotated Image",
            "Counting (A to B)",
            "Counting (B to A)"
        ],
        "icon": "font-awesome/fa-map-marker",
        "status": {
            "x": 1620,
            "y": 420,
            "wires": [
                {
                    "id": "eba60b2edc9f1677",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "a6ec996dc8d4208d",
        "type": "subflow",
        "name": "watcher-stt",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1760,
                "y": 400,
                "wires": [
                    {
                        "id": "4b0eee312fed3a38",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "RSP_TEXT",
                "type": "str",
                "value": "OK!"
            },
            {
                "name": "RSP_AUDIO",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "336d4af7487f2429",
        "type": "subflow",
        "name": "watcher-take-pictures",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 980,
                "y": 840,
                "wires": [
                    {
                        "id": "5e72fad9417a86ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "RSP_TEXT",
                "type": "str",
                "value": "OK!"
            },
            {
                "name": "RSP_AUDIO",
                "type": "str",
                "value": ""
            },
            {
                "name": "PIC_DURATION",
                "type": "str",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c1b434e7ff15727e",
        "type": "subflow",
        "name": "whether detect any object",
        "info": "",
        "category": "※camera-grove-vision-ai-v2",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "684df14293772fea"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 40,
                "wires": [
                    {
                        "id": "e5661c67a0e2a2fd",
                        "port": 0
                    }
                ]
            },
            {
                "x": 750,
                "y": 140,
                "wires": [
                    {
                        "id": "e5661c67a0e2a2fd",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "version": "0.0.1",
            "author": "seeed",
            "license": "Apache-2.0"
        },
        "color": "#E2D96E",
        "inputLabels": [
            "connect from the inference result output"
        ],
        "outputLabels": [
            "if yes ...",
            "if no ..."
        ]
    },
    {
        "id": "403fd0931430b1ba",
        "type": "group",
        "z": "0c809b82525ab765",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "995c84e705c42f95",
            "c10a21c1b22ffdab",
            "1b8318210eb474c7",
            "4d962a89b81eb87a",
            "f8e3221e1e80cbfe",
            "645dfed0a903142d",
            "25731624943ab460",
            "01dc38762911d137",
            "79bf31c1444fcbe6",
            "195f5a9cdc829090",
            "424b8ba73055c5fd",
            "ba5793fde63da3de",
            "20ea6d9dd442b76f",
            "551908b4f634e351",
            "9db4c2e9d0a9ec58"
        ],
        "x": 14,
        "y": 699,
        "w": 492,
        "h": 622
    },
    {
        "id": "b860a2396af6a58d",
        "type": "group",
        "z": "0c809b82525ab765",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "c343e6092a6dbe7c",
            "c0aa7556530111a0",
            "bb3471a7f85fb434",
            "2daa1918dc47a50f",
            "73051e495187766b",
            "20231490b3c12cec",
            "84ae227288e9adad"
        ],
        "x": 14,
        "y": 19,
        "w": 812,
        "h": 242
    },
    {
        "id": "53583def5a2df0c8",
        "type": "group",
        "z": "0c809b82525ab765",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "c28dc59ceae9c32d",
            "98c40f424a9c44e2",
            "f353fb9f47e745d7",
            "c3b1a5da5f43d713",
            "519ba749ee53d39b"
        ],
        "x": 14,
        "y": 279,
        "w": 792,
        "h": 402
    },
    {
        "id": "78ead2245c9ecb8e",
        "type": "group",
        "z": "7ea6938ae37cbe94",
        "name": "",
        "style": {
            "label": false,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "f49129326bef6f16",
            "cc8e83e89534a08f",
            "4a616b5089116eae",
            "d00dd35e25666b41",
            "ea74dfdadcfbe09a",
            "cff700f5f73faa68",
            "379a0aaa5767e20c",
            "050b71b9be932811",
            "7d6faec91cd41eb5"
        ],
        "x": 14,
        "y": 219,
        "w": 812,
        "h": 222
    },
    {
        "id": "b304e5ad0409a34b",
        "type": "group",
        "z": "7ea6938ae37cbe94",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "74b1a10d56999ee0",
            "611b6e7781b9c234",
            "e378acb9cb9e0b3d",
            "38a0bd82eea44c01",
            "aaf481974a57e1e8",
            "f41bcc40229d88f3"
        ],
        "x": 854,
        "y": 219,
        "w": 372,
        "h": 242
    },
    {
        "id": "239ef0f0af9891c0",
        "type": "group",
        "z": "7ea6938ae37cbe94",
        "name": "",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "a102e5a6ff2b3083",
            "cda70a2a5aa2c560",
            "7e2cb081415ff48a",
            "8a526b623bbf27c6",
            "6243e7f95a3c1843",
            "979eea87e1ae3f87",
            "accc8527ff15d5cf",
            "5c265efcb4ae662a",
            "2d6367f378c0e452",
            "59563b7dd998cfa6",
            "6e29624efc573235",
            "d48e7fe06e1554d5",
            "aa4f3537143069d7",
            "a15bfa0a610171ec",
            "89dae88b645185bd"
        ],
        "x": 14,
        "y": 459,
        "w": 672,
        "h": 502
    },
    {
        "id": "b980ede9e4e6e0a1",
        "type": "group",
        "z": "7ea6938ae37cbe94",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "9bc0ffab86826e62",
            "d51874c22a88bcf0",
            "963e2bb44b0d624e",
            "b2c277b5e5f0d381"
        ],
        "x": 14,
        "y": 19,
        "w": 612,
        "h": 182
    },
    {
        "id": "8eb1280652c660c2",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "03f1fdf2a31d8134",
            "db5ac7ba2a754d65",
            "4a5b13a4e63396ee",
            "8f011a4c95e46173",
            "33637b17a506cbd0"
        ],
        "x": 14,
        "y": 19,
        "w": 932,
        "h": 182
    },
    {
        "id": "cabc3b813baaea59",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "2fbc45a4def674f8",
            "2c02a34157a2ec9b",
            "cf0be92962dd1c37",
            "a671425179a5ebba",
            "fde8650716160e52",
            "1e4ac8c4f95f8ccf",
            "16c63bfa8614cb46",
            "b0b222c55b1cca0c",
            "ea24ab258435fcf5",
            "6974dd9f8541cf10",
            "906da40788a2a653",
            "1b254c2ecc8d070c",
            "62028a4a17998fde",
            "bc11da047423a1a6",
            "15b3a31efa73cab8",
            "207ff54d4031988f",
            "b6787453fdafa34f",
            "63ec0ca68c54bf68",
            "89ed2cd971381520"
        ],
        "x": 14,
        "y": 739,
        "w": 1052,
        "h": 502
    },
    {
        "id": "d72fe5300f0090a1",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "747375a58c6ca14e",
            "aa1a0522cb1e76b4",
            "a6279e97f8d67997",
            "b288e522160ae3e5",
            "a4bb8528feb6766c",
            "710ca388b2b9c30f",
            "158ad691aac3f239",
            "70a4a1dd58581050",
            "46a4333e9f1af0bb",
            "7743bc6a2a1fee06",
            "1551266451c3fb26"
        ],
        "x": 14,
        "y": 1259,
        "w": 852,
        "h": 442
    },
    {
        "id": "25dbbcda2ecff0d3",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "715d4e1eff0435c7",
            "346a2b3c97997210",
            "3c5b4e04f79ed01c",
            "45547527be48c127",
            "c908a7b3e9ceed5f"
        ],
        "x": 14,
        "y": 219,
        "w": 938,
        "h": 502
    },
    {
        "id": "69a9c77ee5e784d2",
        "type": "group",
        "z": "1d374d406a20801f",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "27305ebce4a2d493",
            "17a5c7085e533dc2",
            "cff0741c6fdb4b9d",
            "14ed4a4e100c7ee0",
            "e5e47ed9301b0d9c",
            "0e9b95629c161df6",
            "2aff97b44b1f241d",
            "30a0d30e2edc72e9",
            "ea20ed6b4d612b21",
            "e36c938de732ca09",
            "8f9044118e666074"
        ],
        "x": 14,
        "y": 2179,
        "w": 992,
        "h": 222
    },
    {
        "id": "f2240ffea702c711",
        "type": "group",
        "z": "1d374d406a20801f",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "7397d120b410ef9e",
            "f9fc394e3a78208c",
            "f6a28ecd60a867cd",
            "7470944df116f5ef",
            "db99d241958055e8"
        ],
        "x": 14,
        "y": 1379,
        "w": 1152,
        "h": 782
    },
    {
        "id": "d5d8df319b551320",
        "type": "group",
        "z": "1d374d406a20801f",
        "name": "",
        "style": {
            "label": true,
            "color": "#dbcbe7",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "9c401016eee3aa94",
            "811d115f6f853d19",
            "c20388bdb4044b69",
            "6876814f9a6e4c10",
            "6e6effaa0b4d76fa",
            "59255b7804a9027d",
            "071cbd0161446c28",
            "edd116f7e01a9da3"
        ],
        "x": 14,
        "y": 359,
        "w": 572,
        "h": 382
    },
    {
        "id": "5e9fa6d07b305402",
        "type": "group",
        "z": "1d374d406a20801f",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "cc98ad9231b7c3e5",
            "e02d30882b420f09",
            "62a59ea7cea57517",
            "b5bee68cd3323fc0",
            "e89af5b312b5cd69",
            "1daa59b6fd8e3be8",
            "891b79792f07979c",
            "97b00c98013a1bf3",
            "4dfcbb3acf4d1a0b",
            "27c6fd8ae20ca543",
            "372b39d8a21d0962",
            "e720d1378dce789d",
            "ace583c874c299c4",
            "adfc8142f9adb1dc"
        ],
        "x": 14,
        "y": 39,
        "w": 1152,
        "h": 302
    },
    {
        "id": "e20ea29c653e5b88",
        "type": "group",
        "z": "1d374d406a20801f",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "c0e18a9b71cf75ce",
            "837666762be59777",
            "d5465cecd9e6586c",
            "f3a9740925b12270",
            "b3452e3f6fbe33c8",
            "e126765175623637",
            "6e289ff55fb9ed6d"
        ],
        "x": 14,
        "y": 759,
        "w": 1278,
        "h": 608
    },
    {
        "id": "7838c19b434525ad",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "2e92fd27d7ac40a5",
            "6cbb3414127e3215",
            "9b1ab04215747138",
            "c67ba04301dac130",
            "12dde4415dcc183a",
            "af2ab6278f822d0c",
            "062e7b3b1001f53d"
        ],
        "x": 634,
        "y": 959,
        "w": 958,
        "h": 648
    },
    {
        "id": "8132d836852c68fe",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "b3bc622d575108dc",
            "5f580c8b1d58f87d",
            "e63e3eaf3443875c",
            "9eb62452c12e3fb2",
            "0351159f478dfac6",
            "8a7ef8709ca22408",
            "a2e3a3cb4b0f3c7f",
            "57594b14324cb2c5",
            "4554f7bb1070da2a",
            "29a672a1c4e4d1ee",
            "ef8471cb96dc764e"
        ],
        "x": 14,
        "y": 1059,
        "w": 592,
        "h": 302
    },
    {
        "id": "287000f327b1be22",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "a2c3efba58088756",
            "44958244653afb30",
            "e79418b6c835dbae",
            "b2bba85d94b36aed",
            "3defb712fb98a1e2",
            "a8be22b73701ee1a"
        ],
        "x": 14,
        "y": 519,
        "w": 592,
        "h": 262
    },
    {
        "id": "dfe811de8f857fd2",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "ebcc401d9cf240f1",
            "fdd12a4e99a4b657",
            "b4cd65598a4d4f16",
            "28274b491a42bae4",
            "ec8b92d87eccb96f",
            "fe72aa57e87bd02c"
        ],
        "x": 14,
        "y": 799,
        "w": 592,
        "h": 242
    },
    {
        "id": "97a27d4ddc376247",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "16391da1d25c33d0",
            "606db3a49302cb6b",
            "ee33718c46d78681",
            "1bf5fbd9a14b9edc",
            "395bfc24b7648832",
            "1720de01fab9e8dc",
            "345dc03ab48231a9",
            "1d02f4acf91bc4c0",
            "6a1b4e060635d355",
            "827f835144d03ad4",
            "8074d3bd9f84a5f5",
            "c3a9d9983156a44f",
            "629144233b94a2a6",
            "dea375b48fcd6296",
            "029b1feb9b8344c4",
            "55247c8ab539d04b",
            "2c2251d76372bb85"
        ],
        "x": 634,
        "y": 519,
        "w": 592,
        "h": 422
    },
    {
        "id": "34c846645d31e79e",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "name": "",
        "style": {
            "label": true,
            "color": "#000000",
            "fill": "#dbcbe7"
        },
        "nodes": [
            "bde7d2af1d20bdc0",
            "021abd08a31e38fc",
            "7b3ad55f860d0b20",
            "1477ebc70370783c",
            "133dda81cd7e7391",
            "1c4edea8d1de3c64",
            "afd21e9a47161fbb",
            "3d1d87e0fe772899",
            "c3b28684d9e8c692",
            "c932e698ae2bd064",
            "54bdb1de78c78123",
            "edee6582d6c4a68e",
            "2307e91bec054f96",
            "192bdcf3da14608f",
            "8a50e605490ebb8a",
            "1a2fdaeaae8a6893",
            "2995a7860e9707f2"
        ],
        "x": 14,
        "y": 19,
        "w": 792,
        "h": 482
    },
    {
        "id": "e17956ebf8df1058",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c0843f7df37d8e49",
            "b64fe8d75146fa69",
            "ca580e1444a51d82"
        ],
        "x": 814,
        "y": 479,
        "w": 312,
        "h": 142
    },
    {
        "id": "4812ceb994ecee47",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6f49bb85fb1ca9dd",
            "2a5b878f4609d83d",
            "5c869b5a19000f23",
            "a3d2cf36d30ad3a8",
            "7712b011fe04d5e2",
            "1a9a58a193b6a274",
            "86d3046f1847f777"
        ],
        "x": 274,
        "y": 699,
        "w": 1132,
        "h": 142
    },
    {
        "id": "d821d39182a45218",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "195c561cb96ad7cb",
            "8e5fb88de994075b",
            "a8dfe50e821dfd0b"
        ],
        "x": 268,
        "y": 179,
        "w": 1704,
        "h": 268
    },
    {
        "id": "b36553531342820f",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a78007c93b1c1fe1",
            "46ee7c72c6d678a2",
            "1fec46e9cd347a2a",
            "d1f974398f147b02",
            "1567eeb1bb47fec5"
        ],
        "x": 274,
        "y": 479,
        "w": 532,
        "h": 202
    },
    {
        "id": "977b1c156a278f35",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "82a43b334bf4b932",
            "c6651882a2276fc2",
            "03a1c725d65f15e2",
            "7fff0e065d651496",
            "9abc04b2e7d3257a"
        ],
        "x": 274,
        "y": 19,
        "w": 1312,
        "h": 142
    },
    {
        "id": "99d0e9268f69dc25",
        "type": "group",
        "z": "aa193c820dc14bcf",
        "name": "initial stage, all items report ids",
        "style": {
            "label": true
        },
        "nodes": [
            "c7ddc2768894bbca",
            "3ea72c2a420cfde0"
        ],
        "x": 374,
        "y": 39,
        "w": 492,
        "h": 82
    },
    {
        "id": "033919525f9f8f52",
        "type": "group",
        "z": "e404a21a200ea798",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4a7e17d4865cffa2",
            "87c774e28eacd57b"
        ],
        "x": 954,
        "y": 139,
        "w": 492,
        "h": 82
    },
    {
        "id": "93233531937b3c5b",
        "type": "group",
        "z": "e404a21a200ea798",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1757226126fc2011",
            "b9e071b6f00c3d67",
            "27ac2da36edceb77",
            "2271c8e79360da12"
        ],
        "x": 124,
        "y": 99,
        "w": 782,
        "h": 82
    },
    {
        "id": "1891c8a9c8279dc1",
        "type": "group",
        "z": "e404a21a200ea798",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f498bbc270cb5e99",
            "a9a2f7647a0e4ed4"
        ],
        "x": 954,
        "y": 39,
        "w": 492,
        "h": 82
    },
    {
        "id": "7f68e627b4ad456a",
        "type": "group",
        "z": "c5b584eb17fdf706",
        "name": "get face name by face id",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "abd38a3bfba94980",
            "7a46d18411e71823",
            "5b94bf340246e2f4"
        ],
        "x": 134,
        "y": 439,
        "w": 592,
        "h": 82
    },
    {
        "id": "e6f197a5204b1d19",
        "type": "group",
        "z": "c5b584eb17fdf706",
        "name": "get all vectors computing",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "81d8c848044b4824",
            "cdeb1ae0239a071a",
            "3c1501d272224b44",
            "1a6981a43e2ef392",
            "e69c7076a06a204d",
            "e7ef601afcf5adf7"
        ],
        "x": 134,
        "y": 319,
        "w": 1112,
        "h": 102
    },
    {
        "id": "57d31dd28e179a83",
        "type": "group",
        "z": "c5b584eb17fdf706",
        "name": "get current face vector",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "6119ca70cef18695",
            "822916ab0d9311d2",
            "b10beb24b2cfe3e1",
            "94ec4bf104636819",
            "eacdc21c158e48a0",
            "16819fbb21a27697",
            "8bb12f72033949dd",
            "b8156427366ffbc0",
            "20ccfceca2c8a814"
        ],
        "x": 134,
        "y": 79,
        "w": 1252,
        "h": 222
    },
    {
        "id": "e18cdbece1ee414b",
        "type": "group",
        "z": "5bb547dce475f866",
        "name": "update records file",
        "style": {
            "label": true
        },
        "nodes": [
            "d8d29a2e1f68dfe7",
            "13ea454879d2d2db",
            "6fe4a735d30c679b",
            "fe36be70f959558f",
            "d5eb4430aeb03f2b",
            "613abc3d927e73b0",
            "d515c361989c804d",
            "82ed87c64df302ee",
            "a65f432ce45eef27"
        ],
        "x": 134,
        "y": 259,
        "w": 1352,
        "h": 162
    },
    {
        "id": "0574b46850707de5",
        "type": "group",
        "z": "5bb547dce475f866",
        "name": "update records-name file",
        "style": {
            "label": true
        },
        "nodes": [
            "77d34c5dcff131de",
            "571941aded192eef",
            "f145c165bea3f87a",
            "244f3d42bf4c2b31",
            "3f60edfd50035b43"
        ],
        "x": 134,
        "y": 439,
        "w": 1052,
        "h": 82
    },
    {
        "id": "a18ab3f640fb968f",
        "type": "group",
        "z": "5bb547dce475f866",
        "name": "get current face vector",
        "style": {
            "label": true
        },
        "nodes": [
            "eb2c8ec65d140976",
            "bf02cef20c7c5573",
            "f8aa938b61591ffb",
            "2ca56057b286ed99",
            "061cd6fe11f24d84",
            "1bd947ef0136bf4a",
            "fb700ec9c87b1f8b",
            "a641359c4d064d04",
            "015f9db91af3e390",
            "bb060c49a5f4dc36",
            "5b84894c77c1fc50"
        ],
        "x": 134,
        "y": 39,
        "w": 1232,
        "h": 202
    },
    {
        "id": "f4f3769682678829",
        "type": "group",
        "z": "c4c69de5166fafdd",
        "name": "dashboard ui",
        "style": {
            "label": true
        },
        "nodes": [
            "e7755049244b350f",
            "bb27f4c3b8c37aea",
            "ade60163a11e3c8c"
        ],
        "x": 54,
        "y": 39,
        "w": 532,
        "h": 82
    },
    {
        "id": "99e5220aef247514",
        "type": "group",
        "z": "c4c69de5166fafdd",
        "name": "set map settings on connect",
        "style": {
            "label": true
        },
        "nodes": [
            "337633503c2515db",
            "26312f12f3217573",
            "96ea24175fedf6f4"
        ],
        "x": 54,
        "y": 139,
        "w": 912,
        "h": 82
    },
    {
        "id": "2bb23bcf3066d948",
        "type": "group",
        "z": "c4c69de5166fafdd",
        "name": "update geofence",
        "style": {
            "label": true
        },
        "nodes": [
            "bf8030f03f7aaecf",
            "4c15cc8d575e89cc",
            "55b5b5ed834e5c05",
            "f80e7c523421d7bc",
            "ab32e98ba6154f6b"
        ],
        "x": 54,
        "y": 251.5,
        "w": 632,
        "h": 149.5
    },
    {
        "id": "e5814d054eae8048",
        "type": "group",
        "z": "db0357a026e3fe9d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0f4d7859be6d8074",
            "09f9f99a2de46ed5",
            "678f2517e5e8f360",
            "b543a5489b7db3b9",
            "6842503887995176"
        ],
        "x": 1894,
        "y": 699,
        "w": 592,
        "h": 162
    },
    {
        "id": "a39f94d95dd8c901",
        "type": "group",
        "z": "0d921b2cdb2f47a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b7006d8725379028",
            "f928057a172b6bc7",
            "6e1637526d57a66b",
            "d40434e5e9fa984d",
            "d4685d2e3ef9a309",
            "54b9a4ed0e9da2db"
        ],
        "x": 94,
        "y": 19,
        "w": 1022,
        "h": 202
    },
    {
        "id": "a4b73bc8cf9a4730",
        "type": "group",
        "z": "0d921b2cdb2f47a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "15333d07b325118d",
            "3693cc2db6709049",
            "3d954623e05cac57",
            "33ef77d3eac513f0",
            "01b6c388adacec9b",
            "03c368738cc7f8f2"
        ],
        "x": 94,
        "y": 239,
        "w": 1032,
        "h": 142
    },
    {
        "id": "4cea5da7a6e042b9",
        "type": "group",
        "z": "0d921b2cdb2f47a8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf49b87ca54fadb6",
            "2001f5fb16131c7a",
            "ef3714d03835eed0",
            "ea0c0d562f20ce77",
            "42ee150fd31ac501"
        ],
        "x": 94,
        "y": 399,
        "w": 1032,
        "h": 142
    },
    {
        "id": "519ba749ee53d39b",
        "type": "group",
        "z": "0c809b82525ab765",
        "g": "53583def5a2df0c8",
        "name": "Receive tracker's postion reported, and add a poin to the map",
        "style": {
            "label": true
        },
        "nodes": [
            "33ba69f8c29db322",
            "8717ef571bd0c94b"
        ],
        "x": 64,
        "y": 359,
        "w": 582,
        "h": 82
    },
    {
        "id": "98c40f424a9c44e2",
        "type": "group",
        "z": "0c809b82525ab765",
        "g": "53583def5a2df0c8",
        "name": "A ui button to clear geofence record",
        "style": {
            "label": true
        },
        "nodes": [
            "62700aef3ed0781b",
            "b18ad46558af0da4",
            "4ac8240eb50406b5"
        ],
        "x": 54,
        "y": 559,
        "w": 612,
        "h": 82
    },
    {
        "id": "c28dc59ceae9c32d",
        "type": "group",
        "z": "0c809b82525ab765",
        "g": "53583def5a2df0c8",
        "name": "When a new tracker's position reported, check geofence",
        "style": {
            "label": true
        },
        "nodes": [
            "c843e5d7ef9ff5ae",
            "1146255d1badf7fc",
            "5988c82904bef598"
        ],
        "x": 64,
        "y": 459,
        "w": 702,
        "h": 82
    },
    {
        "id": "715d4e1eff0435c7",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "g": "25dbbcda2ecff0d3",
        "name": "send chat message",
        "style": {
            "label": true,
            "fill": "none"
        },
        "nodes": [
            "afb2442e6fbc5d8a",
            "65b38002d80a7926",
            "fec2fa8ad7704214",
            "1ec0c0238c825493",
            "53870e44e5ace8b2",
            "43be761c3e9e9f74"
        ],
        "x": 54,
        "y": 539,
        "w": 872,
        "h": 122
    },
    {
        "id": "346a2b3c97997210",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "g": "25dbbcda2ecff0d3",
        "name": "chat box ui",
        "style": {
            "label": true
        },
        "nodes": [
            "f080684a49dc646f",
            "53d0b77130e78707",
            "bebcbd1ab1269bbf",
            "b70b4cead50cf7b4",
            "1fd59b16301a17e8"
        ],
        "x": 54,
        "y": 299,
        "w": 712,
        "h": 122
    },
    {
        "id": "3c5b4e04f79ed01c",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "g": "25dbbcda2ecff0d3",
        "name": "receive chat message",
        "style": {
            "label": true
        },
        "nodes": [
            "8d248fc5be748a9e",
            "f4e38e4884fc9cdc"
        ],
        "x": 54,
        "y": 439,
        "w": 472,
        "h": 82
    },
    {
        "id": "89ed2cd971381520",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "ui",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "2d6114a1bb679b95",
            "b87a78564d7dd3ff",
            "74fde634240e1723"
        ],
        "x": 54,
        "y": 819,
        "w": 442,
        "h": 122
    },
    {
        "id": "1551266451c3fb26",
        "type": "group",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "ui",
        "style": {
            "label": true,
            "fill": "#dbcbe7",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2b620f2ecf5b4b7",
            "db96dce448c12ae5",
            "c9a448b4454fc848"
        ],
        "x": 74,
        "y": 1339,
        "w": 552,
        "h": 122
    },
    {
        "id": "f6a28ecd60a867cd",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "f2240ffea702c711",
        "name": "Show result dashboard ui",
        "style": {
            "label": true
        },
        "nodes": [
            "c75cad718dc98486",
            "8c4663d800e5ad84",
            "5ecad99473bd81a6",
            "72f1f93177f2cd96",
            "9c82cde7e0992b0a",
            "47ea013a9e20884f"
        ],
        "x": 578,
        "y": 1459,
        "w": 548,
        "h": 247.9666666666667
    },
    {
        "id": "f9fc394e3a78208c",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "f2240ffea702c711",
        "name": "Core analysis",
        "style": {
            "label": true
        },
        "nodes": [
            "67a60ceff998a8fb",
            "b9d656e3df83017c",
            "a3a3cc7e29d9c2bd",
            "6c2556eef543c802"
        ],
        "x": 48,
        "y": 1477.4666666666667,
        "w": 492,
        "h": 149.5
    },
    {
        "id": "7397d120b410ef9e",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "f2240ffea702c711",
        "name": "Settings dashboard ui",
        "style": {
            "label": true
        },
        "nodes": [
            "013e5b1c6161fd88",
            "b63a2834715d53a9",
            "e6c3b81f70e742c4",
            "9b9219df4bbd2df8",
            "30fcf796caae5dd7",
            "27bc94c5bcfd44f3",
            "173296a9d83552c4",
            "e7be9b53522714bb",
            "8101e902511a3c8a",
            "c03fd77323e94d57",
            "692768f0c0fa6045",
            "7951f813e95e3bcb",
            "a5b465a101397ed6",
            "dc1fa02156ca6d9d",
            "da8357cccfce88e4",
            "02771dfb0f53c7ee",
            "384bd5f2261876c5",
            "a22201104c1ca67e",
            "6bb79b6736e46f24"
        ],
        "x": 54,
        "y": 1759,
        "w": 1072,
        "h": 322
    },
    {
        "id": "b3452e3f6fbe33c8",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "control light controller",
        "style": {
            "label": true
        },
        "nodes": [
            "2969553b63e67159",
            "6cf44f9583bca5cb",
            "5e4657564cf853ef",
            "54a97e963a2bc46a",
            "8342f50e0cb34161"
        ],
        "x": 514,
        "y": 1099,
        "w": 752,
        "h": 142
    },
    {
        "id": "f3a9740925b12270",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "show light status dashboard ui - text",
        "style": {
            "label": true
        },
        "nodes": [
            "37bc0da73b669b7b",
            "f6f689b31b1062b9",
            "b52b6d6f3e328256"
        ],
        "x": 514,
        "y": 819,
        "w": 432,
        "h": 122
    },
    {
        "id": "d5465cecd9e6586c",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "show light status dashboard ui - led",
        "style": {
            "label": true
        },
        "nodes": [
            "865bdfb604ca22b5",
            "80f532d63df0f5d2",
            "519436199c84ecfa"
        ],
        "x": 514,
        "y": 959,
        "w": 432,
        "h": 122
    },
    {
        "id": "837666762be59777",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "output object id and counting",
        "style": {
            "label": true
        },
        "nodes": [
            "23e369944d6111cc",
            "0bb34702eace0c7e",
            "d84937099f72d257"
        ],
        "x": 74,
        "y": 1259,
        "w": 872,
        "h": 82
    },
    {
        "id": "c0e18a9b71cf75ce",
        "type": "group",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "If detect a object",
        "style": {
            "label": true
        },
        "nodes": [
            "683ac63b91ba9e9c",
            "1bc42053c286df1f"
        ],
        "x": 74,
        "y": 979,
        "w": 412,
        "h": 82
    },
    {
        "id": "9b1ab04215747138",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "61cf8d1cf496d042",
            "45626d31481fa1a5",
            "866c6621fb385bed",
            "b05e8825c9e1de3b",
            "2dbc641a4e839a72",
            "7a91ee276c0ee3a7",
            "ae736e6f24909157",
            "3c85d3b04d5b1ba6",
            "18d7770e94ae03c7"
        ],
        "x": 674,
        "y": 1119,
        "w": 432,
        "h": 322
    },
    {
        "id": "c67ba04301dac130",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "53799784356cbeae",
            "28d07e6ea9b5e64c",
            "9c59a67e0736c59e",
            "cf2468590b419d1d",
            "a8572c7d4c62a237",
            "256af3895f3096e4",
            "7f1b18337f24478b",
            "99dcb5982cfa549e",
            "3e5a100ccf36861b"
        ],
        "x": 1114,
        "y": 1119,
        "w": 452,
        "h": 322
    },
    {
        "id": "12dde4415dcc183a",
        "type": "group",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dd54a1369b1d82bd",
            "25be2db94e247a2b",
            "24354cb7b8e2707e"
        ],
        "x": 674,
        "y": 1459,
        "w": 432,
        "h": 122
    },
    {
        "id": "a8dfe50e821dfd0b",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "g": "d821d39182a45218",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "37a4169a796bc409",
            "1a1aac49baec583b",
            "27dc0363dfd2c60d",
            "e5470b0dea4188f0",
            "6b25c7462632d304",
            "b9be4eadde0d5464",
            "4813977826279959"
        ],
        "x": 1034,
        "y": 219,
        "w": 912,
        "h": 202
    },
    {
        "id": "8e5fb88de994075b",
        "type": "group",
        "z": "1766c4cb75850c2c",
        "g": "d821d39182a45218",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3ea0d24d5a357d8c",
            "b97841458d677cf9",
            "4712b34643952b3c",
            "1ed7a698814e5190",
            "45f2f20fc1a0b77f"
        ],
        "x": 294,
        "y": 259,
        "w": 732,
        "h": 162
    },
    {
        "id": "2a6c6f3f0d1de049",
        "type": "ui-base",
        "name": "Hazard Response Mission Pack",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "fixed",
        "titleBarStyle": "default"
    },
    {
        "id": "bf7959673d8303c0",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "0px",
            "groupGap": "0px",
            "groupBorderRadius": "0px",
            "widgetGap": "0px"
        }
    },
    {
        "id": "de9da949a661e7d5",
        "type": "ui-page",
        "name": "0-Digital Twins",
        "ui": "2a6c6f3f0d1de049",
        "path": "/digital-twins",
        "icon": "home",
        "layout": "grid",
        "theme": "bf7959673d8303c0",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a3e3f0f53df52d39",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "ff55020100020001",
        "type": "modbus-client",
        "name": "Default RS485 Channel 1",
        "clienttype": "serial",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyAMA30",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "1000",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "3000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ff55020100020002",
        "type": "modbus-client",
        "name": "Default RS485 Channel 2",
        "clienttype": "serial",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyAMA31",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "1000",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "3000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "ff55020100020003",
        "type": "modbus-client",
        "name": "Default RS485 Channel 3",
        "clienttype": "serial",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyAMA32",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "1000",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "3000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c7c9430e7e787d8a",
        "type": "ui-page",
        "name": "1-Early Warning System",
        "ui": "2a6c6f3f0d1de049",
        "path": "/early",
        "icon": "home",
        "layout": "notebook",
        "theme": "a3e3f0f53df52d39",
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "ae209b4f406aab66",
        "type": "ui-group",
        "name": "Factor Show",
        "page": "c7c9430e7e787d8a",
        "width": "18",
        "height": "9",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "76d599e67044eeb3",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "host.docker.internal",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "chirpstack",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "chirpstack",
        "userFieldType": "str",
        "password": "chirpstack",
        "passwordFieldType": "str"
    },
    {
        "id": "97a36525813f3f9f",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "0px",
            "groupGap": "0px",
            "groupBorderRadius": "0px",
            "widgetGap": "0px"
        }
    },
    {
        "id": "cd0ac6079998d71c",
        "type": "ui-group",
        "name": "  Water",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4c42d5986c4bbb30",
        "type": "ui-group",
        "name": "Energy monitoring",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ee7e123b644fb0fb",
        "type": "ui-group",
        "name": "Ultrasonic datalogger",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "11c7bc76871ef97a",
        "type": "ui-group",
        "name": "  Battery Status",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "53377d4c79f72de5",
        "type": "ui-page",
        "name": "4-Resilient Infrastructure",
        "ui": "2a6c6f3f0d1de049",
        "path": "/resilient",
        "icon": "home",
        "layout": "grid",
        "theme": "d86c2124665af35b",
        "order": 5,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "d86c2124665af35b",
        "type": "ui-theme",
        "name": "Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "aaef1ae98f9e5ac7",
        "type": "ui-group",
        "name": "ControlPart",
        "page": "c7c9430e7e787d8a",
        "width": "19",
        "height": "3",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "fa596d99836a105b",
        "type": "ui-group",
        "name": "Introduction",
        "page": "c7c9430e7e787d8a",
        "width": "19",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ff55020100010001",
        "type": "mqtt-broker",
        "name": "Default MQTT Broker",
        "broker": "host.docker.internal",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "",
        "info": "This is the default MQTT Server configuration in the Mission Pack, please do not remove or change it"
    },
    {
        "id": "7f7efa6aab86223a",
        "type": "ui-group",
        "name": "Tracking configuration",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "1",
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d2572cd2c6eedad3",
        "type": "ui-group",
        "name": "Tracking viewer",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "14ac8e16c178d0c3",
        "type": "ui-group",
        "name": "Preview and performance",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5dc732aa02a99c2f",
        "type": "ui-page",
        "name": "3-Remote monitoring and Surveillance",
        "ui": "2a6c6f3f0d1de049",
        "path": "/remote",
        "icon": "home",
        "layout": "flex",
        "theme": "97a36525813f3f9f",
        "order": 4,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "0929debe96edc4f1",
        "type": "ui-page",
        "name": "2-Communication and information sharing",
        "ui": "2a6c6f3f0d1de049",
        "path": "/page10",
        "icon": "home",
        "layout": "grid",
        "theme": "d86c2124665af35b",
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "e8de57e79e3ba00b",
        "type": "ui-group",
        "name": "Chat Group",
        "page": "0929debe96edc4f1",
        "width": "6",
        "height": "6",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7f5d55cdfc413ad1",
        "type": "FlowHubCfg",
        "apiToken": "",
        "apiTokenType": "",
        "fullname": "",
        "email": "",
        "flowid": "aaab9308f8fbb2c5",
        "flowrevision": "111",
        "notab": false,
        "pushcomment": "",
        "pushnewflows": false,
        "forcepush": false,
        "tokens": [],
        "flowrevisions": {
            "aaab9308f8fbb2c5": "111"
        }
    },
    {
        "id": "5c4a9eb8bcc506ec",
        "type": "ui-group",
        "name": "Geofence",
        "page": "de9da949a661e7d5",
        "width": "6",
        "height": "13",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1b9a8117899e03b1",
        "type": "ui-group",
        "name": "Object Detection Alert",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "2",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6efcdf57f80c8926",
        "type": "ui-group",
        "name": "Command Group",
        "page": "0929debe96edc4f1",
        "width": "3",
        "height": "6",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b3386a5606a07fc6",
        "type": "ui-group",
        "name": "Connect Camera",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "2",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "32e94b3eb843c9f2",
        "type": "ui-group",
        "name": "Light Controller",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "69fbe1228561845f",
        "type": "ui-group",
        "name": "Sound Controller",
        "page": "53377d4c79f72de5",
        "width": "6",
        "height": "1",
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ee7258bda6d1e1eb",
        "type": "ui-group",
        "name": "Geofence Operation",
        "page": "de9da949a661e7d5",
        "width": "6",
        "height": "2",
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8a67b5077a1657c0",
        "type": "ui-group",
        "name": "Digital Twins",
        "page": "de9da949a661e7d5",
        "width": "6",
        "height": "13",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cde4df4e1b515e62",
        "type": "ui-group",
        "name": "IP camera vision",
        "page": "5dc732aa02a99c2f",
        "width": "6",
        "height": "2",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "25b3debea13cb5c5",
        "type": "websocket-listener",
        "path": "/ws/gv2",
        "wholemsg": "false"
    },
    {
        "id": "9c029b64aec038c6",
        "type": "websocket-listener",
        "path": "/ws/gv2/tracking",
        "wholemsg": "false"
    },
    {
        "id": "server1",
        "type": "websocket-listener",
        "path": "/default/path",
        "wholemsg": "false"
    },
    {
        "id": "f674f8a2905a65bf",
        "type": "ui-page",
        "name": "Sample Face Recognization",
        "ui": "2a6c6f3f0d1de049",
        "path": "/sample_face_recognization",
        "icon": "home",
        "layout": "flex",
        "theme": "d86c2124665af35b",
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "77ed695e80c70135",
        "type": "ui-group",
        "name": "Onboard a new face",
        "page": "f674f8a2905a65bf",
        "width": "12",
        "height": "8",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "995fd82ffba178d6",
        "type": "ui-group",
        "name": "Recognize Identity",
        "page": "f674f8a2905a65bf",
        "width": "12",
        "height": "8",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "245bf6e70a132eaa",
        "type": "ui-group",
        "name": "My Group",
        "page": "de9da949a661e7d5",
        "width": "6",
        "height": "2",
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e23de7dd4ba7d6aa",
        "type": "ui-group",
        "name": "Onboarded Identity List",
        "page": "f674f8a2905a65bf",
        "width": "12",
        "height": "6",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "cfe2a3efe5d958ce",
        "type": "ui-group",
        "name": "My Group",
        "page": "f674f8a2905a65bf",
        "width": "12",
        "height": "6",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "503075ef63e60cf5",
        "type": "ui-group",
        "name": "Message",
        "page": "",
        "width": "4",
        "height": "11",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "53707ce4f54749e1",
        "type": "ui-group",
        "name": "MAP",
        "page": "",
        "width": "8",
        "height": "11",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "8e4db328f42c4974",
        "type": "function",
        "z": "f11a6acbc82d2c5c",
        "name": "7-in-1 weather station",
        "func": "var temperature = {\n    payload: Math.random() * 40,\n    topic: \"temperature\"\n};\n\nvar humidity = {\n    payload: Math.random() * 100,\n    topic: \"humidity\"\n};\n\nvar windSpeed = {\n    payload: Math.random() * 20,\n    topic: \"windSpeed\"\n};\n\nvar precipitation = {\n    payload: Math.random() * 50,\n    topic: \"precipitation\"\n};\n\nvar vegetationDensity = {\n    payload: Math.random() * 100,\n    topic: \"vegetationDensity\"\n};\n\nvar fuelMoisture = {\n    payload: Math.random() * 100,\n    topic: \"fuelMoisture\"\n};\n\nvar soilMoisture = {\n    payload: Math.random() * 100,\n    topic: \"soilMoisture\"\n};\n\nvar total = {\n    payload: {\n        temperature: temperature.payload,\n        humidity: humidity.payload,\n        windSpeed: windSpeed.payload,\n        precipitation: precipitation.payload,\n        vegetationDensity: vegetationDensity.payload,\n        fuelMoisture: fuelMoisture.payload,\n        soilMoisture: soilMoisture.payload\n    },\n    topic: \"total\"\n};\n\nreturn [temperature, humidity, windSpeed, precipitation, vegetationDensity, fuelMoisture, soilMoisture, total];\n",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "d13ad91ac508db4c"
            ],
            [
                "772715fb0b63dd2a"
            ],
            [
                "7e23227f9b76321f"
            ],
            [
                "55b9f3c6aa5baa15"
            ],
            [
                "6fcd9713b7a0c408"
            ],
            [
                "16cac78624bc6e83"
            ],
            [
                "20cd1089729f666f"
            ],
            [
                "c2437ef708dab502"
            ]
        ]
    },
    {
        "id": "c7d6a465aad48164",
        "type": "inject",
        "z": "f11a6acbc82d2c5c",
        "name": "onstartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "8e4db328f42c4974"
            ]
        ]
    },
    {
        "id": "d13ad91ac508db4c",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "temperature",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "3a6ab4a46c5c856e"
            ]
        ]
    },
    {
        "id": "772715fb0b63dd2a",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "humidity",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "6b6a9690a8786b72"
            ]
        ]
    },
    {
        "id": "7e23227f9b76321f",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "windSpeed",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "c72f1d53fa0877e1"
            ]
        ]
    },
    {
        "id": "55b9f3c6aa5baa15",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "precipitation",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 200,
        "wires": [
            [
                "833587c680aa5057"
            ]
        ]
    },
    {
        "id": "6fcd9713b7a0c408",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "vegetationDensity",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "bc4740acb653759e"
            ]
        ]
    },
    {
        "id": "16cac78624bc6e83",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "fuelMoisture",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 280,
        "wires": [
            [
                "342c90344efb042a"
            ]
        ]
    },
    {
        "id": "20cd1089729f666f",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "soilMoisture",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 320,
        "wires": [
            [
                "f43224200031aa54"
            ]
        ]
    },
    {
        "id": "3a6ab4a46c5c856e",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "6b6a9690a8786b72",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "humidity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 120,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "c72f1d53fa0877e1",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "windSpeed",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 160,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "833587c680aa5057",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "precipitation",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 200,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "bc4740acb653759e",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "vegetationDensity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 240,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "342c90344efb042a",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fuelMoisture",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 280,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "f43224200031aa54",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "soilMoisture",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 320,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "9c84a20fd70247b6",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "to 2 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload * 100) / 100",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c2437ef708dab502",
        "type": "function",
        "z": "f11a6acbc82d2c5c",
        "name": "compute fire factor",
        "func": "var data = msg.payload;\nvar fireRisk = (data.temperature * 0.4 + data.humidity * 0.2 + data.windSpeed * 0.3 + data.precipitation * 0.1);\n msg.payload = fireRisk;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "28d356b875a141bc"
            ]
        ]
    },
    {
        "id": "28d356b875a141bc",
        "type": "switch",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "property": "fireRisk",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "7a2d00bd3764599c"
            ]
        ]
    },
    {
        "id": "7a2d00bd3764599c",
        "type": "change",
        "z": "f11a6acbc82d2c5c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "fireRisk",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 360,
        "wires": [
            [
                "9c84a20fd70247b6"
            ]
        ]
    },
    {
        "id": "f2e7e8a6abfabf27",
        "type": "ui-template",
        "z": "c64ffede4f1f69bd",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "Digital Twin UI - Background",
        "order": 3,
        "width": "${Width}",
        "height": "${Height}",
        "head": "",
        "format": "<template>\n  <div class=\"bg-585562\">\n    <img class=\"bg-585562\" :src=\"processedUrl\" />\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        processedUrl: ''\n      }\n    },\n    created() {\n      this.processImageUrl();\n    },\n    watch: {\n      msg: function() {\n        // Watch for changes in msg and reprocess the image URL when it changes\n        this.processImageUrl();\n      }\n    },\n    methods: {\n      processImageUrl() {\n        // Get the current dashboard domain and port\n        const currentDomain = window.location.hostname;\n\n        // Get the original image URL from msg.payload\n        const originalUrl = this.msg?.payload;\n\n        if (originalUrl) {\n          try {\n            const url = new URL(originalUrl);\n\n            // Check and replace the IP part of the URL while retaining the port\n            if (url.hostname === '192.168.100.10' && url.port === '8092') {\n              url.hostname = currentDomain;\n              this.processedUrl = url.toString();\n            } else {\n              this.processedUrl = originalUrl;\n            }\n          } catch (e) {\n            // Log any errors encountered during URL processing\n            console.error('Error processing URL:', e);\n            this.processedUrl = originalUrl;\n          }\n        } else {\n          // Log a message if msg.payload is null or undefined\n          console.error('msg.payload is null or undefined');\n        }\n      }\n    }\n  }\n</script>\n\n<style>\n/* Define any styles here - supports raw CSS */\n.bg-585562 {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.bg-585562 img.bg-585562 {\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9d2dbc8c74d1df4b",
        "type": "ui-template",
        "z": "c64ffede4f1f69bd",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "Digital Twin UI - Container",
        "order": 0,
        "width": "${Width}",
        "height": "${Height}",
        "head": "",
        "format": "<template>\n    <div class=\"box\">\n        \n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n            }\n        },\n    }\n</script>\n<style>\n    .box{\n        position: relative;\n        margin: 10px;\n        width: 100%;\n        height: 100%;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "f2e7e8a6abfabf27"
            ]
        ]
    },
    {
        "id": "6bfa48f56105ef16",
        "type": "inject",
        "z": "c64ffede4f1f69bd",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "9b6e3ab7a7f2929f",
                "13880e52c8665520"
            ]
        ]
    },
    {
        "id": "efd7c095acb08799",
        "type": "file in",
        "z": "c64ffede4f1f69bd",
        "name": "read image",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "base64",
        "allProps": false,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "01020db6ba1607be"
            ]
        ]
    },
    {
        "id": "01020db6ba1607be",
        "type": "function",
        "z": "c64ffede4f1f69bd",
        "name": "encode image",
        "func": "msg.payload = \"data:image/jpeg;base64,\" + msg.payload.toString('base64');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 300,
        "wires": [
            [
                "f2e7e8a6abfabf27"
            ]
        ]
    },
    {
        "id": "95e2ca8e72c0c25a",
        "type": "change",
        "z": "c64ffede4f1f69bd",
        "name": "get imagepath from envs",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "imagePath",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "f2e7e8a6abfabf27"
            ]
        ]
    },
    {
        "id": "9b6e3ab7a7f2929f",
        "type": "switch",
        "z": "c64ffede4f1f69bd",
        "name": "",
        "property": "imageSelector",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "url",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "file",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 220,
        "wires": [
            [
                "95e2ca8e72c0c25a"
            ],
            [
                "d25e6135eedfa7a2"
            ]
        ]
    },
    {
        "id": "d25e6135eedfa7a2",
        "type": "change",
        "z": "c64ffede4f1f69bd",
        "name": "get imagepath from envs",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "imagePath",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "efd7c095acb08799"
            ]
        ]
    },
    {
        "id": "13880e52c8665520",
        "type": "change",
        "z": "c64ffede4f1f69bd",
        "name": "set empty on startup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 40,
        "wires": [
            [
                "f2e7e8a6abfabf27"
            ]
        ]
    },
    {
        "id": "dcdfb77142edf9f9",
        "type": "ui-template",
        "z": "c25ee8e3cadf74f6",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "UI Template",
        "order": 4,
        "width": "1",
        "height": "1",
        "head": "",
        "format": "<template>\n  <div\n    class=\"item-881695\"\n    :style=\"\n      'left:' +\n      msg.payload.position[0] +\n      ';top:' +\n      msg.payload.position[1] +\n      ';'\n    \"\n  >\n    <div>{{ msg.payload.name }}</div>\n    <div :style=\"'font-size:' + msg.payload.fontSize * 2 + 'px !important;'\">\n      {{ msg.payload.value }} {{msg.payload.unit}}\n    </div>\n    <div :style=\"'font-size:' + msg.payload.fontSize * 0.8 + 'px !important;'\">\n      {{ timeFn(msg.payload.time) }}\n    </div>\n    <div :style=\"'font-size:' + msg.payload.fontSize * 0.8 + 'px !important;'\">\n      {{ msg.payload.time === 0 ? '..' : '' }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {};\n  },\n  created() {},\n\n  methods: {\n    /**\n     * @description 10位时间戳转换\n     * @param time\n     * @returns {string}\n     */\n    tenBitTimestamp(time, type) {\n      const date = new Date(time * 1000);\n      const y = date.getFullYear();\n      let m = date.getMonth() + 1;\n      m = m < 10 ? \"0\" + m : m;\n      let d = date.getDate();\n      d = d < 10 ? \"0\" + d : d;\n      let h = date.getHours();\n      h = h < 10 ? \"0\" + h : h;\n      let minute = date.getMinutes();\n      let second = date.getSeconds();\n      minute = minute < 10 ? \"0\" + minute : minute;\n      second = second < 10 ? \"0\" + second : second;\n      return type\n        ? y + \"/\" + m + \"/\" + d\n        : y + \"/\" + m + \"/\" + d + \" \" + h + \":\" + minute + \":\" + second; //组合\n    },\n\n    /**\n     * @description 13位时间戳转换\n     * @param time\n     * @returns {string}\n     */\n    thirteenBitTimestamp(time, type) {\n      const date = new Date(time / 1);\n      const y = date.getFullYear();\n      let m = date.getMonth() + 1;\n      m = m < 10 ? \"0\" + m : m;\n      let d = date.getDate();\n      d = d < 10 ? \"0\" + d : d;\n      let h = date.getHours();\n      h = h < 10 ? \"0\" + h : h;\n      let minute = date.getMinutes();\n      let second = date.getSeconds();\n      minute = minute < 10 ? \"0\" + minute : minute;\n      second = second < 10 ? \"0\" + second : second;\n      return type\n        ? y + \"/\" + m + \"/\" + d\n        : y + \"/\" + m + \"/\" + d + \" \" + h + \":\" + minute + \":\" + second; //组合\n    },\n\n    timeFn(time, type) {\n      if (time === 0) {\n        return \"--\";\n      }\n      time = time + \"\";\n      let timestamp;\n      if (time.length == 10) timestamp = this.tenBitTimestamp(time, type);\n      else if (time.length == 13)\n        timestamp = this.thirteenBitTimestamp(time, type);\n      else return (timestamp = \"\");\n      let timezone = timestamp\n        ? parseInt((0 - new Date(timestamp).getTimezoneOffset()) / 60)\n        : \"\";\n      timezone = timezone\n        ? (timezone > 0 ? \"(UTC+\" : \"(UTC\") + timezone + \")\"\n        : \"\";\n      return type ? timestamp : timestamp + timezone;\n    },\n  },\n};\n</script>\n\n<style>\n.item-881695 {\n  width: 170px;\n  height: auto;\n  position: absolute;\n  z-index: 1;\n  background: rgba(255, 255, 255, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  font-weight: bold;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1410,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3b56b93f6cf23646",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set font size",
        "func": "msg.payload = {\n    ...msg.payload,\n    fontSize: env.get(\"card_font_size\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "3f1983a07bacaa61"
            ]
        ]
    },
    {
        "id": "eb2b84e989af7418",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set name",
        "func": "msg.payload = {\n    ...msg.payload,\n    name: env.get(\"card_name\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "afa26713358dce1e"
            ]
        ]
    },
    {
        "id": "afa26713358dce1e",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set position",
        "func": "msg.payload = {\n    ...msg.payload,\n    position: [\n        env.get(\"card_position_x\"), \n        env.get(\"card_position_y\")\n    ]\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "3b56b93f6cf23646"
            ]
        ]
    },
    {
        "id": "3f1983a07bacaa61",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set unit",
        "func": "msg.payload = {\n    ...msg.payload,\n    unit: env.get(\"card_unit\")\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 520,
        "wires": [
            [
                "dcdfb77142edf9f9"
            ]
        ]
    },
    {
        "id": "81111372d49074cf",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set value and time",
        "func": "msg.payload = {\n    value: msg.payload,\n    time: '' + Date.now()\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "eb2b84e989af7418"
            ]
        ]
    },
    {
        "id": "74162ccbd520f320",
        "type": "inject",
        "z": "c25ee8e3cadf74f6",
        "name": "On Startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 250,
        "y": 420,
        "wires": [
            [
                "e75d38e7f7e2418c",
                "ed8749cbb76eaff3"
            ]
        ]
    },
    {
        "id": "e75d38e7f7e2418c",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "set value and time",
        "func": "msg.payload = {\n    value: '--',\n    time: 0\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "eb2b84e989af7418"
            ]
        ]
    },
    {
        "id": "270964d67cd7e5ca",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "Show 'Lastest value'",
        "func": "return {\n    payload: 'Last value: ' + msg.payload\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "ed8749cbb76eaff3",
        "type": "function",
        "z": "c25ee8e3cadf74f6",
        "name": "Show 'Waiting to update value'",
        "func": "return {\n    payload: {\n        fill: \"yellow\",\n        shape: \"dot\",\n        text: 'Waiting to update value'\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ca580e1444a51d82",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "e17956ebf8df1058",
        "name": "Basic mqtt publish",
        "info": "",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "4813977826279959",
        "type": "link out",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "pub",
        "mode": "link",
        "links": [
            "b64fe8d75146fa69"
        ],
        "x": 1870,
        "y": 380,
        "wires": [],
        "l": true
    },
    {
        "id": "9abc04b2e7d3257a",
        "type": "link out",
        "z": "1766c4cb75850c2c",
        "g": "977b1c156a278f35",
        "name": "pub",
        "mode": "link",
        "links": [
            "b64fe8d75146fa69"
        ],
        "x": 1510,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "b64fe8d75146fa69",
        "type": "link in",
        "z": "1766c4cb75850c2c",
        "g": "e17956ebf8df1058",
        "name": "pub",
        "links": [
            "1567eeb1bb47fec5",
            "4813977826279959",
            "9abc04b2e7d3257a"
        ],
        "x": 910,
        "y": 580,
        "wires": [
            [
                "c0843f7df37d8e49"
            ]
        ],
        "l": true
    },
    {
        "id": "1567eeb1bb47fec5",
        "type": "link out",
        "z": "1766c4cb75850c2c",
        "g": "b36553531342820f",
        "name": "pub",
        "mode": "link",
        "links": [
            "b64fe8d75146fa69"
        ],
        "x": 690,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "c0843f7df37d8e49",
        "type": "mqtt out",
        "z": "1766c4cb75850c2c",
        "g": "e17956ebf8df1058",
        "name": "mqtt out",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "${mqtt-broker}",
        "x": 1040,
        "y": 580,
        "wires": []
    },
    {
        "id": "d1f974398f147b02",
        "type": "link out",
        "z": "1766c4cb75850c2c",
        "g": "b36553531342820f",
        "name": "sub/unsub",
        "mode": "link",
        "links": [
            "86d3046f1847f777"
        ],
        "x": 710,
        "y": 640,
        "wires": [],
        "l": true
    },
    {
        "id": "86d3046f1847f777",
        "type": "link in",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "sub/unsub",
        "links": [
            "b9be4eadde0d5464",
            "d1f974398f147b02"
        ],
        "x": 400,
        "y": 800,
        "wires": [
            [
                "6f49bb85fb1ca9dd"
            ]
        ],
        "l": true
    },
    {
        "id": "b9be4eadde0d5464",
        "type": "link out",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "sub/unsub",
        "mode": "link",
        "links": [
            "86d3046f1847f777"
        ],
        "x": 1850,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "1a9a58a193b6a274",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "Received data",
        "info": "",
        "x": 370,
        "y": 740,
        "wires": []
    },
    {
        "id": "45f2f20fc1a0b77f",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "8e5fb88de994075b",
        "name": "check camera id, to flow.camera_id",
        "info": "",
        "x": 460,
        "y": 300,
        "wires": []
    },
    {
        "id": "195c561cb96ad7cb",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "d821d39182a45218",
        "name": "Handle start",
        "info": "",
        "x": 370,
        "y": 220,
        "wires": []
    },
    {
        "id": "1fec46e9cd347a2a",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "b36553531342820f",
        "name": "Handle stop",
        "info": "",
        "x": 370,
        "y": 520,
        "wires": []
    },
    {
        "id": "46ee7c72c6d678a2",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "b36553531342820f",
        "name": "Unsubscribe Action Builder",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mqtt_tx",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "unsubscribe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 640,
        "wires": [
            [
                "d1f974398f147b02"
            ]
        ]
    },
    {
        "id": "6b25c7462632d304",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "send a start command to camera",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mqtt_rx",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[65,84,43,73,78,86,79,75,69,61,45,49,44,48,44,48,13,10]",
                "tot": "bin"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 380,
        "wires": [
            [
                "4813977826279959"
            ]
        ]
    },
    {
        "id": "e5470b0dea4188f0",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "override mqtt_tx and mqtt_rx",
        "rules": [
            {
                "t": "set",
                "p": "mqtt_tx",
                "pt": "flow",
                "to": "\"sscma/v0/\" & payload & \"/tx\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "mqtt_rx",
                "pt": "flow",
                "to": "\"sscma/v0/\" & payload & \"/rx\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "27dc0363dfd2c60d",
                "6b25c7462632d304"
            ]
        ]
    },
    {
        "id": "1ed7a698814e5190",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "8e5fb88de994075b",
        "name": "set flow.camera_id",
        "rules": [
            {
                "t": "set",
                "p": "camera_id",
                "pt": "flow",
                "to": "cameraId",
                "tot": "env",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "cameraId",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 340,
        "wires": [
            [
                "3ea0d24d5a357d8c"
            ]
        ]
    },
    {
        "id": "4712b34643952b3c",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "8e5fb88de994075b",
        "name": "set flow.camera_id",
        "rules": [
            {
                "t": "set",
                "p": "camera_id",
                "pt": "flow",
                "to": "topic",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topic",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 380,
        "wires": [
            [
                "3ea0d24d5a357d8c"
            ]
        ]
    },
    {
        "id": "b97841458d677cf9",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "g": "8e5fb88de994075b",
        "name": "whether cameraId is set in env",
        "property": "cameraId",
        "propertyType": "env",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "1ed7a698814e5190"
            ],
            [
                "4712b34643952b3c"
            ]
        ]
    },
    {
        "id": "7712b011fe04d5e2",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "Check image is valid",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "100",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1280,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a3d2cf36d30ad3a8",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "get inference result",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data.boxes",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "raw",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "ce2e532308aa4012"
            ]
        ],
        "info": "[[118,150,237,175,100,0],[114,119,76,84,100,2]]"
    },
    {
        "id": "5c869b5a19000f23",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "get image",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data.image",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "raw",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "7712b011fe04d5e2"
            ]
        ]
    },
    {
        "id": "7fff0e065d651496",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "g": "977b1c156a278f35",
        "name": "reconnect logic",
        "info": "",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "03a1c725d65f15e2",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "g": "977b1c156a278f35",
        "name": "Confirm that the camera is currently expected to be connected",
        "property": "mqtt_rx",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 850,
        "y": 120,
        "wires": [
            [
                "c6651882a2276fc2"
            ]
        ]
    },
    {
        "id": "c6651882a2276fc2",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "977b1c156a278f35",
        "name": "send a start command to camera",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mqtt_rx",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[65,84,43,73,78,86,79,75,69,61,45,49,44,48,44,48,13,10]",
                "tot": "bin"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "9abc04b2e7d3257a"
            ]
        ]
    },
    {
        "id": "82a43b334bf4b932",
        "type": "inject",
        "z": "1766c4cb75850c2c",
        "g": "977b1c156a278f35",
        "name": "auto resend command",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "03a1c725d65f15e2"
            ]
        ]
    },
    {
        "id": "a78007c93b1c1fe1",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "b36553531342820f",
        "name": "send a stop command to camera",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mqtt_rx",
                "tot": "flow",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[65,84,43,66,82,69,65,75,13,10]",
                "tot": "bin"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 580,
        "wires": [
            [
                "1567eeb1bb47fec5"
            ]
        ]
    },
    {
        "id": "2a5b878f4609d83d",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "Check msg is valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 800,
        "wires": [
            [
                "5c869b5a19000f23",
                "a3d2cf36d30ad3a8",
                "76719286957aa942"
            ]
        ]
    },
    {
        "id": "3ea0d24d5a357d8c",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "8e5fb88de994075b",
        "name": "Retrieve Input",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "camera_id",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 360,
        "wires": [
            [
                "1a1aac49baec583b",
                "37a4169a796bc409"
            ]
        ]
    },
    {
        "id": "6f49bb85fb1ca9dd",
        "type": "mqtt in",
        "z": "1766c4cb75850c2c",
        "g": "4812ceb994ecee47",
        "name": "when receive data",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "${mqtt-broker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "2a5b878f4609d83d"
            ]
        ]
    },
    {
        "id": "27dc0363dfd2c60d",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "subscribe Action Builder",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "subscribe",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic.topic",
                "pt": "msg",
                "to": "\"sscma/v0/\" & payload & \"/tx\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic.qos",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1630,
        "y": 340,
        "wires": [
            [
                "b9be4eadde0d5464"
            ]
        ]
    },
    {
        "id": "1a1aac49baec583b",
        "type": "delay",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "delay 0.2s",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 360,
        "wires": [
            [
                "e5470b0dea4188f0"
            ]
        ]
    },
    {
        "id": "37a4169a796bc409",
        "type": "change",
        "z": "1766c4cb75850c2c",
        "g": "a8dfe50e821dfd0b",
        "name": "Unsubscribe Action Builder",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mqtt_tx",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "unsubscribe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 260,
        "wires": [
            [
                "b9be4eadde0d5464"
            ]
        ]
    },
    {
        "id": "cc53c77934293557",
        "type": "status",
        "z": "1766c4cb75850c2c",
        "name": "",
        "scope": null,
        "x": 1450,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "6961ad7433fb3c65",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "name": "image buffer",
        "info": "",
        "x": 1670,
        "y": 700,
        "wires": []
    },
    {
        "id": "aef67c51ff6af9a3",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "name": "inference result",
        "info": "",
        "x": 1680,
        "y": 800,
        "wires": []
    },
    {
        "id": "17bdb18a27c66e11",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "name": "start or stop",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "start",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 360,
        "wires": [
            [
                "b97841458d677cf9"
            ],
            [
                "a78007c93b1c1fe1",
                "46ee7c72c6d678a2"
            ]
        ]
    },
    {
        "id": "a89d1fafc072f198",
        "type": "comment",
        "z": "1766c4cb75850c2c",
        "name": "original data",
        "info": "",
        "x": 1670,
        "y": 960,
        "wires": []
    },
    {
        "id": "ce2e532308aa4012",
        "type": "function",
        "z": "1766c4cb75850c2c",
        "name": "Check if the target is detected",
        "func": "if (Array.isArray(msg.payload)) {\n    var length = msg.payload.length;\n    if (length > 1) {\n        msg.payload = 1;\n    } else if (length === 0) {\n        msg.payload = 0;\n    } else {\n        msg.payload = 1;\n    }\n} else {\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1240,
        "wires": [
            [
                "963a647e7b951cba"
            ]
        ]
    },
    {
        "id": "963a647e7b951cba",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "name": "yes or no",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1620,
        "y": 1240,
        "wires": [
            [
                "e4db2d42d0a9aab5"
            ],
            [
                "3d8473d039795dd6"
            ]
        ]
    },
    {
        "id": "e4db2d42d0a9aab5",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "name": "",
        "property": "triggerMode",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "3d8473d039795dd6",
        "type": "switch",
        "z": "1766c4cb75850c2c",
        "name": "",
        "property": "triggerMode",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "no",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "76719286957aa942",
        "type": "msg-speed",
        "z": "1766c4cb75850c2c",
        "name": "",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 1310,
        "y": 1000,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f8c167e299ad5d74",
        "type": "rtsp2mjpeg",
        "z": "cca203ebc25b2ce6",
        "url": "${url}",
        "username": "${username}",
        "password": "${passowrd}",
        "rate": "1",
        "quality": "1",
        "resolution": "${resolution}",
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "96a1b615dbe08457",
        "type": "status",
        "z": "cca203ebc25b2ce6",
        "name": "",
        "scope": null,
        "x": 190,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ec19f33ceb5af3e5",
        "type": "catch",
        "z": "cca203ebc25b2ce6",
        "name": "",
        "scope": [
            "f8c167e299ad5d74"
        ],
        "uncaught": false,
        "x": 200,
        "y": 240,
        "wires": [
            [
                "9b1eb01ff5f01c5b"
            ]
        ]
    },
    {
        "id": "9b1eb01ff5f01c5b",
        "type": "debug",
        "z": "cca203ebc25b2ce6",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 220,
        "wires": []
    },
    {
        "id": "ddb4e6e006510608",
        "type": "mqtt in",
        "z": "fdfd26c77e5e2a42",
        "name": "subscribe mqtt, and receive message",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "${mqttBroker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "3a8cef5012cb76cd",
                "c3ca0d27c2ea2c12"
            ]
        ]
    },
    {
        "id": "statusNode",
        "type": "status",
        "z": "fdfd26c77e5e2a42",
        "name": "",
        "scope": [
            "ddb4e6e006510608"
        ],
        "x": 1870,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d39494835463c35e",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "name": "build subscribe topic command",
        "func": "var applicationId = env.get(\"applicationId\");\nvar deviceId = env.get(\"deviceId\");\n\nif (!applicationId) {\n    applicationId = env.get(\"SENSECRAFT_MISSION_PACK_CHIRPSTACK_APPID\");\n}\n\nif (!deviceId) {\n    deviceId = env.get(\"SENSECRAFT_MISSION_PACK_DEVICE_TRIPWIRE_DEVEUI\")\n}\n\nmsg.action = 'subscribe'\nmsg.topic = {\n    topic: `application/${applicationId}/device/${deviceId}/event/up`,\n    qos: 0\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "ddb4e6e006510608"
            ]
        ]
    },
    {
        "id": "8b3e99e06e13cf85",
        "type": "inject",
        "z": "fdfd26c77e5e2a42",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "d39494835463c35e"
            ]
        ]
    },
    {
        "id": "b9d1463ac16b48f1",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "d": true,
        "name": "decode tripwire message",
        "func": "var value = parseInt(msg.payload.object.messages[0][0].measurementValue);\n\nmsg.payload = value;\nmsg.sensecraft = {}\nmsg.sensecraft.fromType = \"Device\"\nmsg.sensecraft.valueMeaning = \"ChangeValue\"\nmsg.sensecraft.valuetype = \"Number\"\nmsg.sensecraft.expectInputType = [\"Condition\"]\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 60,
        "wires": [
            [
                "5da5f4ea1905df1e",
                "9a0531c77d01eb12"
            ]
        ]
    },
    {
        "id": "3a8cef5012cb76cd",
        "type": "change",
        "z": "fdfd26c77e5e2a42",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 60,
        "wires": [
            [
                "b9d1463ac16b48f1"
            ]
        ]
    },
    {
        "id": "5da5f4ea1905df1e",
        "type": "switch",
        "z": "fdfd26c77e5e2a42",
        "name": "if value=0, then",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1500,
        "y": 40,
        "wires": [
            [
                "a46a241a689227b4"
            ]
        ]
    },
    {
        "id": "9a0531c77d01eb12",
        "type": "switch",
        "z": "fdfd26c77e5e2a42",
        "name": "if value=1, then",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1500,
        "y": 80,
        "wires": [
            [
                "9d635b7355433cc1"
            ]
        ]
    },
    {
        "id": "a46a241a689227b4",
        "type": "template",
        "z": "fdfd26c77e5e2a42",
        "name": "whenFalseOutput",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{env.whenFalseOutput}}",
        "output": "str",
        "x": 1690,
        "y": 40,
        "wires": [
            [
                "fbb4b0a21824b98f"
            ]
        ]
    },
    {
        "id": "9d635b7355433cc1",
        "type": "template",
        "z": "fdfd26c77e5e2a42",
        "name": "whenTrueOutput",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{env.whenTrueOutput}}",
        "output": "str",
        "x": 1690,
        "y": 80,
        "wires": [
            [
                "fbb4b0a21824b98f"
            ]
        ]
    },
    {
        "id": "fbb4b0a21824b98f",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "name": "all in one",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 60,
        "wires": [
            [
                "d6f6d0ab45a73962"
            ]
        ]
    },
    {
        "id": "d6f6d0ab45a73962",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "name": "update status",
        "func": "return {\n    payload: {\n        fill: \"green\",\n        shape: \"dot\",\n        text: 'Last Value: ' + msg.payload\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c3ca0d27c2ea2c12",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "name": "decode lorawan raw message",
        "func": "// Decode the MQTT payload from ChirpStack, which is Base64 encoded hex data\nvar base64Data = msg.payload.data || \"\";\nvar devEui = msg.payload.deviceInfo.devEui;\nvar bytes = Buffer.from(base64Data, 'base64'); // Decode Base64 string to byte array\nvar port = msg.payload.fPort || 0; // Extract fPort from the message, defaulting to 0 if not present\n\n// Call the decodeUplink function to process the decoded bytes\nmsg = {\n    payload: decodeUplink({bytes: bytes}, port).data\n}\n\n// Return the processed message object\nreturn msg;\n\n/**\n * Main decoder function for uplink messages.\n * Takes in the decoded byte array and processes it into a structured format.\n */\nfunction decodeUplink(input, port) {\n    var bytes = input['bytes'];\n    bytes = bytes2HexString(bytes).toUpperCase(); // Convert byte array to uppercase hex string\n\n    let result = {\n        'err': 0, \n        'eui': devEui,\n        'port': port,\n        'payload': bytes, \n        'valid': true,\n        'messages': []\n    };\n\n    // Split the hex string into individual data frames based on their identifiers\n    let splitArray = dataSplit(bytes);\n\n    // Decode each data frame according to its dataId and store the results\n    let decoderArray = splitArray.map(item => {\n        return dataIdAndDataValueJudge(item.dataId, item.dataValue);\n    });\n\n    // Store the decoded messages in the result object\n    result.messages = decoderArray;\n\n    return { data: result };\n}\n\n/**\n * Converts a byte array or buffer to a hex string.\n * This function ensures that each byte is represented as a two-character hex value.\n * \n * @param {Buffer|Array} arrBytes - The byte array to convert\n * @returns {string} - The resulting hex string\n */\nfunction bytes2HexString(arrBytes) {\n    if (!Array.isArray(arrBytes)) {\n        arrBytes = Array.from(arrBytes); // Convert buffer or array-like object to array\n    }\n    return arrBytes.map(byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');\n}\n\n/**\n * Splits the hex string into data frames based on their identifiers.\n * Each frame is defined by a dataId and a corresponding dataValue.\n * \n * @param {string} bytes - The hex string to split\n * @returns {Array} - An array of objects containing dataId and dataValue\n */\nfunction dataSplit(bytes) {\n    let frameArray = [];\n\n    while (bytes.length > 2) {\n        let dataId = bytes.substring(0, 2); // Extract the data identifier\n        let dataValue;\n        let dataObj = {};\n\n        // Define the length of each data frame based on the dataId\n        const dataIdMap = {\n            '01': 22, '20': 22, '21': 22, '30': 22, '31': 22, '33': 22, \n            '40': 22, '41': 22, '42': 22, '43': 22, '44': 22, '45': 22,\n            '02': 18, '03': 4, '06': 4, '05': 10, '34': 10, \n            '04': 20, '10': 20, '32': 20, '35': 20, '36': 20, '37': 20, '38': 20, '39': 20\n        };\n\n        // Determine the length of the dataValue based on the dataId\n        let length = dataIdMap[dataId] || 2;\n        dataValue = bytes.substring(2, length); // Extract the dataValue based on the length\n        bytes = bytes.substring(length); // Move to the next frame\n\n        dataObj = { 'dataId': dataId, 'dataValue': dataValue }; // Create an object for this data frame\n\n        frameArray.push(dataObj); // Add the object to the array of frames\n    }\n\n    return frameArray;\n}\n\n/**\n * Decodes the dataValue of a given dataId and converts it into meaningful measurements.\n * \n * @param {string} dataId - The identifier for the type of data\n * @param {string} dataValue - The hex string representing the data to be decoded\n * @returns {Array} - An array of measurement objects\n */\nfunction dataIdAndDataValueJudge(dataId, dataValue) {\n    const measurements = [];\n    switch (dataId) {\n        case '01': // Temperature, humidity, light intensity, UV index, wind speed\n            measurements.push(createMeasurement('4097', 'Air Temperature', dataValue.substring(0, 4), 10));\n            measurements.push(createMeasurement('4098', 'Air Humidity', dataValue.substring(4, 6)));\n            measurements.push(createMeasurement('4099', 'Light Intensity', dataValue.substring(6, 14)));\n            measurements.push(createMeasurement('4190', 'UV Index', dataValue.substring(14, 16), 10));\n            measurements.push(createMeasurement('4105', 'Wind Speed', dataValue.substring(16, 20), 10));\n            break;\n        case '02': // Wind direction, rainfall, barometric pressure\n            measurements.push(createMeasurement('4104', 'Wind Direction Sensor', dataValue.substring(0, 4)));\n            measurements.push(createMeasurement('4113', 'Rain Gauge', dataValue.substring(4, 12), 1000));\n            measurements.push(createMeasurement('4101', 'Barometric Pressure', dataValue.substring(12, 16), 0.1));\n            break;\n        case '03': // Battery level\n            measurements.push({ 'Battery(%)': loraWANV2DataFormat(dataValue) });\n            break;\n        case '04': // Battery, hardware version, firmware version, measurement intervals\n            measurements.push({\n                'Battery(%)': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'Hardware Version': createVersion(dataValue.substring(2, 6)),\n                'Firmware Version': createVersion(dataValue.substring(6, 10)),\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(10, 14))) * 60,\n                'gpsInterval': parseInt(loraWANV2DataFormat(dataValue.substring(14, 18))) * 60\n            });\n            break;\n        case '05': // Measurement interval, GPS interval\n            measurements.push({\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(0, 4))) * 60,\n                'gpsInterval': parseInt(loraWANV2DataFormat(dataValue.substring(4, 8))) * 60\n            });\n            break;\n        case '06': // Sensor error event\n            measurements.push(createErrorMeasurement(dataValue));\n            break;\n        case '10': // Status and channel type\n            let { status, type } = loraWANV2BitDataFormat(dataValue.substring(0, 2));\n            measurements.push({\n                status: status, \n                channelType: type, \n                sensorEui: dataValue.substring(2)\n            });\n            break;\n        case '20':\n        case '21':\n        case '43':\n        case '44':\n        case '45': // AI detections\n            measurements.push(...createAIMeasurements(dataId, dataValue));\n            break;\n        case '30':\n        case '31':\n        case '32':\n        case '33': // Channel measurements\n            measurements.push(...createChannelMeasurements(dataId, dataValue));\n            break;\n        case '34': // Data logger configuration\n            measurements.push({\n                'dataloggerProtocol': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'dataloggerGPIOInput': loraWANV2DataFormat(dataValue.substring(2, 4)),\n                'dataloggerAnalogType': loraWANV2DataFormat(dataValue.substring(4, 6)),\n                'dataloggerAnalogInterface': loraWANV2DataFormat(dataValue.substring(6, 8))\n            });\n            break;\n        case '35':\n        case '36':\n        case '37':\n        case '38': // Channel pair measurements\n            measurements.push(createChannelMeasurementPair(dataValue));\n            break;\n        case '39': // Battery, hardware version, firmware version, measurement intervals\n            measurements.push({\n                'Battery(%)': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'Hardware Version': createVersion(dataValue.substring(2, 6)),\n                'Firmware Version': createVersion(dataValue.substring(6, 10)),\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(10, 14))) * 60,\n                'thresholdMeasureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(14, 18)))\n            });\n            break;\n        case '40':\n        case '41': // Light intensity, sound intensity, accelerometer data\n            measurements.push(...createSensorMeasurements(dataValue));\n            break;\n        case '42': // Air temperature, humidity, tVOC, CO2, soil moisture\n            measurements.push(createMeasurement('4097', 'Air Temperature', dataValue.substring(0, 4), 100));\n            measurements.push(createMeasurement('4098', 'Air Humidity', dataValue.substring(4, 8), 100));\n            measurements.push(createMeasurement('4195', 'Total Volatile Organic Compounds', dataValue.substring(8, 12)));\n            measurements.push(createMeasurement('4100', 'CO2', dataValue.substring(12, 16)));\n            measurements.push(createMeasurement('4196', 'Soil moisture intensity', dataValue.substring(16, 20)));\n            break;\n        default:\n            break;\n    }\n    return measurements;\n}\n\n/**\n * Creates a measurement object.\n * \n * @param {string} measurementId - The ID of the measurement type\n * @param {string} type - The type of measurement (e.g., temperature, humidity)\n * @param {string} data - The raw hex string representing the data\n * @param {number} divisor - A divisor for scaling the data value (optional)\n * @returns {Object} - A measurement object with the formatted data\n */\nfunction createMeasurement(measurementId, type, data, divisor = 1) {\n    return {\n        measurementValue: loraWANV2DataFormat(data, divisor),\n        measurementId: measurementId,\n        type: type\n    };\n}\n\n/**\n * Creates a version string from a data string.\n * \n * @param {string} data - The raw hex string representing version information\n * @returns {string} - The formatted version string (e.g., \"1.0\")\n */\nfunction createVersion(data) {\n    return `${loraWANV2DataFormat(data.substring(0, 2))}.${loraWANV2DataFormat(data.substring(2, 4))}`;\n}\n\n/**\n * Creates an error measurement object based on an error code.\n * \n * @param {string} dataValue - The raw hex string representing the error code\n * @returns {Object} - An error measurement object with detailed error information\n */\nfunction createErrorMeasurement(dataValue) {\n    const errorCodes = {\n        '00': 'CCL_SENSOR_ERROR_NONE',\n        '01': 'CCL_SENSOR_NOT_FOUND',\n        '02': 'CCL_SENSOR_WAKEUP_ERROR',\n        '03': 'CCL_SENSOR_NOT_RESPONSE',\n        '04': 'CCL_SENSOR_DATA_EMPTY',\n        '05': 'CCL_SENSOR_DATA_HEAD_ERROR',\n        '06': 'CCL_SENSOR_DATA_CRC_ERROR',\n        '07': 'CCL_SENSOR_DATA_B1_NO_VALID',\n        '08': 'CCL_SENSOR_DATA_B2_NO_VALID',\n        '09': 'CCL_SENSOR_RANDOM_NOT_MATCH',\n        '0A': 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED',\n        '0B': 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED',\n        '0C': 'CCL_SENSOR_DATA_VALUE_HI',\n        '0D': 'CCL_SENSOR_DATA_VALUE_LOW',\n        '0E': 'CCL_SENSOR_DATA_VALUE_MISSED',\n        '0F': 'CCL_SENSOR_ARG_INVAILD',\n        '10': 'CCL_SENSOR_RS485_MASTER_BUSY',\n        '11': 'CCL_SENSOR_RS485_REV_DATA_ERROR',\n        '12': 'CCL_SENSOR_RS485_REG MISSING',\n        '13': 'CCL_SENSOR_RS485_FUN_EXE_ERROR',\n        '14': 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR',\n        '15': 'CCL_SENSOR_CONFIG_ERROR',\n        'FF': 'CCL_SENSOR_DATA_ERROR_UNKNOWN'\n    };\n    const errCode = dataValue;\n    return {\n        measurementId: '4101',\n        type: 'sensor_error_event',\n        errCode: errCode,\n        descZh: errorCodes[errCode] || 'CC_OTHER_FAILED'\n    };\n}\n\n/**\n * Creates an array of AI detection measurements.\n * \n * @param {string} dataId - The identifier for the AI detection type\n * @param {string} dataValue - The raw hex string representing AI detection data\n * @returns {Array} - An array of AI detection measurement objects\n */\nfunction createAIMeasurements(dataId, dataValue) {\n    let measurements = [];\n    let initMeasurementId = dataId === '20' ? 4175 : dataId === '21' ? 4180 : 0;\n    for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2));\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4));\n        let aiValues = `${modelId}.${detectionType}`;\n        measurements.push({\n            measurementValue: aiValues,\n            measurementId: initMeasurementId,\n            type: `AI Detection ${i}`\n        });\n        initMeasurementId++;\n    }\n    return measurements;\n}\n\n/**\n * Creates an array of channel measurements.\n * \n * @param {string} dataId - The identifier for the channel measurement type\n * @param {string} dataValue - The raw hex string representing channel measurement data\n * @returns {Array} - An array of channel measurement objects\n */\nfunction createChannelMeasurements(dataId, dataValue) {\n    let measurements = [];\n    let channelInfo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2));\n    let dataOne = createMeasurement(parseInt(channelInfo.one), 'Measurement', dataValue.substring(4, 12), 1000);\n    let dataTwo = createMeasurement(parseInt(channelInfo.two), 'Measurement', dataValue.substring(12, 20), 1000);\n\n    if (parseInt(channelInfo.one)) measurements.push(dataOne);\n    if (parseInt(channelInfo.two)) measurements.push(dataTwo);\n    return measurements;\n}\n\n/**\n * Creates a pair of channel measurement objects.\n * \n * @param {string} dataValue - The raw hex string representing the channel data\n * @returns {Object} - An object containing two channel measurements\n */\nfunction createChannelMeasurementPair(dataValue) {\n    let channelInfo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2));\n    let channelSortOne = 3920 + (parseInt(channelInfo.one) - 1) * 2;\n    let channelSortTwo = 3921 + (parseInt(channelInfo.two) - 1) * 2;\n\n    return {\n        [channelSortOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        [channelSortTwo]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n    };\n}\n\n/**\n * Creates an array of sensor measurements (light intensity, sound intensity, accelerometer data).\n * \n * @param {string} dataValue - The raw hex string representing sensor data\n * @returns {Array} - An array of sensor measurement objects\n */\nfunction createSensorMeasurements(dataValue) {\n    return [\n        createMeasurement('4193', 'Light Intensity', dataValue.substring(0, 4)),\n        createMeasurement('4192', 'Sound Intensity', dataValue.substring(4, 8)),\n        createMeasurement('4150', 'AccelerometerX', dataValue.substring(8, 12), 100),\n        createMeasurement('4151', 'AccelerometerY', dataValue.substring(12, 16), 100),\n        createMeasurement('4152', 'AccelerometerZ', dataValue.substring(16, 20), 100)\n    ];\n}\n\n/**\n * Converts a hex string to a decimal number, applying a divisor for scaling if necessary.\n * Handles big-endian formats and supports signed integers.\n * \n * @param {string} str - The raw hex string to format\n * @param {number} divisor - A divisor for scaling the result (optional, default is 1)\n * @returns {number} - The formatted value as a number\n */\nfunction loraWANV2DataFormat(str, divisor = 1) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    if (str2[0] === '1') {\n        let arr = str2.split('').map(item => (parseInt(item) === 1 ? 0 : 1));\n        str2 = parseInt(arr.join(''), 2) + 1;\n        return -str2 / divisor;\n    }\n    return parseInt(str2, 2) / divisor;\n}\n\n/**\n * Transforms a hex string from big-endian format to an array of bytes.\n * \n * @param {string} data - The raw hex string\n * @returns {Array} - An array of byte strings\n */\nfunction bigEndianTransform(data) {\n    let dataArray = [];\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2));\n    }\n    return dataArray;\n}\n\n/**\n * Converts an array of hex bytes to a binary string.\n * Ensures each byte is represented as an 8-bit binary number.\n * \n * @param {Array} arr - The array of hex byte strings\n * @returns {string} - The concatenated binary string\n */\nfunction toBinary(arr) {\n    return arr.map(item => parseInt(item, 16).toString(2).padStart(8, '0')).join('');\n}\n\n/**\n * Decodes a status and channel type from a bitfield.\n * \n * @param {string} str - The raw hex string representing the bitfield\n * @returns {Object} - An object containing the decoded channel, status, and type\n */\nfunction loraWANV2BitDataFormat(str) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    return {\n        channel: parseInt(str2.substring(0, 4), 2),\n        status: parseInt(str2.substring(4, 5), 2),\n        type: parseInt(str2.substring(5), 2)\n    };\n}\n\n/**\n * Decodes two channel identifiers from a bitfield.\n * \n * @param {string} str - The raw hex string representing the bitfield\n * @returns {Object} - An object containing the decoded channel identifiers\n */\nfunction loraWANV2ChannelBitFormat(str) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    return {\n        one: parseInt(str2.substring(0, 4), 2),\n        two: parseInt(str2.substring(4, 8), 2)\n    };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 180,
        "wires": [
            [
                "6f15162a393a1c41"
            ]
        ]
    },
    {
        "id": "6f15162a393a1c41",
        "type": "function",
        "z": "fdfd26c77e5e2a42",
        "name": "decode tripwire message",
        "func": "var value = parseInt(msg.payload.messages[0][0].measurementValue);\n\nreturn {\n    payload: value,\n    sensecraft: {\n        fromType: 'Device',\n        valueMeaning: 'ChangeValue',\n        valuetype: 'Number',\n        expectInputType: ['Condition']\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 180,
        "wires": [
            [
                "5da5f4ea1905df1e",
                "9a0531c77d01eb12"
            ]
        ]
    },
    {
        "id": "4ed1a424454e047f",
        "type": "mqtt in",
        "z": "e0d523198c47fac8",
        "name": "subscribe mqtt, and receive message",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "${mqttBroker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 690,
        "y": 80,
        "wires": [
            [
                "9369152b78be0fd8",
                "609a0d5ccc3483ea"
            ]
        ]
    },
    {
        "id": "bf8cf61d9a1c87e9",
        "type": "status",
        "z": "e0d523198c47fac8",
        "name": "",
        "scope": [
            "4ed1a424454e047f"
        ],
        "x": 1560,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "66957fd11eb1e7f3",
        "type": "function",
        "z": "e0d523198c47fac8",
        "name": "build subscribe topic command",
        "func": "var applicationId = env.get(\"applicationId\");\nvar deviceId = env.get(\"deviceId\");\n\nif(!applicationId) {\n    applicationId = env.get(\"SENSECRAFT_MISSION_PACK_CHIRPSTACK_APPID\");\n}\n\nif(!deviceId) {\n    deviceId = env.get(\"SENSECRAFT_MISSION_PACK_DEVICE_ULTRASONIC_DEVEUI\")\n}\n\nmsg.action = 'subscribe'\nmsg.topic = {\n    topic: `application/${applicationId}/device/${deviceId}/event/up`,\n    qos: 0\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "4ed1a424454e047f"
            ]
        ]
    },
    {
        "id": "f375699ff32824af",
        "type": "inject",
        "z": "e0d523198c47fac8",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "66957fd11eb1e7f3"
            ]
        ]
    },
    {
        "id": "4a6bb66a194ebecb",
        "type": "function",
        "z": "e0d523198c47fac8",
        "d": true,
        "name": "decode ultrasonic message",
        "func": "var value = (msg.payload.object.messages[0][0].measurementValue || 0) / 1000.0\n\nmsg.payload = value;\nmsg.sensecraft = {}\nmsg.sensecraft.fromType = \"Device\"\nmsg.sensecraft.valueMeaning = \"ChangeValue\"\nmsg.sensecraft.valuetype = \"Number\"\nmsg.sensecraft.expectInputType = [\"Condition\"]\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 80,
        "wires": [
            [
                "b4cae0a3a27b6aa9"
            ]
        ]
    },
    {
        "id": "9369152b78be0fd8",
        "type": "change",
        "z": "e0d523198c47fac8",
        "d": true,
        "name": "delete unused msg fields",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "4a6bb66a194ebecb"
            ]
        ]
    },
    {
        "id": "b4cae0a3a27b6aa9",
        "type": "function",
        "z": "e0d523198c47fac8",
        "name": "update status",
        "func": "return {\n    payload: {\n        fill: \"green\",\n        shape: \"dot\",\n        text: 'Last Value: ' + msg.payload\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "609a0d5ccc3483ea",
        "type": "function",
        "z": "e0d523198c47fac8",
        "name": "decode lorawan raw message",
        "func": "// Decode the MQTT payload from ChirpStack, which is Base64 encoded hex data\nvar base64Data = msg.payload.data || \"\";\nvar devEui = msg.payload.deviceInfo.devEui;\nvar bytes = Buffer.from(base64Data, 'base64'); // Decode Base64 string to byte array\nvar port = msg.payload.fPort || 0; // Extract fPort from the message, defaulting to 0 if not present\n\n// Call the decodeUplink function to process the decoded bytes\nmsg = {\n    payload: decodeUplink({bytes: bytes}, port).data\n}\n\n// Return the processed message object\nreturn msg;\n\n/**\n * Main decoder function for uplink messages.\n * Takes in the decoded byte array and processes it into a structured format.\n */\nfunction decodeUplink(input, port) {\n    var bytes = input['bytes'];\n    bytes = bytes2HexString(bytes).toUpperCase(); // Convert byte array to uppercase hex string\n\n    let result = {\n        'err': 0, \n        'eui': devEui,\n        'port': port,\n        'payload': bytes, \n        'valid': true,\n        'messages': []\n    };\n\n    // Split the hex string into individual data frames based on their identifiers\n    let splitArray = dataSplit(bytes);\n\n    // Decode each data frame according to its dataId and store the results\n    let decoderArray = splitArray.map(item => {\n        return dataIdAndDataValueJudge(item.dataId, item.dataValue);\n    });\n\n    // Store the decoded messages in the result object\n    result.messages = decoderArray;\n\n    return { data: result };\n}\n\n/**\n * Converts a byte array or buffer to a hex string.\n * This function ensures that each byte is represented as a two-character hex value.\n * \n * @param {Buffer|Array} arrBytes - The byte array to convert\n * @returns {string} - The resulting hex string\n */\nfunction bytes2HexString(arrBytes) {\n    if (!Array.isArray(arrBytes)) {\n        arrBytes = Array.from(arrBytes); // Convert buffer or array-like object to array\n    }\n    return arrBytes.map(byte => ('0' + (byte & 0xFF).toString(16)).slice(-2)).join('');\n}\n\n/**\n * Splits the hex string into data frames based on their identifiers.\n * Each frame is defined by a dataId and a corresponding dataValue.\n * \n * @param {string} bytes - The hex string to split\n * @returns {Array} - An array of objects containing dataId and dataValue\n */\nfunction dataSplit(bytes) {\n    let frameArray = [];\n\n    while (bytes.length > 2) {\n        let dataId = bytes.substring(0, 2); // Extract the data identifier\n        let dataValue;\n        let dataObj = {};\n\n        // Define the length of each data frame based on the dataId\n        const dataIdMap = {\n            '01': 22, '20': 22, '21': 22, '30': 22, '31': 22, '33': 22, \n            '40': 22, '41': 22, '42': 22, '43': 22, '44': 22, '45': 22,\n            '02': 18, '03': 4, '06': 4, '05': 10, '34': 10, \n            '04': 20, '10': 20, '32': 20, '35': 20, '36': 20, '37': 20, '38': 20, '39': 20\n        };\n\n        // Determine the length of the dataValue based on the dataId\n        let length = dataIdMap[dataId] || 2;\n        dataValue = bytes.substring(2, length); // Extract the dataValue based on the length\n        bytes = bytes.substring(length); // Move to the next frame\n\n        dataObj = { 'dataId': dataId, 'dataValue': dataValue }; // Create an object for this data frame\n\n        frameArray.push(dataObj); // Add the object to the array of frames\n    }\n\n    return frameArray;\n}\n\n/**\n * Decodes the dataValue of a given dataId and converts it into meaningful measurements.\n * \n * @param {string} dataId - The identifier for the type of data\n * @param {string} dataValue - The hex string representing the data to be decoded\n * @returns {Array} - An array of measurement objects\n */\nfunction dataIdAndDataValueJudge(dataId, dataValue) {\n    const measurements = [];\n    switch (dataId) {\n        case '01': // Temperature, humidity, light intensity, UV index, wind speed\n            measurements.push(createMeasurement('4097', 'Air Temperature', dataValue.substring(0, 4), 10));\n            measurements.push(createMeasurement('4098', 'Air Humidity', dataValue.substring(4, 6)));\n            measurements.push(createMeasurement('4099', 'Light Intensity', dataValue.substring(6, 14)));\n            measurements.push(createMeasurement('4190', 'UV Index', dataValue.substring(14, 16), 10));\n            measurements.push(createMeasurement('4105', 'Wind Speed', dataValue.substring(16, 20), 10));\n            break;\n        case '02': // Wind direction, rainfall, barometric pressure\n            measurements.push(createMeasurement('4104', 'Wind Direction Sensor', dataValue.substring(0, 4)));\n            measurements.push(createMeasurement('4113', 'Rain Gauge', dataValue.substring(4, 12), 1000));\n            measurements.push(createMeasurement('4101', 'Barometric Pressure', dataValue.substring(12, 16), 0.1));\n            break;\n        case '03': // Battery level\n            measurements.push({ 'Battery(%)': loraWANV2DataFormat(dataValue) });\n            break;\n        case '04': // Battery, hardware version, firmware version, measurement intervals\n            measurements.push({\n                'Battery(%)': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'Hardware Version': createVersion(dataValue.substring(2, 6)),\n                'Firmware Version': createVersion(dataValue.substring(6, 10)),\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(10, 14))) * 60,\n                'gpsInterval': parseInt(loraWANV2DataFormat(dataValue.substring(14, 18))) * 60\n            });\n            break;\n        case '05': // Measurement interval, GPS interval\n            measurements.push({\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(0, 4))) * 60,\n                'gpsInterval': parseInt(loraWANV2DataFormat(dataValue.substring(4, 8))) * 60\n            });\n            break;\n        case '06': // Sensor error event\n            measurements.push(createErrorMeasurement(dataValue));\n            break;\n        case '10': // Status and channel type\n            let { status, type } = loraWANV2BitDataFormat(dataValue.substring(0, 2));\n            measurements.push({\n                status: status, \n                channelType: type, \n                sensorEui: dataValue.substring(2)\n            });\n            break;\n        case '20':\n        case '21':\n        case '43':\n        case '44':\n        case '45': // AI detections\n            measurements.push(...createAIMeasurements(dataId, dataValue));\n            break;\n        case '30':\n        case '31':\n        case '32':\n        case '33': // Channel measurements\n            measurements.push(...createChannelMeasurements(dataId, dataValue));\n            break;\n        case '34': // Data logger configuration\n            measurements.push({\n                'dataloggerProtocol': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'dataloggerGPIOInput': loraWANV2DataFormat(dataValue.substring(2, 4)),\n                'dataloggerAnalogType': loraWANV2DataFormat(dataValue.substring(4, 6)),\n                'dataloggerAnalogInterface': loraWANV2DataFormat(dataValue.substring(6, 8))\n            });\n            break;\n        case '35':\n        case '36':\n        case '37':\n        case '38': // Channel pair measurements\n            measurements.push(createChannelMeasurementPair(dataValue));\n            break;\n        case '39': // Battery, hardware version, firmware version, measurement intervals\n            measurements.push({\n                'Battery(%)': loraWANV2DataFormat(dataValue.substring(0, 2)),\n                'Hardware Version': createVersion(dataValue.substring(2, 6)),\n                'Firmware Version': createVersion(dataValue.substring(6, 10)),\n                'measureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(10, 14))) * 60,\n                'thresholdMeasureInterval': parseInt(loraWANV2DataFormat(dataValue.substring(14, 18)))\n            });\n            break;\n        case '40':\n        case '41': // Light intensity, sound intensity, accelerometer data\n            measurements.push(...createSensorMeasurements(dataValue));\n            break;\n        case '42': // Air temperature, humidity, tVOC, CO2, soil moisture\n            measurements.push(createMeasurement('4097', 'Air Temperature', dataValue.substring(0, 4), 100));\n            measurements.push(createMeasurement('4098', 'Air Humidity', dataValue.substring(4, 8), 100));\n            measurements.push(createMeasurement('4195', 'Total Volatile Organic Compounds', dataValue.substring(8, 12)));\n            measurements.push(createMeasurement('4100', 'CO2', dataValue.substring(12, 16)));\n            measurements.push(createMeasurement('4196', 'Soil moisture intensity', dataValue.substring(16, 20)));\n            break;\n        default:\n            break;\n    }\n    return measurements;\n}\n\n/**\n * Creates a measurement object.\n * \n * @param {string} measurementId - The ID of the measurement type\n * @param {string} type - The type of measurement (e.g., temperature, humidity)\n * @param {string} data - The raw hex string representing the data\n * @param {number} divisor - A divisor for scaling the data value (optional)\n * @returns {Object} - A measurement object with the formatted data\n */\nfunction createMeasurement(measurementId, type, data, divisor = 1) {\n    return {\n        measurementValue: loraWANV2DataFormat(data, divisor),\n        measurementId: measurementId,\n        type: type\n    };\n}\n\n/**\n * Creates a version string from a data string.\n * \n * @param {string} data - The raw hex string representing version information\n * @returns {string} - The formatted version string (e.g., \"1.0\")\n */\nfunction createVersion(data) {\n    return `${loraWANV2DataFormat(data.substring(0, 2))}.${loraWANV2DataFormat(data.substring(2, 4))}`;\n}\n\n/**\n * Creates an error measurement object based on an error code.\n * \n * @param {string} dataValue - The raw hex string representing the error code\n * @returns {Object} - An error measurement object with detailed error information\n */\nfunction createErrorMeasurement(dataValue) {\n    const errorCodes = {\n        '00': 'CCL_SENSOR_ERROR_NONE',\n        '01': 'CCL_SENSOR_NOT_FOUND',\n        '02': 'CCL_SENSOR_WAKEUP_ERROR',\n        '03': 'CCL_SENSOR_NOT_RESPONSE',\n        '04': 'CCL_SENSOR_DATA_EMPTY',\n        '05': 'CCL_SENSOR_DATA_HEAD_ERROR',\n        '06': 'CCL_SENSOR_DATA_CRC_ERROR',\n        '07': 'CCL_SENSOR_DATA_B1_NO_VALID',\n        '08': 'CCL_SENSOR_DATA_B2_NO_VALID',\n        '09': 'CCL_SENSOR_RANDOM_NOT_MATCH',\n        '0A': 'CCL_SENSOR_PUBKEY_SIGN_VERIFY_FAILED',\n        '0B': 'CCL_SENSOR_DATA_SIGN_VERIFY_FAILED',\n        '0C': 'CCL_SENSOR_DATA_VALUE_HI',\n        '0D': 'CCL_SENSOR_DATA_VALUE_LOW',\n        '0E': 'CCL_SENSOR_DATA_VALUE_MISSED',\n        '0F': 'CCL_SENSOR_ARG_INVAILD',\n        '10': 'CCL_SENSOR_RS485_MASTER_BUSY',\n        '11': 'CCL_SENSOR_RS485_REV_DATA_ERROR',\n        '12': 'CCL_SENSOR_RS485_REG MISSING',\n        '13': 'CCL_SENSOR_RS485_FUN_EXE_ERROR',\n        '14': 'CCL_SENSOR_RS485_WRITE_STRATEGY_ERROR',\n        '15': 'CCL_SENSOR_CONFIG_ERROR',\n        'FF': 'CCL_SENSOR_DATA_ERROR_UNKNOWN'\n    };\n    const errCode = dataValue;\n    return {\n        measurementId: '4101',\n        type: 'sensor_error_event',\n        errCode: errCode,\n        descZh: errorCodes[errCode] || 'CC_OTHER_FAILED'\n    };\n}\n\n/**\n * Creates an array of AI detection measurements.\n * \n * @param {string} dataId - The identifier for the AI detection type\n * @param {string} dataValue - The raw hex string representing AI detection data\n * @returns {Array} - An array of AI detection measurement objects\n */\nfunction createAIMeasurements(dataId, dataValue) {\n    let measurements = [];\n    let initMeasurementId = dataId === '20' ? 4175 : dataId === '21' ? 4180 : 0;\n    for (let i = 0; i < dataValue.length; i += 4) {\n        let modelId = loraWANV2DataFormat(dataValue.substring(i, i + 2));\n        let detectionType = loraWANV2DataFormat(dataValue.substring(i + 2, i + 4));\n        let aiValues = `${modelId}.${detectionType}`;\n        measurements.push({\n            measurementValue: aiValues,\n            measurementId: initMeasurementId,\n            type: `AI Detection ${i}`\n        });\n        initMeasurementId++;\n    }\n    return measurements;\n}\n\n/**\n * Creates an array of channel measurements.\n * \n * @param {string} dataId - The identifier for the channel measurement type\n * @param {string} dataValue - The raw hex string representing channel measurement data\n * @returns {Array} - An array of channel measurement objects\n */\nfunction createChannelMeasurements(dataId, dataValue) {\n    let measurements = [];\n    let channelInfo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2));\n    let dataOne = createMeasurement(parseInt(channelInfo.one), 'Measurement', dataValue.substring(4, 12), 1000);\n    let dataTwo = createMeasurement(parseInt(channelInfo.two), 'Measurement', dataValue.substring(12, 20), 1000);\n\n    if (parseInt(channelInfo.one)) measurements.push(dataOne);\n    if (parseInt(channelInfo.two)) measurements.push(dataTwo);\n    return measurements;\n}\n\n/**\n * Creates a pair of channel measurement objects.\n * \n * @param {string} dataValue - The raw hex string representing the channel data\n * @returns {Object} - An object containing two channel measurements\n */\nfunction createChannelMeasurementPair(dataValue) {\n    let channelInfo = loraWANV2ChannelBitFormat(dataValue.substring(0, 2));\n    let channelSortOne = 3920 + (parseInt(channelInfo.one) - 1) * 2;\n    let channelSortTwo = 3921 + (parseInt(channelInfo.two) - 1) * 2;\n\n    return {\n        [channelSortOne]: loraWANV2DataFormat(dataValue.substring(2, 10), 1000),\n        [channelSortTwo]: loraWANV2DataFormat(dataValue.substring(10, 18), 1000)\n    };\n}\n\n/**\n * Creates an array of sensor measurements (light intensity, sound intensity, accelerometer data).\n * \n * @param {string} dataValue - The raw hex string representing sensor data\n * @returns {Array} - An array of sensor measurement objects\n */\nfunction createSensorMeasurements(dataValue) {\n    return [\n        createMeasurement('4193', 'Light Intensity', dataValue.substring(0, 4)),\n        createMeasurement('4192', 'Sound Intensity', dataValue.substring(4, 8)),\n        createMeasurement('4150', 'AccelerometerX', dataValue.substring(8, 12), 100),\n        createMeasurement('4151', 'AccelerometerY', dataValue.substring(12, 16), 100),\n        createMeasurement('4152', 'AccelerometerZ', dataValue.substring(16, 20), 100)\n    ];\n}\n\n/**\n * Converts a hex string to a decimal number, applying a divisor for scaling if necessary.\n * Handles big-endian formats and supports signed integers.\n * \n * @param {string} str - The raw hex string to format\n * @param {number} divisor - A divisor for scaling the result (optional, default is 1)\n * @returns {number} - The formatted value as a number\n */\nfunction loraWANV2DataFormat(str, divisor = 1) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    if (str2[0] === '1') {\n        let arr = str2.split('').map(item => (parseInt(item) === 1 ? 0 : 1));\n        str2 = parseInt(arr.join(''), 2) + 1;\n        return -str2 / divisor;\n    }\n    return parseInt(str2, 2) / divisor;\n}\n\n/**\n * Transforms a hex string from big-endian format to an array of bytes.\n * \n * @param {string} data - The raw hex string\n * @returns {Array} - An array of byte strings\n */\nfunction bigEndianTransform(data) {\n    let dataArray = [];\n    for (let i = 0; i < data.length; i += 2) {\n        dataArray.push(data.substring(i, i + 2));\n    }\n    return dataArray;\n}\n\n/**\n * Converts an array of hex bytes to a binary string.\n * Ensures each byte is represented as an 8-bit binary number.\n * \n * @param {Array} arr - The array of hex byte strings\n * @returns {string} - The concatenated binary string\n */\nfunction toBinary(arr) {\n    return arr.map(item => parseInt(item, 16).toString(2).padStart(8, '0')).join('');\n}\n\n/**\n * Decodes a status and channel type from a bitfield.\n * \n * @param {string} str - The raw hex string representing the bitfield\n * @returns {Object} - An object containing the decoded channel, status, and type\n */\nfunction loraWANV2BitDataFormat(str) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    return {\n        channel: parseInt(str2.substring(0, 4), 2),\n        status: parseInt(str2.substring(4, 5), 2),\n        type: parseInt(str2.substring(5), 2)\n    };\n}\n\n/**\n * Decodes two channel identifiers from a bitfield.\n * \n * @param {string} str - The raw hex string representing the bitfield\n * @returns {Object} - An object containing the decoded channel identifiers\n */\nfunction loraWANV2ChannelBitFormat(str) {\n    let strReverse = bigEndianTransform(str);\n    let str2 = toBinary(strReverse);\n    return {\n        one: parseInt(str2.substring(0, 4), 2),\n        two: parseInt(str2.substring(4, 8), 2)\n    };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 160,
        "wires": [
            [
                "e759cd06d6462147"
            ]
        ]
    },
    {
        "id": "e759cd06d6462147",
        "type": "function",
        "z": "e0d523198c47fac8",
        "name": "decode ultrasonic message",
        "func": "var value = (msg.payload.messages[0][0].measurementValue || 0) / 1000.0\n\nreturn {\n    payload: value,\n    sensecraft: {\n        fromType: 'Device',\n        valueMeaning: 'ChangeValue',\n        valuetype: 'Number',\n        expectInputType: ['Condition']\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 160,
        "wires": [
            [
                "b4cae0a3a27b6aa9"
            ]
        ]
    },
    {
        "id": "6118cd66d545feee",
        "type": "function",
        "z": "864d0ea09f268ade",
        "name": "override global envs",
        "func": "global.set('geoLat', undefined);\nglobal.set('geoLng', undefined);\nglobal.set('radius', undefined);\nglobal.set('geoArea', undefined);\nglobal.set('geoPolygon', undefined);\n\nnode.status({ \n    fill: \"yellow\", \n    shape: \"dot\", \n    text: \"Geofence cleared\" \n});\nmsg.payload = \"Geofence cleared\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b4fa1b291be93bd0",
        "type": "status",
        "z": "864d0ea09f268ade",
        "name": "",
        "scope": null,
        "x": 130,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "17166137dc2d2393",
        "type": "function",
        "z": "3222c245ca4d6f5a",
        "name": "get this node id as 'condition item id' and set to flow",
        "func": "var condition_item_id = node.id;\n\nflow.set(\"condition_item_id\", condition_item_id)\n\nreturn {\n    payload: condition_item_id\n};",
        "outputs": 1,
        "timeout": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 100,
        "wires": [
            [
                "9abdef358b9063d3"
            ]
        ]
    },
    {
        "id": "9abdef358b9063d3",
        "type": "change",
        "z": "3222c245ca4d6f5a",
        "name": "prepare the metadata to next node",
        "rules": [
            {
                "t": "set",
                "p": "condition.action",
                "pt": "msg",
                "to": "report_item_id",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "condition.value",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f90a4f3b20c7063b",
        "type": "inject",
        "z": "3222c245ca4d6f5a",
        "name": "onstartup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "17166137dc2d2393"
            ]
        ]
    },
    {
        "id": "6feedcb6904fe0b7",
        "type": "function",
        "z": "3222c245ca4d6f5a",
        "name": "handle condition",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cdf78b2f3d8e9912",
        "type": "change",
        "z": "3222c245ca4d6f5a",
        "name": "set condition flag",
        "rules": [
            {
                "t": "set",
                "p": "condition.action",
                "pt": "msg",
                "to": "report_item",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "6feedcb6904fe0b7"
            ]
        ]
    },
    {
        "id": "3ea72c2a420cfde0",
        "type": "debug",
        "z": "aa193c820dc14bcf",
        "g": "99d0e9268f69dc25",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 80,
        "wires": []
    },
    {
        "id": "c7ddc2768894bbca",
        "type": "function",
        "z": "aa193c820dc14bcf",
        "g": "99d0e9268f69dc25",
        "name": "save all condition items id",
        "func": "var items = flow.get(\"items\") || [];\n\nif (msg.condition && msg.condition.value !== undefined) {\n    items.push(msg.condition.value);\n}\n\nflow.set(\"items\", items);\n\nreturn {\n    payload: items\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "3ea72c2a420cfde0"
            ]
        ]
    },
    {
        "id": "3452e74a6f467e5e",
        "type": "function",
        "z": "aa193c820dc14bcf",
        "name": "function 65",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ea3247f6fb34b34b",
        "type": "function",
        "z": "aa193c820dc14bcf",
        "name": "function 66",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a49100e860fc7f",
        "type": "switch",
        "z": "aa193c820dc14bcf",
        "name": "report_node_id",
        "property": "condition.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "report_item_id",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "c7ddc2768894bbca"
            ],
            [
                "3452e74a6f467e5e"
            ]
        ]
    },
    {
        "id": "58a570950dc50edf",
        "type": "debug",
        "z": "aa193c820dc14bcf",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "9657bcc00fd4b2a5",
        "type": "function",
        "z": "cb0af35beb73a330",
        "name": "function 64",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "87c774e28eacd57b",
        "type": "file",
        "z": "e404a21a200ea798",
        "g": "033919525f9f8f52",
        "name": "override records-name",
        "filename": "/data/files/_face_recognization/records-name.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1320,
        "y": 180,
        "wires": [
            [
                "99c9b37632c5c033"
            ]
        ]
    },
    {
        "id": "4a7e17d4865cffa2",
        "type": "function",
        "z": "e404a21a200ea798",
        "g": "033919525f9f8f52",
        "name": "empty object payload",
        "func": "return {\n    payload: {}\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 180,
        "wires": [
            [
                "87c774e28eacd57b"
            ]
        ]
    },
    {
        "id": "2271c8e79360da12",
        "type": "function",
        "z": "e404a21a200ea798",
        "g": "93233531937b3c5b",
        "name": "send empty msg",
        "func": "\nreturn {\n    topic: '',\n    payload: ''\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "1757226126fc2011"
            ]
        ]
    },
    {
        "id": "27ac2da36edceb77",
        "type": "function",
        "z": "e404a21a200ea798",
        "g": "93233531937b3c5b",
        "name": "get total face number",
        "func": "// 获取输入的 payload 数组\nlet inputArray = msg.payload;\n\n// 检查输入是否是一个数组\nif (Array.isArray(inputArray)) {\n    // 获取数组的元素数量\n    let elementCount = inputArray.length;\n    \n    // 将元素数量作为新的 payload 输出\n    msg.payload = elementCount;\n} else {\n    // 如果输入不是数组，输出一个错误消息\n    msg.payload = \"输入的 payload 不是一个数组\";\n}\n\n// 返回消息对象\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 140,
        "wires": [
            [
                "a9a2f7647a0e4ed4",
                "4a7e17d4865cffa2"
            ]
        ]
    },
    {
        "id": "b9e071b6f00c3d67",
        "type": "json",
        "z": "e404a21a200ea798",
        "g": "93233531937b3c5b",
        "name": "to json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "27ac2da36edceb77"
            ]
        ]
    },
    {
        "id": "1757226126fc2011",
        "type": "file in",
        "z": "e404a21a200ea798",
        "g": "93233531937b3c5b",
        "name": "get records",
        "filename": "/data/files/_face_recognization/records.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "b9e071b6f00c3d67"
            ]
        ]
    },
    {
        "id": "a9a2f7647a0e4ed4",
        "type": "function",
        "z": "e404a21a200ea798",
        "g": "1891c8a9c8279dc1",
        "name": "empty arrary payload",
        "func": "return {\n    payload: []\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 80,
        "wires": [
            [
                "f498bbc270cb5e99"
            ]
        ]
    },
    {
        "id": "f498bbc270cb5e99",
        "type": "file",
        "z": "e404a21a200ea798",
        "g": "1891c8a9c8279dc1",
        "name": "override records",
        "filename": "/data/files/_face_recognization/records.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1340,
        "y": 80,
        "wires": [
            [
                "99c9b37632c5c033"
            ]
        ]
    },
    {
        "id": "99c9b37632c5c033",
        "type": "join",
        "z": "e404a21a200ea798",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "16b0d0cdb64d28b3",
        "type": "file in",
        "z": "4090eb5792412927",
        "name": "get records-name",
        "filename": "/data/files/_face_recognization/records-name.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "a13cca7fb9aa7d7f"
            ]
        ]
    },
    {
        "id": "a13cca7fb9aa7d7f",
        "type": "json",
        "z": "4090eb5792412927",
        "name": "to json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c3a84f1cf9e4f549",
        "type": "status",
        "z": "4090eb5792412927",
        "name": "",
        "scope": null,
        "x": 370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "20ccfceca2c8a814",
        "type": "link out",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "step-1",
        "mode": "link",
        "links": [
            "e7ef601afcf5adf7"
        ],
        "x": 1310,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "e7ef601afcf5adf7",
        "type": "link in",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "step-1'",
        "links": [
            "20ccfceca2c8a814"
        ],
        "x": 210,
        "y": 360,
        "wires": [
            [
                "81d8c848044b4824"
            ]
        ],
        "l": true
    },
    {
        "id": "e69c7076a06a204d",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "error msg",
        "func": "\nreturn {\n    topic: 'err'\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "1a6981a43e2ef392"
            ]
        ]
    },
    {
        "id": "1a6981a43e2ef392",
        "type": "link out",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "err output",
        "mode": "link",
        "links": [
            "44d6327fc2130e2d"
        ],
        "x": 1160,
        "y": 380,
        "wires": [],
        "l": true
    },
    {
        "id": "b8156427366ffbc0",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "error msg",
        "func": "\nreturn {\n    topic: 'err'\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "8bb12f72033949dd"
            ]
        ]
    },
    {
        "id": "8bb12f72033949dd",
        "type": "link out",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "err output",
        "mode": "link",
        "links": [
            "44d6327fc2130e2d"
        ],
        "x": 1220,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "5b94bf340246e2f4",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "7f68e627b4ad456a",
        "name": "get face name",
        "func": "\nreturn {\n    topic: 'success',\n    payload: msg.payload[flow.get('faceid')]\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7a46d18411e71823",
        "type": "json",
        "z": "c5b584eb17fdf706",
        "g": "7f68e627b4ad456a",
        "name": "to json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "5b94bf340246e2f4"
            ]
        ]
    },
    {
        "id": "abd38a3bfba94980",
        "type": "file in",
        "z": "c5b584eb17fdf706",
        "g": "7f68e627b4ad456a",
        "name": "get records-name",
        "filename": "/data/files/_face_recognization/records-name.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 250,
        "y": 480,
        "wires": [
            [
                "7a46d18411e71823"
            ]
        ]
    },
    {
        "id": "3c1501d272224b44",
        "type": "switch",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "similarity",
        "property": "payload.similarity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "similarity",
                "vt": "env"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 840,
        "y": 360,
        "wires": [
            [
                "abd38a3bfba94980"
            ],
            [
                "e69c7076a06a204d"
            ]
        ]
    },
    {
        "id": "cdeb1ae0239a071a",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "get face id and similarity",
        "func": "// 获取传入的payload数组\nlet array = msg.payload[0];\n\n// 初始化最大值和对应的索引\nlet maxVal = array[0];\nlet maxIndex = 0;\n\n// 遍历数组找出最大值及其对应的索引\nfor (let i = 1; i < array.length; i++) {\n    if (array[i] > maxVal) {\n        maxVal = array[i];\n        maxIndex = i;\n    }\n}\n\nflow.set('similarity', maxVal);\nflow.set('faceid', maxIndex + 1);\n\n// 返回修改后的msg对象\nreturn {\n    topic: '',\n    payload: {\n        similarity: maxVal,\n        faceid: maxIndex + 1\n    }\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "3c1501d272224b44"
            ]
        ]
    },
    {
        "id": "16819fbb21a27697",
        "type": "base64",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "6119ca70cef18695"
            ]
        ]
    },
    {
        "id": "81d8c848044b4824",
        "type": "good-calculate-cosine",
        "z": "c5b584eb17fdf706",
        "g": "e6f197a5204b1d19",
        "name": "",
        "file": "/data/files/_face_recognization/records.txt",
        "x": 410,
        "y": 360,
        "wires": [
            [
                "cdeb1ae0239a071a"
            ]
        ]
    },
    {
        "id": "eacdc21c158e48a0",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "Error Messege",
        "func": "node.warn(msg.errMsg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "94ec4bf104636819",
        "type": "good-face-vectorization",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "",
        "inputType": "1",
        "returnType": "0",
        "method": "0",
        "path": "./example.txt",
        "x": 1110,
        "y": 120,
        "wires": [
            [
                "20ccfceca2c8a814"
            ]
        ]
    },
    {
        "id": "b10beb24b2cfe3e1",
        "type": "switch",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "",
        "property": "next",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 160,
        "wires": [
            [
                "94ec4bf104636819"
            ],
            [
                "eacdc21c158e48a0",
                "b8156427366ffbc0"
            ]
        ]
    },
    {
        "id": "822916ab0d9311d2",
        "type": "function",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "check if face exists",
        "func": "if (msg.payload.data.face.length === 1){\n    msg.next = true;\n    msg.payload = msg.payload.data.face;\n} else if (msg.payload.data.face.length === 0) {\n    msg.next = false;\n    msg.errMsg = \"Couldn't find the face. Please try again.\";\n} else {\n    msg.next = false;\n    msg.errMsg = \"There are several faces. Please register only one person.\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "b10beb24b2cfe3e1"
            ]
        ]
    },
    {
        "id": "6119ca70cef18695",
        "type": "good-face-detection",
        "z": "c5b584eb17fdf706",
        "g": "57d31dd28e179a83",
        "name": "",
        "returnValue": "1",
        "threshold": "0.1",
        "absolutePathDir": "",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "822916ab0d9311d2"
            ]
        ]
    },
    {
        "id": "3d9fa93c082008e6",
        "type": "status",
        "z": "c5b584eb17fdf706",
        "name": "",
        "scope": null,
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "44d6327fc2130e2d",
        "type": "link in",
        "z": "c5b584eb17fdf706",
        "name": "err output'",
        "links": [
            "8bb12f72033949dd",
            "1a6981a43e2ef392"
        ],
        "x": 1140,
        "y": 460,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "5b84894c77c1fc50",
        "type": "change",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "set cropped_image",
        "rules": [
            {
                "t": "set",
                "p": "cropped_image",
                "pt": "flow",
                "to": "payload.originImg",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a65f432ce45eef27",
        "type": "link out",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "parallel-2",
        "mode": "link",
        "links": [
            "3f60edfd50035b43"
        ],
        "x": 1100,
        "y": 380,
        "wires": [],
        "l": true
    },
    {
        "id": "3f60edfd50035b43",
        "type": "link in",
        "z": "5bb547dce475f866",
        "g": "0574b46850707de5",
        "name": "parallel-2'",
        "links": [
            "a65f432ce45eef27"
        ],
        "x": 220,
        "y": 480,
        "wires": [
            [
                "77d34c5dcff131de"
            ]
        ],
        "l": true
    },
    {
        "id": "82ed87c64df302ee",
        "type": "link in",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "get current face vector'",
        "links": [
            "bb060c49a5f4dc36"
        ],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "6fe4a735d30c679b"
            ]
        ],
        "l": true
    },
    {
        "id": "bb060c49a5f4dc36",
        "type": "link out",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "get current face vector",
        "mode": "link",
        "links": [
            "d515c361989c804d",
            "f1956fa040a5ae36",
            "82ed87c64df302ee"
        ],
        "x": 1240,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "d515c361989c804d",
        "type": "link in",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "get current face vector'",
        "links": [
            "bb060c49a5f4dc36"
        ],
        "x": 260,
        "y": 380,
        "wires": [
            [
                "d8d29a2e1f68dfe7"
            ]
        ],
        "l": true
    },
    {
        "id": "015f9db91af3e390",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "error msg",
        "func": "\nreturn {\n    topic: 'err'\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 200,
        "wires": [
            [
                "a641359c4d064d04"
            ]
        ]
    },
    {
        "id": "a641359c4d064d04",
        "type": "link out",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "err output",
        "mode": "link",
        "links": [
            "a601c4964f762916"
        ],
        "x": 1060,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "244f3d42bf4c2b31",
        "type": "json",
        "z": "5bb547dce475f866",
        "g": "0574b46850707de5",
        "name": "to json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 480,
        "wires": [
            [
                "f145c165bea3f87a"
            ]
        ]
    },
    {
        "id": "f145c165bea3f87a",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "0574b46850707de5",
        "name": "add face id and name",
        "func": "msg.payload[msg.current_face_id] = '' + flow.get(\"input_name\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 480,
        "wires": [
            [
                "571941aded192eef"
            ]
        ]
    },
    {
        "id": "571941aded192eef",
        "type": "file",
        "z": "5bb547dce475f866",
        "g": "0574b46850707de5",
        "name": "override records-name",
        "filename": "/data/files/_face_recognization/records-name.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "d476491945a48358"
            ]
        ]
    },
    {
        "id": "77d34c5dcff131de",
        "type": "file in",
        "z": "5bb547dce475f866",
        "g": "0574b46850707de5",
        "name": "get records-name",
        "filename": "/data/files/_face_recognization/records-name.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "244f3d42bf4c2b31"
            ]
        ]
    },
    {
        "id": "613abc3d927e73b0",
        "type": "file",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "override records",
        "filename": "/data/files/_face_recognization/records.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1380,
        "y": 300,
        "wires": [
            [
                "d476491945a48358"
            ]
        ]
    },
    {
        "id": "d5eb4430aeb03f2b",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "set face id",
        "func": "var faceId = parseInt(msg.payload[1].length + 1);\n\nflow.set('current_face_id', faceId);\nmsg.current_face_id = faceId;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 380,
        "wires": [
            [
                "fe36be70f959558f",
                "a65f432ce45eef27"
            ]
        ]
    },
    {
        "id": "fb700ec9c87b1f8b",
        "type": "change",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "set input name",
        "rules": [
            {
                "t": "set",
                "p": "input_name",
                "pt": "flow",
                "to": "topic",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fe36be70f959558f",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "combine new records array",
        "func": "var payload = msg.payload;\n\nvar elementToAdd = payload[0][0];\n\nvar targetArray = payload[1];\n\ntargetArray.push(elementToAdd);\n\nmsg.payload = targetArray;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 300,
        "wires": [
            [
                "613abc3d927e73b0"
            ]
        ]
    },
    {
        "id": "6fe4a735d30c679b",
        "type": "join",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 750,
        "y": 360,
        "wires": [
            [
                "d5eb4430aeb03f2b"
            ]
        ]
    },
    {
        "id": "13ea454879d2d2db",
        "type": "json",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "to json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 380,
        "wires": [
            [
                "6fe4a735d30c679b"
            ]
        ]
    },
    {
        "id": "d8d29a2e1f68dfe7",
        "type": "file in",
        "z": "5bb547dce475f866",
        "g": "e18cdbece1ee414b",
        "name": "get records",
        "filename": "/data/files/_face_recognization/records.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 380,
        "wires": [
            [
                "13ea454879d2d2db"
            ]
        ]
    },
    {
        "id": "1bd947ef0136bf4a",
        "type": "base64",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "eb2c8ec65d140976"
            ]
        ]
    },
    {
        "id": "061cd6fe11f24d84",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "Error Messege",
        "func": "return console.log(msg.errMsg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2ca56057b286ed99",
        "type": "good-face-vectorization",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "",
        "inputType": "1",
        "returnType": "0",
        "method": "1",
        "path": "/data/files/_face_recognization/records.txt",
        "x": 970,
        "y": 120,
        "wires": [
            [
                "bb060c49a5f4dc36"
            ]
        ]
    },
    {
        "id": "f8aa938b61591ffb",
        "type": "switch",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "",
        "property": "next",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "2ca56057b286ed99"
            ],
            [
                "061cd6fe11f24d84",
                "015f9db91af3e390"
            ]
        ]
    },
    {
        "id": "bf02cef20c7c5573",
        "type": "function",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "check if face exists",
        "func": "if (msg.payload.data.face.length === 1){\n    msg.next = true;\n    msg.payload = msg.payload.data.face;\n} else if (msg.payload.data.face.length === 0) {\n    msg.next = false;\n    msg.errMsg = \"Couldn't find the face. Please try again.\";\n} else {\n    msg.next = false;\n    msg.errMsg = \"There are several faces. Please register only one person.\";\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 140,
        "wires": [
            [
                "f8aa938b61591ffb"
            ]
        ]
    },
    {
        "id": "eb2c8ec65d140976",
        "type": "good-face-detection",
        "z": "5bb547dce475f866",
        "g": "a18ab3f640fb968f",
        "name": "",
        "returnValue": "1",
        "threshold": "0.1",
        "absolutePathDir": "",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "bf02cef20c7c5573",
                "5b84894c77c1fc50"
            ]
        ]
    },
    {
        "id": "0b1a4ae0fb685dac",
        "type": "status",
        "z": "5bb547dce475f866",
        "name": "",
        "scope": null,
        "x": 2110,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d476491945a48358",
        "type": "join",
        "z": "5bb547dce475f866",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1570,
        "y": 420,
        "wires": [
            [
                "29d4d7e465696410"
            ]
        ]
    },
    {
        "id": "09d5c1594e88a074",
        "type": "function",
        "z": "5bb547dce475f866",
        "name": "build output message",
        "func": "\nreturn {\n    topic: 'success',\n    payload: flow.get(\"current_face_id\")\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "a601c4964f762916",
        "type": "link in",
        "z": "5bb547dce475f866",
        "name": "err output'",
        "links": [
            "a641359c4d064d04"
        ],
        "x": 2180,
        "y": 360,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "9b13775bb0e64b3b",
        "type": "file",
        "z": "5bb547dce475f866",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1940,
        "y": 420,
        "wires": [
            [
                "09d5c1594e88a074"
            ]
        ]
    },
    {
        "id": "29d4d7e465696410",
        "type": "function",
        "z": "5bb547dce475f866",
        "name": "prepare to write file",
        "func": "var faceid = flow.get('cropped_image');\n\nreturn {\n    faceid: faceid,\n    filename: '/data/files/_face_recognization/images/' + flow.get(\"current_face_id\") + '.jpg',\n    payload: faceid\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 420,
        "wires": [
            [
                "9b13775bb0e64b3b"
            ]
        ]
    },
    {
        "id": "4c66e73173def117",
        "type": "function",
        "z": "8e71ad1d725a1c4b",
        "name": "Circle Geofence Check",
        "func": "const geoLat = parseFloat(global.get('geofence_geoLat'));\nconst geoLng = parseFloat(global.get('geofence_geoLng'));\nconst radius = parseFloat(global.get('geofence_radius'));\n\n// Check if the geofence values are set\nif (isNaN(geoLat) || isNaN(geoLng) || isNaN(radius)) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Geofence not set\" });\n    msg.payload = \"Geofence not set\";\n    msg.result = false;\n    return msg;\n}\n\nfunction haversine(lat1, lon1, lat2, lon2) {\n    const R = 6371000; // Radius of the Earth in meters\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n}\n\nconst latitude = msg.payload.latitude;\nconst longitude = msg.payload.longitude;\nconst distance = haversine(latitude, longitude, geoLat, geoLng);\n\nif (distance <= radius) {\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Inside geofence\" });\n    msg.payload = \"Inside geofence\";\n    msg.result = false;\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Outside geofence\" });\n    msg.payload = \"Outside geofence\";\n    msg.result = true;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 80,
        "wires": [
            [
                "60dcdf32abc3caca"
            ]
        ]
    },
    {
        "id": "6043d188a20436b2",
        "type": "function",
        "z": "8e71ad1d725a1c4b",
        "name": "Rectangle Geofence Check",
        "func": "const geoArea = global.get('geofence_geoArea');\n// node.warn(\"Rectangle geofence retrieved: \" + JSON.stringify(geoArea));\n\n// Check if the geofence values are set\nif (!geoArea || geoArea.length !== 4) {\n    node.status({\n        fill: \"yellow\", \n        shape: \"dot\", \n        text: \"Geofence not set\"\n    });\n    msg.payload = \"Geofence not set\";\n    msg.result = false;\n    return msg;\n}\n\nconst latitude = msg.payload.latitude;\nconst longitude = msg.payload.longitude;\n// node.warn(\"Checking point: \" + JSON.stringify({lat: latitude, lon: longitude}));\n\nconst [sw, nw, ne, se] = geoArea;\n\nif (latitude >= sw.lat && latitude <= nw.lat && longitude >= sw.lng && longitude <= se.lng) {\n    node.status({\n        fill: \"green\", \n        shape: \"dot\", \n        text: \"Inside geofence\"\n    });\n    msg.payload = \"Inside geofence\";\n    msg.result = false;\n} else {\n    node.status({\n        fill: \"red\", \n        shape: \"dot\", \n        text: \"Outside geofence\"\n    });\n    msg.payload = \"Outside geofence\";\n    msg.result = true;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 140,
        "wires": [
            [
                "60dcdf32abc3caca"
            ]
        ]
    },
    {
        "id": "08675c9954291a36",
        "type": "function",
        "z": "8e71ad1d725a1c4b",
        "name": "Polygon Geofence Check",
        "func": "const geoPolygon = global.get('geofence_geoPolygon');\n// node.warn(\"Polygon geofence retrieved: \" + JSON.stringify(geoPolygon));\n\n// Check if the geofence values are set\nif (!geoPolygon || geoPolygon.length < 3) {\n    node.status({\n        fill: \"yellow\", \n        shape: \"dot\", \n        text: \"Geofence not set\"\n    });\n    msg.payload = \"Geofence not set\";\n    msg.result = false;\n    return msg;\n}\n\nconst latitude = msg.payload.latitude;\nconst longitude = msg.payload.longitude;\n// node.warn(\"Checking point: \" + JSON.stringify({lat: latitude, lon: longitude}));\n\nfunction pointInPolygon(point, vs) {\n    const x = point[0], y = point[1];\n\n    let inside = false;\n    for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n        const xi = vs[i][0], yi = vs[i][1];\n        const xj = vs[j][0], yj = vs[j][1];\n\n        const intersect = ((yi > y) != (yj > y))\n            && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n        if (intersect) inside = !inside;\n    }\n\n    return inside;\n}\n\n// Convert polygon points to array of arrays\nconst polygonPoints = geoPolygon.map(point => [point.lat, point.lng]);\n\n// Check if the point is inside the polygon\nconst isInside = pointInPolygon([latitude, longitude], polygonPoints);\n\nif (isInside) {\n    node.status({\n        fill: \"green\", \n        shape: \"dot\", \n        text: \"Inside geofence\"\n    });\n    msg.payload = \"Inside geofence\";\n    msg.result = false;\n} else {\n    node.status({\n        fill: \"red\", \n        shape: \"dot\", \n        text: \"Outside geofence\"\n    });\n    msg.payload = \"Outside geofence\";\n    msg.result = true;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 200,
        "wires": [
            [
                "60dcdf32abc3caca"
            ]
        ]
    },
    {
        "id": "56ab0313b569ca75",
        "type": "status",
        "z": "8e71ad1d725a1c4b",
        "name": "",
        "scope": null,
        "x": 570,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "60dcdf32abc3caca",
        "type": "function",
        "z": "8e71ad1d725a1c4b",
        "name": "return result only",
        "func": "return {\n    payload: msg.result\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ade60163a11e3c8c",
        "type": "worldmap",
        "z": "c4c69de5166fafdd",
        "g": "f4f3769682678829",
        "name": "worldmap",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "EsriC",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "deg",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "${webPath}",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "EsriC",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "337633503c2515db",
        "type": "function",
        "z": "c4c69de5166fafdd",
        "g": "99e5220aef247514",
        "name": "send map config commands from envs and defaults",
        "func": "return {\n    payload: {\n        \"command\": {\n            // define offline map\n            map: {\n                name: \"SenseCraft Offline Map\",\n                pmtiles: \"/data/files/_geofence/map-\" + env.get(\"offlineMapZoom\") + \".pmtiles\",\n                opt: {\n                    \"attribution\": \"SenseCraft Offline Map\",\n                    \"maxDataZoom\": parseInt(env.get(\"offlineMapZoom\")),\n                    \"maxZoom\": 20,\n                    \"theme\": \"light\"\n                }\n            },\n\n            // use offline map\n            layer: env.get(\"useOfflineMap\") ? \"SenseCraft Offline Map\" : \"Esri Streetmap\",\n\n            // default central and zoom\n            lat: env.get(\"startLatitude\"),\n            lon: env.get(\"startLongitude\"),\n            zoom: env.get(\"zoom\"),\n\n            // adjust map ui\n            showlayer: [\"drawing\", \"tracker\"],\n            ruler: { \"showruler\": false },\n            hiderightclick: true,\n            toptitle: \"SenseCraft Map\",\n            drawcontextmenu: \n                \"<button onclick='editPoly(\\\"geofence\\\");'>Edit points</button>\" +\n                \"<button onclick='editPoly(\\\"geofence\\\", \\\"drag\\\");'>Drag</button>\" +\n                \"<button onclick='editPoly(\\\"geofence\\\", \\\"rot\\\");'>Rotate</button>\" +\n                \"<button onclick='delMarker(\\\"geofence\\\", true);'>Delete</button>\" +\n                \"<button onclick='delMarker(\\\"geofence\\\", true); sendDrawing();'>Set Geofence</button>\"\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "96ea24175fedf6f4"
            ]
        ]
    },
    {
        "id": "e7755049244b350f",
        "type": "ui-template",
        "z": "c4c69de5166fafdd",
        "g": "f4f3769682678829",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "Map ui",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n   <iframe src=\"/w\" width=\"100%\" height=\"100%\" frameborder=\"0\" loading=\"lazy\" class=\"iframe\" allow=\"geolocation\"></iframe>\n</template>\n\n<style scoped>\n   .iframe {\n      width: 100% !important;\n      height: 100% !important;\n      position: absolute;\n      left: 0;\n      top: 0;\n   }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 130,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "26312f12f3217573",
        "type": "worldmap in",
        "z": "c4c69de5166fafdd",
        "g": "99e5220aef247514",
        "name": "worldmap geofence event",
        "path": "${webPath}",
        "events": "connect",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "337633503c2515db"
            ]
        ]
    },
    {
        "id": "bb27f4c3b8c37aea",
        "type": "link in",
        "z": "c4c69de5166fafdd",
        "g": "f4f3769682678829",
        "name": "set worldmap'",
        "links": [
            "1f20fd19c6b93810",
            "96ea24175fedf6f4",
            "eeecd4df7a93968f",
            "af8c93719ea1fabf",
            "ab32e98ba6154f6b"
        ],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "ade60163a11e3c8c"
            ]
        ],
        "l": true
    },
    {
        "id": "96ea24175fedf6f4",
        "type": "link out",
        "z": "c4c69de5166fafdd",
        "g": "99e5220aef247514",
        "name": "set worldmap",
        "mode": "link",
        "links": [
            "bb27f4c3b8c37aea"
        ],
        "x": 860,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "bf8030f03f7aaecf",
        "type": "worldmap in",
        "z": "c4c69de5166fafdd",
        "g": "2bb23bcf3066d948",
        "name": "worldmap geofence event",
        "path": "${webPath}",
        "events": "draw",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "4c15cc8d575e89cc",
                "f80e7c523421d7bc"
            ]
        ]
    },
    {
        "id": "4c15cc8d575e89cc",
        "type": "json",
        "z": "c4c69de5166fafdd",
        "g": "2bb23bcf3066d948",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 300,
        "wires": [
            [
                "55b5b5ed834e5c05"
            ]
        ]
    },
    {
        "id": "55b5b5ed834e5c05",
        "type": "function",
        "z": "c4c69de5166fafdd",
        "g": "2bb23bcf3066d948",
        "name": "update geofence",
        "func": "var payload = msg.payload;\nvar circleMsg = null;\nvar rectangleMsg = null;\nvar polygonMsg = null;\n\n// Parse the incoming payload\ntry {\n    var parsedPayload = JSON.parse(payload);\n} catch (e) {\n    // node.error(\"Invalid JSON payload\", msg);\n    return null;\n}\n\n// Store geofence data in flow context\nif (parsedPayload.type === \"Circle\") {\n    global.set('geofence_geoLat', parsedPayload.lat);\n    global.set('geofence_geoLng', parsedPayload.lon);\n    global.set('geofence_radius', parsedPayload.radius);\n    circleMsg = { \n        payload: parsedPayload \n    };\n    var warnlog = \"Circle geofence set: \" + JSON.stringify(parsedPayload);\n    // node.warn(\"Circle geofence set: \" + JSON.stringify(parsedPayload));\n    node.status({ fill: \"grey\", shape: \"ring\", text: warnlog });\n} else if (parsedPayload.type === \"Rectangle\") {\n    global.set('geofence_geoArea', parsedPayload.area);\n    rectangleMsg = { \n        payload: parsedPayload \n    };\n    var warnlog = \"Rectangle geofence set: \" + JSON.stringify(parsedPayload);\n    // node.warn(\"Rectangle geofence set: \" + JSON.stringify(parsedPayload));\n    node.status({ fill: \"grey\", shape: \"ring\", text: warnlog });\n} else if (parsedPayload.type === \"Polygon\") {\n    global.set('geofence_geoPolygon', parsedPayload.area);\n    polygonMsg = { \n        payload: parsedPayload\n    };\n    var warnlog = \"Polygon geofence set: \" + JSON.stringify(parsedPayload);\n    // node.warn(\"Polygon geofence set: \" + JSON.stringify(parsedPayload));\n    node.status({ fill: \"grey\", shape: \"ring\", text: warnlog });\n}\n\nreturn [circleMsg, rectangleMsg, polygonMsg];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 300,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f80e7c523421d7bc",
        "type": "template",
        "z": "c4c69de5166fafdd",
        "g": "2bb23bcf3066d948",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"command\": {\n        \"name\": \"Circle5\",\n        \"deleted\": true\n    }\n}",
        "output": "json",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "ab32e98ba6154f6b"
            ]
        ]
    },
    {
        "id": "ab32e98ba6154f6b",
        "type": "link out",
        "z": "c4c69de5166fafdd",
        "g": "2bb23bcf3066d948",
        "name": "set worldmap",
        "mode": "link",
        "links": [
            "bb27f4c3b8c37aea"
        ],
        "x": 580,
        "y": 360,
        "wires": [],
        "l": true
    },
    {
        "id": "6e67621c825551cf",
        "type": "status",
        "z": "c4c69de5166fafdd",
        "name": "",
        "scope": [
            "ade60163a11e3c8c"
        ],
        "x": 470,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "1f20fd19c6b93810",
        "type": "link out",
        "z": "c4c69de5166fafdd",
        "name": "set worldmap",
        "mode": "link",
        "links": [
            "bb27f4c3b8c37aea"
        ],
        "x": 580,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "2bdcf54b359a2b84",
        "type": "template",
        "z": "c4c69de5166fafdd",
        "name": "payload",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "{\n    \"channel\": 0,\n    \"from\": \"test\",\n    \"hop_start\": 3,\n    \"hops_away\": 0,\n    \"id\": 974060372,\n    \"payload\": {\n        \"PDOP\": 187,\n        \"altitude\": 79,\n        \"ground_speed\": 1,\n        \"ground_track\": 4501000,\n        \"latitude_i\": 225754329,\n        \"longitude_i\": 1139216733,\n        \"precision_bits\": 32,\n        \"sats_in_view\": 8,\n        \"time\": 1720783381\n    },\n    \"rssi\": -40,\n    \"sender\": \"!43562584\",\n    \"snr\": 6.75,\n    \"timestamp\": 1720783378,\n    \"to\": 4294967295,\n    \"type\": \"position\"\n}",
        "output": "json",
        "x": 1180,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "eb49510ba5a5468b",
        "type": "inject",
        "z": "c4c69de5166fafdd",
        "name": "simulate reported a position",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 980,
        "y": 400,
        "wires": [
            [
                "2bdcf54b359a2b84"
            ]
        ]
    },
    {
        "id": "3d1b9edd429b77f0",
        "type": "inject",
        "z": "c4c69de5166fafdd",
        "name": "simulate reported a position (outside)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"channel\":0,\"from\":\"test2\",\"hop_start\":3,\"hops_away\":0,\"id\":974060372,\"payload\":{\"PDOP\":187,\"altitude\":79,\"ground_speed\":1,\"ground_track\":4501000,\"latitude_i\":226064329,\"longitude_i\":1139216733,\"precision_bits\":32,\"sats_in_view\":8,\"time\":1720783381},\"rssi\":-40,\"sender\":\"!43562584\",\"snr\":6.75,\"timestamp\":1720783378,\"to\":4294967295,\"type\":\"position\"}",
        "payloadType": "json",
        "x": 1010,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "08ebc59461b725fb",
        "type": "function",
        "z": "c4c69de5166fafdd",
        "name": "send a mapping point",
        "func": "let payload = msg.payload;\n\nlet lat = payload.latitude;\nlet lon = payload.longitude;\nlet name = payload.name;\nlet nameHex = payload.nameHex;\n\nmsg = {\n   payload: {\n      action: \"point\",\n      layer: \"traker_layer\",\n      icon: \"car\",\n      name: nameHex,\n      label: nameHex,\n      lat: lat,\n      lon: lon\n   }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "1f20fd19c6b93810"
            ]
        ]
    },
    {
        "id": "5e9440fabfd2da69",
        "type": "inject",
        "z": "38e9748a918c1e10",
        "name": "onstartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "f5ab1fc12799c8ed"
            ]
        ]
    },
    {
        "id": "f5ab1fc12799c8ed",
        "type": "function",
        "z": "38e9748a918c1e10",
        "name": "Generate precipitation, address, geomorphology, hydrological data",
        "func": "var rainfall = {\n    payload: Math.random() * 100,\n    topic: \"rainfall\"\n};\n\nvar rockType = {\n    payload: Math.random() * 100,\n    topic: \"rockType\"\n};\n\nvar faultActivity = {\n    payload: Math.random() * 20,\n    topic: \"faultActivity\"\n};\n\nvar slope = {\n    payload: Math.random() * 50,\n    topic: \"slope\"\n};\n\nvar terrainChange = {\n    payload: Math.random() * 100,\n    topic: \"terrainChange\"\n};\n\nvar surfaceWaterFlow = {\n    payload: Math.random() * 100,\n    topic: \"surfaceWaterFlow\"\n};\n\n\n\nvar total = {\n    payload: {\n        rainfall: rainfall.payload,\n        rockType: rockType.payload,\n        faultActivity: faultActivity.payload,\n        slope: slope.payload,\n        terrainChange: terrainChange.payload,\n        surfaceWaterFlow: surfaceWaterFlow.payload,\n    },\n    topic: \"total\"\n};\n\nreturn [rainfall, rockType, faultActivity, slope, terrainChange, surfaceWaterFlow, total];\n",
        "outputs": 7,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "5db0f103b9546827"
            ],
            [
                "15fb2d60fd0e04a0"
            ],
            [
                "2a41badc83a1e603"
            ],
            [
                "da67238f9d4ced60"
            ],
            [
                "773740c8ab9f4651"
            ],
            [
                "3b72256b2d2d247d"
            ],
            [
                "69e83088031bdcec"
            ]
        ]
    },
    {
        "id": "1149f0a0b9fd843e",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rainfall",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5edb4c8f76a82f6a",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rockType",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0693edfe70c78b67",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "faultActivity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "54fbd230597f32cc",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "slope",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f9708d2c3af3b53f",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "terrainChange",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5f7a3634e1d812be",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "surfaceWaterFlow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "64a108e017924245",
        "type": "change",
        "z": "38e9748a918c1e10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "total",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5db0f103b9546827",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "rainfall",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 60,
        "wires": [
            [
                "1149f0a0b9fd843e"
            ]
        ]
    },
    {
        "id": "15fb2d60fd0e04a0",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "rockType",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "5edb4c8f76a82f6a"
            ]
        ]
    },
    {
        "id": "2a41badc83a1e603",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "faultActivity",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 140,
        "wires": [
            [
                "0693edfe70c78b67"
            ]
        ]
    },
    {
        "id": "da67238f9d4ced60",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "slope",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 180,
        "wires": [
            [
                "54fbd230597f32cc"
            ]
        ]
    },
    {
        "id": "773740c8ab9f4651",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "terrainChange",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "f9708d2c3af3b53f"
            ]
        ]
    },
    {
        "id": "3b72256b2d2d247d",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "surfaceWaterFlow",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "5f7a3634e1d812be"
            ]
        ]
    },
    {
        "id": "6b7f3b83a2935fa2",
        "type": "switch",
        "z": "38e9748a918c1e10",
        "name": "",
        "property": "total",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 300,
        "wires": [
            [
                "64a108e017924245"
            ]
        ]
    },
    {
        "id": "69e83088031bdcec",
        "type": "function",
        "z": "38e9748a918c1e10",
        "name": "Calculate the risk of geological disasters",
        "func": "var data = msg.payload;\nvar geoRisk = (data.rainfall * 0.3 + data.rockType * 0.2 + data.faultActivity * 0.2 + data.slope * 0.2 + data.terrainChange * 0.1);\nmsg.payload = geoRisk;\n\n// Keep two decimal places\nmsg.payload = parseFloat(msg.payload.toFixed(2));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            [
                "6b7f3b83a2935fa2"
            ]
        ]
    },
    {
        "id": "3c0fed2eb2400e17",
        "type": "ui-template",
        "z": "24744a865787dab5",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "processed preview ui",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"container\" :style=\"{ height: msg.env.height + 'px' }\">\n        <template v-if=\"msg.payload\">\n            <img class=\"image\" :class=\"{ mirrored: msg.env.mirror }\" :style=\"{ height: msg.env.height + 'px' }\" :src=\"'data:image/jpeg;base64,' + msg.payload\">\n        </template>\n        <template v-else>\n            <div class=\"placeholder\" :style=\"{ height: msg.env.height + 'px' }\">\n                no image\n            </div>\n        </template>\n    </div>\n</template>\n\n<style scoped>\n.container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n}\n\n.image {\n    width: auto; /* 确保图片宽度根据内容自适应 */\n}\n\n.mirrored {\n    transform: scaleX(-1); /* 水平翻转图像 */\n}\n\n.placeholder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    font-size: 24px;\n    border: 1px solid #ccc;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "25ab445582af8af5",
        "type": "function",
        "z": "24744a865787dab5",
        "name": "delete image's base64 header, if input contains",
        "func": "// 获取msg.payload\nvar payload = msg.payload;\n\n// 检查msg.payload是否以'data:image/jpeg;base64,'开头\nif (payload.startsWith('data:image/jpeg;base64,')) {\n    // 去掉开头的'data:image/jpeg;base64,'\n    payload = payload.substring('data:image/jpeg;base64,'.length);\n}\n\n// 更新msg.payload\nmsg.payload = payload;\n\n// 返回msg对象\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "9c4a94790c70b5ab"
            ]
        ]
    },
    {
        "id": "6b8f8035357f4902",
        "type": "function",
        "z": "24744a865787dab5",
        "name": "counting",
        "func": "// Initialize flow variable if not already initialized\nif (typeof flow.get('count') === 'undefined') {\n    flow.set('count', 0);\n}\n\n// Get the current count\nlet count = flow.get('count');\n\n// Increment the count\ncount += 1;\n\n// Update the count in the flow context\nflow.set('count', count);\n\n// Set the count in the message payload\nmsg.payload = 'sent images: ' + count;\n\n// Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 320,
        "wires": [
            [
                "53efe0a905a0143c"
            ]
        ]
    },
    {
        "id": "53efe0a905a0143c",
        "type": "function",
        "z": "24744a865787dab5",
        "name": "summary status",
        "func": "return {\n    payload: {\n        fill: \"green\",\n        shape: \"dot\",\n        text: msg.payload\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "node.send({\n    payload: {\n        fill: \"grey\",\n        shape: \"dot\",\n        text: 'no image input'\n    }\n});",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9c4a94790c70b5ab",
        "type": "change",
        "z": "24744a865787dab5",
        "name": "get and pass env vars",
        "rules": [
            {
                "t": "set",
                "p": "env.height",
                "pt": "msg",
                "to": "height",
                "tot": "env",
                "dc": true
            },
            {
                "t": "set",
                "p": "env.mirror",
                "pt": "msg",
                "to": "mirror",
                "tot": "env",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 140,
        "wires": [
            [
                "3c0fed2eb2400e17"
            ]
        ]
    },
    {
        "id": "27b6288f430f7417",
        "type": "inject",
        "z": "24744a865787dab5",
        "name": "on startup, set the default no image view",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "9c4a94790c70b5ab"
            ]
        ]
    },
    {
        "id": "5f1a254d4658f374",
        "type": "mqtt in",
        "z": "ff55010600100001",
        "name": "Subscribe route online state",
        "topic": "msh/seeed/2/stat/+",
        "qos": "0",
        "datatype": "utf8",
        "broker": "${mqtt-broker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "9e8f4a0ffd0eda44"
            ]
        ]
    },
    {
        "id": "9e8f4a0ffd0eda44",
        "type": "function",
        "z": "ff55010600100001",
        "name": "get online route id",
        "func": "let topic = msg.topic;\nlet outputMsg = {\n    payload: {\n        routeid: 0,\n        state: false\n    }\n};\n\nlet originalRouteId = topic.split('/')[4];\n\nlet processed = originalRouteId.replace(/[^a-z0-9]/g, '');\nlet decimalValue = parseInt(processed, 16);\n\n\nif (msg.payload === 'online') {\n    outputMsg.payload.routeid = decimalValue;\n    outputMsg.payload.state = true;\n    flow.set(\"currentRouteId\", decimalValue);\n    flow.set(\"currentRouteState\", true);\n    global.set(\"currentRouteId\", decimalValue);\n    global.set(\"currentRouteState\", true);\n    return {\n        topic: outputMsg.payload.routeid,\n        payload: outputMsg.payload.state\n    };\n} else if (msg.payload === 'offline') {\n    if (global.get(\"currentRouteId\") == decimalValue) {\n        outputMsg.payload.routeid = 0;\n        outputMsg.payload.state = false;\n        flow.set(\"currentRouteId\", 0);\n        flow.set(\"currentRouteState\", false);\n        global.set(\"currentRouteId\", 0);\n        global.set(\"currentRouteState\", false);\n        return {\n            topic: outputMsg.payload.routeid,\n            payload: outputMsg.payload.state\n        };\n    } else {\n        return null;\n    }\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c392a41fd52b31fe",
        "type": "inject",
        "z": "ff55010600100001",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 230,
        "y": 80,
        "wires": [
            [
                "5c9eedc434bd084a"
            ]
        ]
    },
    {
        "id": "5c9eedc434bd084a",
        "type": "change",
        "z": "ff55010600100001",
        "name": "init flow envs",
        "rules": [
            {
                "t": "set",
                "p": "currentRouteId",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "currentRouteState",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "currentRouteId",
                "pt": "global",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "currentRouteState",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5b54f9c21e1e18cf",
        "type": "status",
        "z": "ff55010600100001",
        "name": "",
        "scope": [
            "5f1a254d4658f374"
        ],
        "x": 570,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "74c8d76f73804762",
        "type": "function",
        "z": "c331a93ea0d418b4",
        "name": "Meshtastic Decoder",
        "func": "// Function to check if an object is valid JSON\nfunction isValidJsonObject(obj) {\n    try {\n        JSON.stringify(obj);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n// Check if the payload is a valid JSON string or a JSON object\nif (typeof msg.payload === 'string' && isValidJsonObject(JSON.parse(msg.payload))) {\n    // Parse the JSON message if it's a string\n    msg.payload = JSON.parse(msg.payload);\n} else if (typeof msg.payload === 'object' && isValidJsonObject(msg.payload)) {\n    // Do nothing if it's already a JSON object\n} else {\n    // Ignore invalid JSON strings or objects\n    return [null, null, null, null, null];\n}\n\nlet decoded = msg.payload;\n\nlet positionMsg = null;\nlet textMsg = null;\nlet telemetryMsg = null;\nlet emptyTypeMsg = null;\nlet unknownTypeMsg = null;\n\n// Process different types of messages\nif (decoded.type === \"position\") {\n    if (decoded.payload.latitude_i !== 0 && decoded.payload.longitude_i !== 0) {\n        positionMsg = {\n            payload: {\n                type: \"position\",\n                channel: decoded.channel,\n                from: decoded.from,\n                hop_start: decoded.hop_start,\n                hops_away: decoded.hops_away,\n                id: decoded.id,\n                latitude: decoded.payload.latitude_i,\n                longitude: decoded.payload.longitude_i,\n                PDOP: decoded.payload.PDOP,\n                altitude: decoded.payload.altitude,\n                ground_track: decoded.payload.ground_track,\n                precision_bits: decoded.payload.precision_bits,\n                sats_in_view: decoded.payload.sats_in_view,\n                time: decoded.payload.time,\n                rssi: decoded.rssi,\n                snr: decoded.snr,\n                sender: decoded.sender,\n                timestamp: decoded.timestamp,\n                to: decoded.to\n            }\n        };\n    }\n} else if (decoded.type === \"text\") {\n    var chatmessage = \"\";\n    if (decoded.payload.text && decoded.payload.text.includes(\"\\u0000\")) {\n        chatmessage = \"( Unsupported text content format )\";\n    } else {\n        chatmessage = decoded.payload.text || decoded.payload;\n    }\n\n    textMsg = {\n        payload: {\n            type: \"text\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            text: chatmessage,\n            sender: decoded.sender,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else if (decoded.type === \"telemetry\") {\n    telemetryMsg = {\n        payload: {\n            type: \"telemetry\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            air_util_tx: decoded.payload.air_util_tx,\n            battery_level: decoded.payload.battery_level,\n            channel_utilization: decoded.payload.channel_utilization,\n            uptime_seconds: decoded.payload.uptime_seconds,\n            voltage: decoded.payload.voltage,\n            sender: decoded.sender,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else if (decoded.type === \"\") {\n    emptyTypeMsg = {\n        payload: {\n            type: \"\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            rssi: decoded.rssi,\n            sender: decoded.sender,\n            snr: decoded.snr,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else {\n    unknownTypeMsg = {\n        payload: {\n            type: \"unknown\",\n            raw: decoded\n        }\n    };\n}\n\nreturn [positionMsg, textMsg, telemetryMsg, emptyTypeMsg, unknownTypeMsg];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            [],
            [
                "9ebe95fbfa40c393"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "5d6d30f1d583c1aa",
        "type": "mqtt in",
        "z": "c331a93ea0d418b4",
        "name": "Subscribe meshtastic message",
        "topic": "msh/seeed/2/json/#",
        "qos": "0",
        "datatype": "json",
        "broker": "${mqtt-broker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "74c8d76f73804762"
            ]
        ]
    },
    {
        "id": "9ebe95fbfa40c393",
        "type": "function",
        "z": "c331a93ea0d418b4",
        "name": "wrap chat message",
        "func": "var chatUsername = msg.payload.from.toString(16).slice(-4);\nvar chatMessage = msg.payload.text;\n\nreturn {\n    topic: chatUsername,\n    payload: chatMessage\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cc68c7211e329ee0",
        "type": "status",
        "z": "c331a93ea0d418b4",
        "name": "",
        "scope": [
            "5d6d30f1d583c1aa"
        ],
        "x": 790,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5872a66485b62222",
        "type": "function",
        "z": "15e3d881bcd13372",
        "name": "set chat message",
        "func": "var firstLineText = env.get(\"firstLineText\");\nvar prefixText = env.get(\"prefixText\");\nvar suffixText = env.get(\"suffixText\");\n\nvar toSendMessage = '';\nvar inputMessage = msg.payload;\n\nif(firstLineText) {\n    toSendMessage += firstLineText;\n    \n    if (typeof inputMessage === 'string' && inputMessage.trim().length > 0) {\n        toSendMessage += '\\n';\n    }\n}\n\ntoSendMessage += prefixText;\ntoSendMessage += inputMessage;\ntoSendMessage += suffixText;\n\nreturn {\n    payload: {\n        // your meshtastic route id\n        \"from\": global.get('currentRouteId'),\n        \"type\": \"sendtext\",\n        \"payload\": toSendMessage\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [
                "4107e606d6030695"
            ]
        ]
    },
    {
        "id": "4107e606d6030695",
        "type": "mqtt out",
        "z": "15e3d881bcd13372",
        "name": "send a downlink message to meshtastic channel",
        "topic": "msh/seeed/2/json/mqtt/",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "${mqtt-broker}",
        "x": 540,
        "y": 80,
        "wires": []
    },
    {
        "id": "0a4a0cebe01e9bab",
        "type": "status",
        "z": "15e3d881bcd13372",
        "name": "",
        "scope": [
            "4107e606d6030695"
        ],
        "x": 550,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0a0e8259eebb401b",
        "type": "ui-template",
        "z": "6b6c5faec21326f9",
        "group": "${Group}",
        "page": "",
        "ui": "",
        "name": "chat ui",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <div class=\"chat-window\" id=\"chat\">\n    <div ref=\"chatList\" class=\"chat-content\" id=\"chat-content\">\n      <div v-for=\"(item, index) in reversedMessages\" :key=\"item.id\" class=\"value-per\"\n        :class=\"{ right: item.sender === '@You' }\">\n        <div class=\"flex\">\n          <div v-html=\"item.image\" class=\"avatar-container\"></div>\n          <div>\n            <div style=\"line-height:20px\">\n              <div>\n                <span class=\"text-caption\">{{ formatTime(item.time) }}</span>\n              </div>\n              <div>\n                <strong class=\"user-name\">{{ item.sender }}</strong>\n              </div>\n            </div>\n            <p v-html=\"item.message\" class=\"pre-wrap\"></p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        timer: null,\n      };\n    },\n    computed: {\n      reversedMessages() {\n        return Array.isArray(this.msg.payload) ? [...this.msg.payload] : [];\n      },\n    },\n    methods: {\n      formatTime(timestamp) {\n        const date = new Date(timestamp);\n        return date.toLocaleTimeString();\n      },\n      scrollToBottom(elementId) {\n        const domWrapper = document.getElementById(elementId);\n        const scrollHeight = domWrapper.scrollHeight; // 内容总高度\n        domWrapper.scrollTo(0, scrollHeight + 150);\n\n      },\n    },\n    watch: {\n      msg: {\n        handler(newVal, oldVal) {\n          if (\n            newVal.payload &&\n            newVal.payload.length > (oldVal.payload ? oldVal.payload.length : 0)\n          ) {\n            if (this.timer) clearTimeout(this.timer)\n            this.timer = setTimeout(this.scrollToBottom(\"chat\"), 500)\n          }\n        },\n        deep: true,\n        immediate: true,\n      },\n    },\n    mounted() { },\n    unmounted() {\n      // code here when the component is removed from the Dashboard\n      // i.e. when the user navigates away from the page\n    },\n  };\n</script>\n\n<style scoped>\n  .chat-window {\n    height: 600px;\n    /* Adjust as needed */\n    overflow-y: auto;\n    position: relative;\n  }\n\n  .value-per {\n    display: flex;\n    align-items: flex-start;\n    justify-content: flex-start;\n    line-height: 30px;\n    border-bottom: 1px dashed #abc;\n    padding: 10px;\n  }\n\n  .value-per.right {\n    justify-content: flex-end;\n  }\n\n  .flex {\n    display: flex;\n  }\n\n  .avatar-container {\n    width: 40px;\n    /* Adjust size as needed */\n    height: 40px;\n    /* Adjust size as needed */\n    display: flex;\n    align-items: center;\n    /* Center the avatar vertically */\n  }\n\n  .pre-wrap {\n    white-space: pre-wrap;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9da9cc49a95f1f28",
        "type": "function",
        "z": "ff55010600100002",
        "name": "Decoder",
        "func": "// Function to check if an object is valid JSON\nfunction isValidJsonObject(obj) {\n    try {\n        JSON.stringify(obj);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n// Check if the payload is a valid JSON string or a JSON object\nif (typeof msg.payload === 'string' && isValidJsonObject(JSON.parse(msg.payload))) {\n    // Parse the JSON message if it's a string\n    msg.payload = JSON.parse(msg.payload);\n} else if (typeof msg.payload === 'object' && isValidJsonObject(msg.payload)) {\n    // Do nothing if it's already a JSON object\n} else {\n    // Ignore invalid JSON strings or objects\n    return [null, null, null, null, null];\n}\n\nlet decoded = msg.payload;\n\nlet positionMsg = null;\nlet textMsg = null;\nlet telemetryMsg = null;\nlet emptyTypeMsg = null;\nlet unknownTypeMsg = null;\n\n// Process different types of messages\nif (decoded.type === \"position\") {\n    if (decoded.payload.latitude_i !== 0 && decoded.payload.longitude_i !== 0) {\n        positionMsg = {\n            payload: {\n                type: \"position\",\n                channel: decoded.channel,\n                from: decoded.from,\n                hop_start: decoded.hop_start,\n                hops_away: decoded.hops_away,\n                id: decoded.id,\n                latitude: decoded.payload.latitude_i,\n                longitude: decoded.payload.longitude_i,\n                PDOP: decoded.payload.PDOP,\n                altitude: decoded.payload.altitude,\n                ground_track: decoded.payload.ground_track,\n                precision_bits: decoded.payload.precision_bits,\n                sats_in_view: decoded.payload.sats_in_view,\n                time: decoded.payload.time,\n                rssi: decoded.rssi,\n                snr: decoded.snr,\n                sender: decoded.sender,\n                timestamp: decoded.timestamp,\n                to: decoded.to\n            }\n        };\n    }\n} else if (decoded.type === \"text\") {\n    textMsg = {\n        payload: {\n            type: \"text\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            text: decoded.payload.text,\n            sender: decoded.sender,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else if (decoded.type === \"telemetry\") {\n    telemetryMsg = {\n        payload: {\n            type: \"telemetry\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            air_util_tx: decoded.payload.air_util_tx,\n            battery_level: decoded.payload.battery_level,\n            channel_utilization: decoded.payload.channel_utilization,\n            uptime_seconds: decoded.payload.uptime_seconds,\n            voltage: decoded.payload.voltage,\n            sender: decoded.sender,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else if (decoded.type === \"\") {\n    emptyTypeMsg = {\n        payload: {\n            type: \"\",\n            channel: decoded.channel,\n            from: decoded.from,\n            hop_start: decoded.hop_start,\n            hops_away: decoded.hops_away,\n            id: decoded.id,\n            rssi: decoded.rssi,\n            sender: decoded.sender,\n            snr: decoded.snr,\n            timestamp: decoded.timestamp,\n            to: decoded.to\n        }\n    };\n} else {\n    unknownTypeMsg = {\n        payload: {\n            type: \"unknown\",\n            raw: decoded\n        }\n    };\n}\n\nreturn [positionMsg, textMsg, telemetryMsg, emptyTypeMsg, unknownTypeMsg];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "c751dff9f403c31b"
            ],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "25ae89ce94e38a1d",
        "type": "mqtt in",
        "z": "ff55010600100002",
        "name": "Subscribe meshtastic topic and receive",
        "topic": "msh/seeed/2/json/#",
        "qos": "0",
        "datatype": "json",
        "broker": "${mqtt-broker}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "9da9cc49a95f1f28"
            ]
        ]
    },
    {
        "id": "cb2302df9f3430d8",
        "type": "status",
        "z": "ff55010600100002",
        "name": "",
        "scope": null,
        "x": 660,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c751dff9f403c31b",
        "type": "function",
        "z": "ff55010600100002",
        "name": "tidy msg",
        "func": "let name = msg.payload.from;\nlet nameHex = name.toString(16);\n\nreturn {\n    topic: 'report',\n    payload: {\n        name: name,\n        nameHex: nameHex,\n        latitude: msg.payload.latitude * 0.0000001,\n        longitude: msg.payload.longitude * 0.0000001\n\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5422b6b02cff02",
        "type": "comment",
        "z": "ff55010600100002",
        "name": "On startup",
        "info": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "6842503887995176",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "g": "e5814d054eae8048",
        "name": "depend on accuracy",
        "property": "accuracy",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "low",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "medium",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "high",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2020,
        "y": 780,
        "wires": [
            [
                "09f9f99a2de46ed5"
            ],
            [
                "678f2517e5e8f360"
            ],
            [
                "b543a5489b7db3b9"
            ]
        ]
    },
    {
        "id": "b543a5489b7db3b9",
        "type": "delay",
        "z": "db0357a026e3fe9d",
        "g": "e5814d054eae8048",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2220,
        "y": 820,
        "wires": [
            [
                "0f4d7859be6d8074"
            ]
        ]
    },
    {
        "id": "678f2517e5e8f360",
        "type": "delay",
        "z": "db0357a026e3fe9d",
        "g": "e5814d054eae8048",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2220,
        "y": 780,
        "wires": [
            [
                "0f4d7859be6d8074"
            ]
        ]
    },
    {
        "id": "09f9f99a2de46ed5",
        "type": "delay",
        "z": "db0357a026e3fe9d",
        "g": "e5814d054eae8048",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2220,
        "y": 740,
        "wires": [
            [
                "0f4d7859be6d8074"
            ]
        ]
    },
    {
        "id": "0f4d7859be6d8074",
        "type": "change",
        "z": "db0357a026e3fe9d",
        "g": "e5814d054eae8048",
        "name": "unblock",
        "rules": [
            {
                "t": "set",
                "p": "object_detection_is_block",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2400,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc9810beb057ce1",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.1",
        "absolutePathDir": "",
        "x": 1110,
        "y": 60,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "8ca81b01323d0223",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "tidy message",
        "func": "var payload = msg.payload;\nvar originImg = payload.originImg;\n\nvar detectObject = env.get(\"detectObject\");\nvar detections = payload.data[detectObject];\n\n// 将 Buffer 转换为 Base64\n\nmsg.payload = {\n    imageBuffer: originImg,\n    detections: detections\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 620,
        "wires": [
            [
                "5f4428b940c5bf31",
                "8df1bae56c96b08c"
            ]
        ]
    },
    {
        "id": "5f4428b940c5bf31",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "draw box",
        "func": "const imageBuffer = msg.payload.imageBuffer;\nconst detections = msg.payload.detections;\n\n(async function processImage() {\n    try {\n        let image = sharp(imageBuffer);\n        const metadata = await image.metadata();\n\n        let svgContent = `\n            <svg width=\"${metadata.width}\" height=\"${metadata.height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        `;\n\n        detections.forEach(det => {\n            const x = det.x;\n            const y = det.y;\n            const w = det.w;\n            const h = det.h;\n            const prob = det.prob;\n\n            // Convert confidence to percentage and round to an integer\n            const probPercentage = Math.round(prob * 100);\n            const label = `people ${probPercentage}%`;\n\n            // Measure the text width dynamically\n            const textWidth = label.length * 8; // Approximate width: 8 pixels per character\n\n            // Add rectangle and text with background to SVG content\n            svgContent += `\n                <rect x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\" fill=\"none\" stroke=\"red\" stroke-width=\"2\"/>\n                <rect x=\"${x}\" y=\"${y - 20}\" width=\"${textWidth + 4}\" height=\"20\" fill=\"rgba(255, 0, 0, 0.5)\"/>\n                <text x=\"${x + 2}\" y=\"${y - 5}\" font-family=\"Arial\" font-size=\"12\" fill=\"white\">${label}</text>\n            `;\n        });\n\n        svgContent += `</svg>`;\n\n        const svgBuffer = Buffer.from(svgContent);\n\n        image = await image\n            .composite([{ input: svgBuffer, top: 0, left: 0 }])\n            .toBuffer();\n\n        const src = image.toString('base64');\n        msg.payload = src;\n        node.send(msg);\n    } catch (err) {\n        node.warn(\"Error processing image: \" + err.message);\n        msg.payload = msg.payload.image.toString('base64'); // Send original image\n        node.send(msg);\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jimp",
                "module": "jimp"
            },
            {
                "var": "sharp",
                "module": "sharp"
            }
        ],
        "x": 1800,
        "y": 620,
        "wires": [
            [
                "6842503887995176"
            ]
        ]
    },
    {
        "id": "924b7001efd94ca5",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.1",
        "absolutePathDir": "",
        "x": 1110,
        "y": 460,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "8b26f5ebb300a09e",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.1",
        "absolutePathDir": "",
        "x": 1110,
        "y": 860,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "fd67ba63b7633538",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "depend on accuracy",
        "property": "accuracy",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "low",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "medium",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "high",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 640,
        "y": 620,
        "wires": [
            [
                "6263a3b406ed611a"
            ],
            [
                "c24362c677babd77"
            ],
            [
                "bef8f3fe1877249a"
            ]
        ]
    },
    {
        "id": "1bdb545ad0c231d1",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.2",
        "absolutePathDir": "",
        "x": 1110,
        "y": 100,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "e57b7d5758a55de9",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.3",
        "absolutePathDir": "",
        "x": 1110,
        "y": 140,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "d84bc85ca0a98635",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.4",
        "absolutePathDir": "",
        "x": 1110,
        "y": 180,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "62d4683b1fc2cc06",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.5",
        "absolutePathDir": "",
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "ca3f1644744d9130",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.6",
        "absolutePathDir": "",
        "x": 1110,
        "y": 260,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "8f236a0ce7736a67",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.7",
        "absolutePathDir": "",
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "161e7e63771837c3",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.8",
        "absolutePathDir": "",
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "a79b1d0e0933bbcd",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8n",
        "threshold": "0.9",
        "absolutePathDir": "",
        "x": 1110,
        "y": 380,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "b7bfdb04c96a8c7e",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.2",
        "absolutePathDir": "",
        "x": 1110,
        "y": 500,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "7179f7629c37b417",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.3",
        "absolutePathDir": "",
        "x": 1110,
        "y": 540,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "b1ef1e51b44e0b4d",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.4",
        "absolutePathDir": "",
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "60e60dc505d059f2",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.5",
        "absolutePathDir": "",
        "x": 1110,
        "y": 620,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "7e800305f9499c3d",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.6",
        "absolutePathDir": "",
        "x": 1110,
        "y": 660,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "1cac76d5a83ba664",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.7",
        "absolutePathDir": "",
        "x": 1110,
        "y": 700,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "7baf00e00fb3d165",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.8",
        "absolutePathDir": "",
        "x": 1110,
        "y": 740,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "5e6cdd3fbf116072",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8s",
        "threshold": "0.9",
        "absolutePathDir": "",
        "x": 1110,
        "y": 780,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "9e17c4c34c7b5c44",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.2",
        "absolutePathDir": "",
        "x": 1110,
        "y": 900,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "7539db75ab464661",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.3",
        "absolutePathDir": "",
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "4d480d861e612286",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.4",
        "absolutePathDir": "",
        "x": 1110,
        "y": 980,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "17a7a5cd00355553",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.5",
        "absolutePathDir": "",
        "x": 1110,
        "y": 1020,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "acb8b71da47fa23a",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.6",
        "absolutePathDir": "",
        "x": 1110,
        "y": 1060,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "c6e89ed70aa495f0",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.7",
        "absolutePathDir": "",
        "x": 1110,
        "y": 1100,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "c95290edc8b467c0",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.8",
        "absolutePathDir": "",
        "x": 1110,
        "y": 1140,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "58e13e024d448eaa",
        "type": "good-object-detection",
        "z": "db0357a026e3fe9d",
        "name": "",
        "returnValue": "0",
        "model": "yolov8m",
        "threshold": "0.9",
        "absolutePathDir": "",
        "x": 1110,
        "y": 1180,
        "wires": [
            [
                "dc88fe07cfda2ae6"
            ]
        ]
    },
    {
        "id": "6263a3b406ed611a",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "confidence",
        "property": "confidence",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "10%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "20%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "40%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "50%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "60%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "70%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "80%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "90%",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 870,
        "y": 220,
        "wires": [
            [
                "4cc9810beb057ce1"
            ],
            [
                "1bdb545ad0c231d1"
            ],
            [
                "e57b7d5758a55de9"
            ],
            [
                "d84bc85ca0a98635"
            ],
            [
                "62d4683b1fc2cc06"
            ],
            [
                "ca3f1644744d9130"
            ],
            [
                "8f236a0ce7736a67"
            ],
            [
                "161e7e63771837c3"
            ],
            [
                "a79b1d0e0933bbcd"
            ]
        ]
    },
    {
        "id": "c24362c677babd77",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "confidence",
        "property": "confidence",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "10%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "20%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "40%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "50%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "60%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "70%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "80%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "90%",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 870,
        "y": 620,
        "wires": [
            [
                "924b7001efd94ca5"
            ],
            [
                "b7bfdb04c96a8c7e"
            ],
            [
                "7179f7629c37b417"
            ],
            [
                "b1ef1e51b44e0b4d"
            ],
            [
                "60e60dc505d059f2"
            ],
            [
                "7e800305f9499c3d"
            ],
            [
                "1cac76d5a83ba664"
            ],
            [
                "7baf00e00fb3d165"
            ],
            [
                "5e6cdd3fbf116072"
            ]
        ]
    },
    {
        "id": "bef8f3fe1877249a",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "confidence",
        "property": "confidence",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "10%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "20%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "30%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "40%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "50%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "60%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "70%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "80%",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "90%",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 870,
        "y": 1020,
        "wires": [
            [
                "8b26f5ebb300a09e"
            ],
            [
                "9e17c4c34c7b5c44"
            ],
            [
                "7539db75ab464661"
            ],
            [
                "4d480d861e612286"
            ],
            [
                "17a7a5cd00355553"
            ],
            [
                "acb8b71da47fa23a"
            ],
            [
                "c6e89ed70aa495f0"
            ],
            [
                "c95290edc8b467c0"
            ],
            [
                "58e13e024d448eaa"
            ]
        ]
    },
    {
        "id": "dc88fe07cfda2ae6",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "all-in-one",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 620,
        "wires": [
            [
                "8ca81b01323d0223"
            ]
        ]
    },
    {
        "id": "cd1b3a88fe1625f4",
        "type": "change",
        "z": "db0357a026e3fe9d",
        "name": "block",
        "rules": [
            {
                "t": "set",
                "p": "object_detection_is_block",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3f6aeb65d3e2c942",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "not block",
        "property": "object_detection_is_block",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 200,
        "y": 660,
        "wires": [
            [
                "8a351d2fe6cf41a6"
            ]
        ]
    },
    {
        "id": "6599187ffa3f22a7",
        "type": "inject",
        "z": "db0357a026e3fe9d",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "943b12013f8cb826"
            ]
        ]
    },
    {
        "id": "943b12013f8cb826",
        "type": "change",
        "z": "db0357a026e3fe9d",
        "name": "unblock",
        "rules": [
            {
                "t": "set",
                "p": "object_detection_is_block",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8a351d2fe6cf41a6",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "if base64, convert to buffer",
        "func": "if (typeof msg.payload === 'string' && msg.payload.length % 4 === 0 && /^[A-Za-z0-9+/]+[=]{0,2}$/.test(msg.payload)) {\n    try {\n        msg.payload = Buffer.from(msg.payload, 'base64');\n    } catch (e) {\n        return msg;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "fd67ba63b7633538",
                "cd1b3a88fe1625f4"
            ]
        ]
    },
    {
        "id": "112bd9434fbbd5f1",
        "type": "status",
        "z": "db0357a026e3fe9d",
        "name": "",
        "scope": null,
        "x": 1970,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "8df1bae56c96b08c",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "Change the format to a uniform format",
        "func": "const originResult = msg.payload.detections;\n\nconst handledResult = originResult.map(item => [\n  Math.round(item.x),\n  Math.round(item.y),\n  Math.round(item.w),\n  Math.round(item.h),\n  Math.round(item.prob * 100),\n  0\n]);\n\nreturn {\n    payload: handledResult\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 920,
        "wires": [
            [
                "781f8497148592e9"
            ]
        ]
    },
    {
        "id": "781f8497148592e9",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "Check if the target is detected",
        "func": "if (Array.isArray(msg.payload)) {\n    var length = msg.payload.length;\n    if (length > 1) {\n        msg.payload = 1;\n    } else if (length === 0) {\n        msg.payload = 0;\n    } else {\n        msg.payload = 1;\n    }\n} else {\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1040,
        "wires": [
            [
                "f1a60136981a081e"
            ]
        ]
    },
    {
        "id": "f1a60136981a081e",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "yes or no",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1860,
        "y": 1040,
        "wires": [
            [
                "203628dce3e52008"
            ],
            [
                "5281469c32ebaa36"
            ]
        ]
    },
    {
        "id": "203628dce3e52008",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "",
        "property": "triggerMode",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1990,
        "y": 1000,
        "wires": [
            [
                "7b1d5ceaabf82e41"
            ]
        ]
    },
    {
        "id": "5281469c32ebaa36",
        "type": "switch",
        "z": "db0357a026e3fe9d",
        "name": "",
        "property": "triggerMode",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "no",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1990,
        "y": 1080,
        "wires": [
            [
                "a1aa1633b40cbc7f"
            ]
        ]
    },
    {
        "id": "7b1d5ceaabf82e41",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "true",
        "func": "return {\n    payload: true\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "a1aa1633b40cbc7f",
        "type": "function",
        "z": "db0357a026e3fe9d",
        "name": "false",
        "func": "return {\n    payload: true\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "21d0619968752bc5",
        "type": "inject",
        "z": "a71c1f4952addcd7",
        "name": "onstartup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "fd1aa19957fe5a3e",
                "a9a81e691d68d988",
                "436dac51e46180d8",
                "d1f3ac7a166ead8d"
            ]
        ]
    },
    {
        "id": "fd1aa19957fe5a3e",
        "type": "random",
        "z": "a71c1f4952addcd7",
        "name": "Solar voltage value (placeholder)",
        "low": "8",
        "high": "13",
        "inte": "false",
        "property": "payload",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "a9a81e691d68d988",
                "e00aad24bc1ea0c0"
            ]
        ]
    },
    {
        "id": "a9a81e691d68d988",
        "type": "range",
        "z": "a71c1f4952addcd7",
        "minin": "8",
        "maxin": "13",
        "minout": "70",
        "maxout": "180",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "Power of charge",
        "x": 360,
        "y": 140,
        "wires": [
            [
                "506c2695b3dcac2a"
            ]
        ]
    },
    {
        "id": "436dac51e46180d8",
        "type": "random",
        "z": "a71c1f4952addcd7",
        "name": "Battery status",
        "low": "22",
        "high": "23",
        "inte": "false",
        "property": "payload",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "899ccd7752f11fc2"
            ]
        ]
    },
    {
        "id": "d1f3ac7a166ead8d",
        "type": "random",
        "z": "a71c1f4952addcd7",
        "name": "Battery discharge",
        "low": "73",
        "high": "73",
        "inte": "false",
        "property": "payload",
        "x": 370,
        "y": 260,
        "wires": [
            [
                "ae2892c04d73113b"
            ]
        ]
    },
    {
        "id": "e00aad24bc1ea0c0",
        "type": "change",
        "z": "a71c1f4952addcd7",
        "name": "to 2 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload * 100) / 100",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "506c2695b3dcac2a",
        "type": "change",
        "z": "a71c1f4952addcd7",
        "name": "to 2 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload * 100) / 100",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "899ccd7752f11fc2",
        "type": "change",
        "z": "a71c1f4952addcd7",
        "name": "to 2 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload * 100) / 100",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ae2892c04d73113b",
        "type": "change",
        "z": "a71c1f4952addcd7",
        "name": "to 2 decimal places",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload * 100) / 100",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "cc379f45cd70a2bb",
        "type": "function",
        "z": "61d68b31136dfa92",
        "name": "Address Converter",
        "func": "// Function to normalize the environment variables (convert to lowercase)\nfunction normalizeEnvVar(value) {\n    if (value===true || value===false){\n        return value;\n    }\n    return value ? value.toLowerCase() : \"\";\n}\n\n// Retrieve and normalize the environment variables\nvar lightColor = normalizeEnvVar(env.get(\"LIGHT_COLOR\"));\nvar lightMode = normalizeEnvVar(env.get(\"LIGHT_MODE\"));\n\nvar value = 0x00;\nvar notification = \"\";\n\n// Define the mapping\nif (lightMode === 'off') {\n    value = 0x60;\n} else if (lightColor === \"red\") {\n    if (lightMode === \"blink\") {\n        value = 0x21;\n    } else if (lightMode === \"flashing\") {\n        value = 0x31;\n    } else if (lightMode === \"on\") {\n        value = 0x11;\n    } else {\n    }\n} else if (lightColor === \"green\") {\n    if (lightMode === \"blink\") {\n        value = 0x23;\n    } else if (lightMode === \"flashing\") {\n        value = 0x33;\n    } else if (lightMode === \"on\") {\n        value = 0x13;\n    } else {\n    }\n} else if (lightColor === \"yellow\") {\n    if (lightMode === \"blink\") {\n        value = 0x22;\n    } else if (lightMode === \"flashing\") {\n        value = 0x32;\n    } else if (lightMode === \"on\") {\n        value = 0x12;\n    } else {\n    }\n} else {\n}\n\n// Convert the hexadecimal value to decimal\nvar decimalValue = value;\n\n// Set the output message\nif (notification) {\n    msg.payload = notification;\n} else {\n    msg.payload = decimalValue;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            [
                "1300fb3d05071c03"
            ]
        ]
    },
    {
        "id": "bd4190a43e4774e8",
        "type": "modbus-response",
        "z": "61d68b31136dfa92",
        "name": "",
        "registerShowMax": 20,
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "1300fb3d05071c03",
        "type": "modbus-write",
        "z": "61d68b31136dfa92",
        "name": "Light Modbus Config",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "194",
        "quantity": "1",
        "server": "${modbus-client}",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "5",
        "x": 440,
        "y": 80,
        "wires": [
            [],
            [
                "bd4190a43e4774e8"
            ]
        ]
    },
    {
        "id": "de52d590953c98c7",
        "type": "status",
        "z": "61d68b31136dfa92",
        "name": "",
        "scope": null,
        "x": 670,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1aac682eea8590eb",
        "type": "catch",
        "z": "61d68b31136dfa92",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 660,
        "y": 220,
        "wires": [
            [
                "7a63f74387974b8f"
            ]
        ]
    },
    {
        "id": "7a63f74387974b8f",
        "type": "debug",
        "z": "61d68b31136dfa92",
        "name": "rs485 light controller - control light",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "531e23630b5fa7e4",
        "type": "function",
        "z": "b8596ac29abcf525",
        "name": "set volumn",
        "func": "msg.payload = {\n    'unitid': 1,\n    'fc': 6,\n    'quantity': 1,\n    'address': 0x0006,\n    'value': env.get(\"volumn\") || 1 // 1~30\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "a4059d176b2a92a7"
            ]
        ]
    },
    {
        "id": "c2be6a5e8de4caff",
        "type": "function",
        "z": "b8596ac29abcf525",
        "name": "play sound",
        "func": "msg.payload = {\n    'unitid': 1,\n    'fc': 6,\n    'quantity': 1,\n    'address': 0x0008,\n    'value': 0x0001, // 1~30\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 420,
        "wires": [
            [
                "566fe77c7f7f9bc7"
            ]
        ]
    },
    {
        "id": "29fd66e49dac1ff8",
        "type": "function",
        "z": "b8596ac29abcf525",
        "name": "stop sound",
        "func": "msg.payload = {\n    'unitid': 1,\n    'fc': 6,\n    'quantity': 1,\n    'address': 0x0016,\n    'value': 0x0000, // 1~30\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 520,
        "wires": [
            [
                "a59287a8c1b4806c"
            ]
        ]
    },
    {
        "id": "a4059d176b2a92a7",
        "type": "modbus-flex-write",
        "z": "b8596ac29abcf525",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "${modbus-client}",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "5",
        "x": 730,
        "y": 280,
        "wires": [
            [],
            [
                "8a3c6d49b7cde4e0"
            ]
        ]
    },
    {
        "id": "8a3c6d49b7cde4e0",
        "type": "modbus-response",
        "z": "b8596ac29abcf525",
        "name": "",
        "registerShowMax": 20,
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "566fe77c7f7f9bc7",
        "type": "modbus-flex-write",
        "z": "b8596ac29abcf525",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "${modbus-client}",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "5",
        "x": 890,
        "y": 420,
        "wires": [
            [],
            [
                "e8157e7719c8cae8"
            ]
        ]
    },
    {
        "id": "e8157e7719c8cae8",
        "type": "modbus-response",
        "z": "b8596ac29abcf525",
        "name": "",
        "registerShowMax": 20,
        "x": 1110,
        "y": 420,
        "wires": []
    },
    {
        "id": "a59287a8c1b4806c",
        "type": "modbus-flex-write",
        "z": "b8596ac29abcf525",
        "name": "",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "server": "${modbus-client}",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "5",
        "x": 890,
        "y": 520,
        "wires": [
            [],
            [
                "b6b57e8a2368518e"
            ]
        ]
    },
    {
        "id": "b6b57e8a2368518e",
        "type": "modbus-response",
        "z": "b8596ac29abcf525",
        "name": "",
        "registerShowMax": 20,
        "x": 1110,
        "y": 520,
        "wires": []
    },
    {
        "id": "f25ba559326dccfb",
        "type": "switch",
        "z": "b8596ac29abcf525",
        "name": "action switch",
        "property": "action",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "play",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stop",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "c2be6a5e8de4caff"
            ],
            [
                "29fd66e49dac1ff8"
            ]
        ]
    },
    {
        "id": "7f7fc470a59b569f",
        "type": "status",
        "z": "b8596ac29abcf525",
        "name": "",
        "scope": null,
        "x": 1030,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3b5f77c1a5b86b89",
        "type": "inject",
        "z": "b8596ac29abcf525",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "531e23630b5fa7e4"
            ]
        ]
    },
    {
        "id": "fcbf6fde33ed01b2",
        "type": "catch",
        "z": "b8596ac29abcf525",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1040,
        "y": 720,
        "wires": [
            [
                "4f9ed8d5827c26af"
            ]
        ]
    },
    {
        "id": "4f9ed8d5827c26af",
        "type": "debug",
        "z": "b8596ac29abcf525",
        "name": "rs485 light controller - control sound",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 720,
        "wires": []
    },
    {
        "id": "444409c41ab5e9a4",
        "type": "modbus-response",
        "z": "f31e55153689cae9",
        "name": "",
        "registerShowMax": 20,
        "x": 690,
        "y": 120,
        "wires": []
    },
    {
        "id": "a2c3e5619cf60d6d",
        "type": "inject",
        "z": "f31e55153689cae9",
        "name": "on startup, and replay",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "893ed17c5c757939"
            ]
        ]
    },
    {
        "id": "893ed17c5c757939",
        "type": "modbus-getter",
        "z": "f31e55153689cae9",
        "name": "Query light controller status",
        "showStatusActivities": true,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "112",
        "quantity": "1",
        "server": "${modbus-client}",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 420,
        "y": 100,
        "wires": [
            [
                "1e6f02dddd31a2e7"
            ],
            [
                "444409c41ab5e9a4"
            ]
        ]
    },
    {
        "id": "1e6f02dddd31a2e7",
        "type": "function",
        "z": "f31e55153689cae9",
        "name": "decode message",
        "func": "var newMsg = {\n    topic: '',\n    payload: 0x0000\n}\n\n// Function Node to Interpret the Modbus Response\nvar buffer = msg.payload.buffer;\nvar data = buffer[0] * 256 + buffer[1]; // Combine high and low byte\n\nnewMsg.payload = data;\n\n// Interpret the value according to your device's documentation\nswitch (data) {\n    case 0x0011:\n        newMsg.topic = \"Red light solid\";\n        break;\n    case 0x0012:\n        newMsg.topic = \"Yellow light solid\";\n        break;\n    case 0x0013:\n        newMsg.topic = \"Green light solid\";\n        break;\n    case 0x0021:\n        newMsg.topic = \"Red light slow flash\";\n        break;\n    case 0x0022:\n        newMsg.topic = \"Yellow light slow flash\";\n        break;\n    case 0x0023:\n        newMsg.topic = \"Green light slow flash\";\n        break;\n    case 0x0031:\n        newMsg.topic = \"Red light fast flash\";\n        break;\n    case 0x0032:\n        newMsg.topic = \"Yellow light fast flash\";\n        break;\n    case 0x0033:\n        newMsg.topic = \"Green light fast flash\";\n        break;\n    case 0x0060:\n        newMsg.topic = \"Light off\";\n        break;\n    default:\n        newMsg.topic = \"Unknown state\";\n}\n\nnode.status({ fill: \"green\", shape: \"dot\", text: newMsg.topic });\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7bae1afd782eeb71",
        "type": "status",
        "z": "f31e55153689cae9",
        "name": "",
        "scope": [
            "893ed17c5c757939",
            "1e6f02dddd31a2e7"
        ],
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "cab6b95f08d6c398",
        "type": "catch",
        "z": "f31e55153689cae9",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 660,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "54b9a4ed0e9da2db",
        "type": "link out",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "link A",
        "mode": "link",
        "links": [
            "03c368738cc7f8f2",
            "1466bddebcba4155"
        ],
        "x": 410,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "d4685d2e3ef9a309",
        "type": "link out",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "link A",
        "mode": "link",
        "links": [
            "03c368738cc7f8f2",
            "1466bddebcba4155"
        ],
        "x": 1040,
        "y": 60,
        "wires": [],
        "l": true
    },
    {
        "id": "03c368738cc7f8f2",
        "type": "link in",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "link A",
        "links": [
            "54b9a4ed0e9da2db",
            "d4685d2e3ef9a309",
            "2649b6e22c4c7042"
        ],
        "x": 200,
        "y": 340,
        "wires": [
            [
                "15333d07b325118d"
            ]
        ],
        "l": true
    },
    {
        "id": "01b6c388adacec9b",
        "type": "comment",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "request pysscma for analyze",
        "info": "",
        "x": 240,
        "y": 280,
        "wires": []
    },
    {
        "id": "d40434e5e9fa984d",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "replay last analyze input message",
        "func": "var lastMsg = flow.get('last_analyze_input')\n\nreturn lastMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "d4685d2e3ef9a309"
            ]
        ]
    },
    {
        "id": "6e1637526d57a66b",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "storage last analyze input",
        "func": "flow.set('last_analyze_input', msg)",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": []
    },
    {
        "id": "f928057a172b6bc7",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "action to set a config to flow env",
        "func": "flow.set(msg.payload.k, msg.payload.v);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            [
                "d40434e5e9fa984d"
            ]
        ]
    },
    {
        "id": "b7006d8725379028",
        "type": "switch",
        "z": "0d921b2cdb2f47a8",
        "g": "a39f94d95dd8c901",
        "name": "config or analyze",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "f928057a172b6bc7"
            ],
            [
                "6e1637526d57a66b",
                "54b9a4ed0e9da2db"
            ]
        ]
    },
    {
        "id": "42ee150fd31ac501",
        "type": "comment",
        "z": "0d921b2cdb2f47a8",
        "g": "4cea5da7a6e042b9",
        "name": "take effect config",
        "info": "",
        "x": 200,
        "y": 440,
        "wires": []
    },
    {
        "id": "ea0c0d562f20ce77",
        "type": "delay",
        "z": "0d921b2cdb2f47a8",
        "g": "4cea5da7a6e042b9",
        "name": "limit 1 msg/1s",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 500,
        "wires": [
            [
                "ef3714d03835eed0"
            ]
        ]
    },
    {
        "id": "ef3714d03835eed0",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "4cea5da7a6e042b9",
        "name": "build default config",
        "func": "return {\n    topic: 'track_session',\n    payload: {\n        \"tracker_config\": {\n            \"track_thresh\": 0.25,\n            \"track_buffer\": 30,\n            \"match_thresh\": 0.8,\n            \"frame_rate\": 30\n        },\n        \"annotation_config\": {\n            \"resolution\": [\n                240,\n                240\n            ],\n            \"polygon\": {\n                \"thickness\": 1,\n                \"text_scale\": 0.3,\n                \"text_thickness\": 0.5,\n                \"text_padding\": 2\n            },\n            \"bounding_box\": {\n                \"thickness\": 2\n            },\n            \"tracing\": {\n                \"position\": \"CENTER\",\n                \"trace_length\": 30,\n                \"trace_thickness\": 1\n            },\n            \"labeling\": {\n                \"text_scale\": 0.3,\n                \"text_thickness\": 1,\n                \"text_padding\": 3,\n                \"text_position\": \"TOP_LEFT\",\n                \"label_map\": {\n                    \"0\": \"Person\",\n                    \"1\": \"Car\",\n                    \"2\": \"Truck\"\n                }\n            },\n            \"heatmap\": {\n                \"position\": \"BOTTOM_CENTER\",\n                \"opacity\": 0.25,\n                \"radius\": 10,\n                \"kernel_size\": 5\n            }\n        },\n        \"regions_config\": {\n            \"Region_A\": {\n                \"polygon\": [\n                    [\n                        0,\n                        0\n                    ],\n                    [\n                        240,\n                        0\n                    ],\n                    [\n                        240,\n                        160\n                    ],\n                    [\n                        0,\n                        80\n                    ]\n                ],\n                \"triggering_position\": \"CENTER\"\n            },\n            \"Region_B\": {\n                \"polygon\": [\n                    [\n                        0,\n                        80\n                    ],\n                    [\n                        240,\n                        160\n                    ],\n                    [\n                        240,\n                        240\n                    ],\n                    [\n                        0,\n                        240\n                    ]\n                ],\n                \"triggering_position\": \"CENTER\"\n            }\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 500,
        "wires": [
            [
                "cf49b87ca54fadb6"
            ]
        ]
    },
    {
        "id": "2001f5fb16131c7a",
        "type": "http request",
        "z": "0d921b2cdb2f47a8",
        "g": "4cea5da7a6e042b9",
        "name": "Request modify config",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.100.10:8000",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            },
            {
                "keyType": "other",
                "keyValue": "Session-Id",
                "valueType": "other",
                "valueValue": "72d6be56"
            }
        ],
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "cf49b87ca54fadb6",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "4cea5da7a6e042b9",
        "name": "modify pos postion config",
        "func": "var pos1 = flow.get(\"pos1\") || 0;\nvar pos2 = flow.get(\"pos2\") || 0;\n\nif (flow.get(\"vertical\")) {\n    msg.payload.regions_config.Region_A.polygon[1] = [240, 0];\n    msg.payload.regions_config.Region_A.polygon[2] = [240, pos2];\n    msg.payload.regions_config.Region_A.polygon[3] = [0, pos1];\n\n    msg.payload.regions_config.Region_B.polygon[0] = [0, pos1];\n    msg.payload.regions_config.Region_B.polygon[1] = [240, pos2];\n    msg.payload.regions_config.Region_B.polygon[3] = [0, 240];\n}\nelse {\n    msg.payload.regions_config.Region_A.polygon[1] = [pos1, 0];\n    msg.payload.regions_config.Region_A.polygon[2] = [pos2, 240];\n    msg.payload.regions_config.Region_A.polygon[3] = [0, 240];\n\n    msg.payload.regions_config.Region_B.polygon[0] = [pos1, 0];\n    msg.payload.regions_config.Region_B.polygon[1] = [240, 0];\n    msg.payload.regions_config.Region_B.polygon[3] = [pos2, 240];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "2001f5fb16131c7a"
            ]
        ]
    },
    {
        "id": "33ef77d3eac513f0",
        "type": "switch",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "Check response msg is valid",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 300,
        "wires": [
            [
                "3d954623e05cac57"
            ]
        ]
    },
    {
        "id": "3d954623e05cac57",
        "type": "json",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "format json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "4dc77c2354f525c8",
                "1c0afd68563ff258"
            ]
        ]
    },
    {
        "id": "3693cc2db6709049",
        "type": "http request",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "Request tracking analyze",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.100.10:8000/72d6be56",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 570,
        "y": 300,
        "wires": [
            [
                "33ef77d3eac513f0",
                "ea0c0d562f20ce77"
            ]
        ]
    },
    {
        "id": "15333d07b325118d",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "g": "a4b73bc8cf9a4730",
        "name": "Construct settings from flow",
        "func": "// Check if msg.payload.data exists\nif (msg.payload.data) {\n    // Initialize an empty list for annotations\n    var annotations_list = [];\n\n    // Check for various annotation types in the flow context and add them to the list\n    if (flow.get(\"polygon\"))\n        annotations_list.push(\"polygon\");\n    if (flow.get(\"heatmap\"))\n        annotations_list.push(\"heatmap\");\n    if (flow.get(\"bounding_box\"))\n        annotations_list.push(\"bounding_box\");\n    if (flow.get(\"tracing\"))\n        annotations_list.push(\"tracing\");\n    if (flow.get(\"labeling\"))\n        annotations_list.push(\"labeling\");\n\n    // Initialize the annotations array in the payload data\n    msg.payload.data.annotations = [];\n    msg.payload.data.annotations.push(annotations_list);\n\n    // Convert the payload data to a JSON string\n    msg.payload = JSON.stringify(msg.payload.data);\n} else {\n    // If msg.payload.data does not exist, set msg to null\n    msg = null;\n}\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// 部署节点后，此处添加的代码将运行一次。\n// flow.set(\"polygon\", false);\n// flow.set(\"bounding_box\", false);\n// flow.set(\"tracing\", false);\n// flow.set(\"labeling\", false);\n// flow.set(\"heatmap\", false);",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "3693cc2db6709049"
            ]
        ]
    },
    {
        "id": "4dc77c2354f525c8",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "name": "postPost",
        "func": "if (msg.payload.annotations) {\n    msg.topic = \"track\"\n    msg.payload = msg.payload.annotations[0];\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1c0afd68563ff258",
        "type": "function",
        "z": "0d921b2cdb2f47a8",
        "name": " flow statistics",
        "func": "var list_a = flow.get(\"list_a\");\nvar list_b = flow.get(\"list_b\");\n\nif (msg.payload.filtered_regions) {\n    var set_a_pre = new Set(flow.get(\"list_a\"));\n    var set_b_pre = new Set(flow.get(\"list_b\"));\n    var set_a = new Set(msg.payload.filtered_regions.Region_A);\n    var set_b = new Set(msg.payload.filtered_regions.Region_B);\n\n    var map_all = new Map();\n    for (let id of [...set_a_pre, ...set_a_pre]) {\n        if (!map_all.has(id)) {\n            map_all.set(id, 0);\n        }\n    }\n    for (let [id, misses] of map_all.entries()) {\n        if (!set_a.has(id) && !set_b.has(id)) {\n            misses += 1;\n            map_all.set(id, misses);\n            if (misses >= 10) {\n                map_all.delete(id);\n                if (set_a_pre.has(id)) set_a_pre.delete(id);\n                if (set_b_pre.has(id)) set_b_pre.delete(id);\n            }\n        } else {\n            map_all.set(id, 0); // appear, reset counter\n        }\n    }\n\n    for (let id of set_a_pre) {\n        if (!set_a.has(id) && set_b.has(id)) {\n            set_a_pre.delete(id);\n            flow.set(\"cnt_a2b\", flow.get(\"cnt_a2b\") + 1);\n            node.log(flow.get(\"cnt_a2b\"));\n        }\n    }\n\n    for (let id of set_b_pre) {\n        if (!set_b.has(id) && set_a.has(id)) {\n            set_b_pre.delete(id);\n            flow.set(\"cnt_b2a\", flow.get(\"cnt_b2a\") + 1);\n            node.log(flow.get(\"cnt_b2a\"));\n        }\n    }\n\n    msg.payload.filtered_regions.Region_A.forEach(set_a_pre.add, set_a_pre);\n    msg.payload.filtered_regions.Region_B.forEach(set_b_pre.add, set_b_pre);\n    // set_a_pre.add(msg.payload.filtered_regions.Region_A.slice());\n    // set_b_pre.add(msg.payload.filtered_regions.Region_B.slice());\n    flow.set(\"list_a\", [...set_a_pre]);\n    flow.set(\"list_b\", [...set_b_pre]);\n    // flow.set(\"list_a\", msg.payload.filtered_regions.Region_A.slice());\n    // flow.set(\"list_b\", msg.payload.filtered_regions.Region_B.slice());\n\n    return [{ payload: flow.get(\"cnt_a2b\") }, { payload: flow.get(\"cnt_b2a\") }];\n} else {\n    return [null, null];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1466bddebcba4155",
        "type": "link in",
        "z": "0d921b2cdb2f47a8",
        "name": "link A",
        "links": [
            "54b9a4ed0e9da2db",
            "d4685d2e3ef9a309"
        ],
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "9fca247ed3844e4a"
            ]
        ],
        "l": true
    },
    {
        "id": "9fca247ed3844e4a",
        "type": "msg-speed",
        "z": "0d921b2cdb2f47a8",
        "name": "",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 1390,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "eba60b2edc9f1677",
        "type": "status",
        "z": "0d921b2cdb2f47a8",
        "name": "",
        "scope": [
            "9fca247ed3844e4a"
        ],
        "x": 1420,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4b0eee312fed3a38",
        "type": "http request",
        "z": "a6ec996dc8d4208d",
        "name": "ASR API Request",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://host.docker.internal:9000/asr?encode=true&task=translate&language=en&word_timestamps=false&output=txt",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "multipart/form-data"
            },
            {
                "keyType": "Accept",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 1550,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "16aa2489d166706b",
        "type": "change",
        "z": "a6ec996dc8d4208d",
        "name": "Set payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{     \"audio_file\": {         \"value\": msg.payload,         \"options\": {             \"filename\": \"temp.wav\",             \"contentType\": \"audio/wav\"         }     } }",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "4b0eee312fed3a38"
            ]
        ]
    },
    {
        "id": "c80b6a0988e6d049",
        "type": "http in",
        "z": "a6ec996dc8d4208d",
        "name": "",
        "url": "/v2/watcher/talk/audio_stream",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "344e40e7a732a989",
                "22818511d293cc9d"
            ]
        ]
    },
    {
        "id": "42e46d7e709e99e9",
        "type": "file",
        "z": "a6ec996dc8d4208d",
        "name": "",
        "filename": "/tmp/stt/audio_stream.wav",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "binary",
        "x": 1020,
        "y": 400,
        "wires": [
            [
                "16aa2489d166706b"
            ]
        ]
    },
    {
        "id": "344e40e7a732a989",
        "type": "function",
        "z": "a6ec996dc8d4208d",
        "name": "Create WAV Header",
        "func": "const numChannels = 1; // 单声道\nconst sampleRate = 16000; // 采样率\nconst bitsPerSample = 16; // 每个样本的位数\nconst byteRate = sampleRate * numChannels * bitsPerSample / 8;\nconst blockAlign = numChannels * bitsPerSample / 8;\nconst dataSize = msg.payload.length;\n\n// 创建 WAV 文件头部\nconst header = Buffer.alloc(44);\nheader.write('RIFF', 0); // ChunkID\nheader.writeUInt32LE(36 + dataSize, 4); // ChunkSize\nheader.write('WAVE', 8); // Format\nheader.write('fmt ', 12); // Subchunk1ID\nheader.writeUInt32LE(16, 16); // Subchunk1Size\nheader.writeUInt16LE(1, 20); // AudioFormat (1 = PCM)\nheader.writeUInt16LE(numChannels, 22); // NumChannels\nheader.writeUInt32LE(sampleRate, 24); // SampleRate\nheader.writeUInt32LE(byteRate, 28); // ByteRate\nheader.writeUInt16LE(blockAlign, 32); // BlockAlign\nheader.writeUInt16LE(bitsPerSample, 34); // BitsPerSample\nheader.write('data', 36); // Subchunk2ID\nheader.writeUInt32LE(dataSize, 40); // Subchunk2Size\n\n// 合并头部和音频数据\nmsg.payload = Buffer.concat([header, msg.payload]);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "42e46d7e709e99e9"
            ]
        ]
    },
    {
        "id": "22818511d293cc9d",
        "type": "function",
        "z": "a6ec996dc8d4208d",
        "name": "Build JSON Response",
        "func": "// 获取环境变量的值\nconst screenText = env.get(\"RSP_TEXT\");\n\n// 构建包含音频和 JSON 的响应\nconst jsonResponse = {\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\": {\n        \"mode\": 0,\n        \"duration\": 1000,\n        \"screen_text\": screenText, // 使用环境变量的值\n        \"stt_result\": \"\",\n        \"task_summary\": {}\n    }\n};\n\n// 将 JSON 转换为 Buffer\nconst jsonBuffer = Buffer.from(JSON.stringify(jsonResponse), 'utf8');\n\n// 特殊分隔符\nconst boundary = Buffer.from('\\n---sensecraftboundary---\\n', 'utf8');\n\n// 将 JSON Buffer 和分隔符存储在 msg 中，以便在文件读取完成后使用\nmsg.jsonBuffer = jsonBuffer;\nmsg.boundary = boundary;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 560,
        "wires": [
            [
                "da1cd537d1a56cc9"
            ]
        ]
    },
    {
        "id": "da1cd537d1a56cc9",
        "type": "function",
        "z": "a6ec996dc8d4208d",
        "name": "Check RSP_AUDIO",
        "func": "const rspAudio = env.get(\"RSP_AUDIO\");\nif (rspAudio) {\n    msg.payload.filename = rspAudio;\n    return [msg, null];\n} else {\n    // Generate silent audio\n    const sampleRate = 16000;\n    const toneDuration = 0.2; // 0.2 second per tone\n    const silenceDuration = 0.1; // 0.1 second of silence between tones\n    const frequency = 440; // A4 note\n    const amplitude = 20000; // Reduced amplitude for 16-bit audio\n\n    const toneSamples = sampleRate * toneDuration;\n    const silenceSamples = sampleRate * silenceDuration;\n    const numTones = 3;\n    const numSamples = numTones * (toneSamples + silenceSamples) - silenceSamples;\n\n    let buffer = Buffer.alloc(numSamples * 2); // 16-bit mono\n\n    // Function to apply Hanning window\n    function hanningWindow(index, totalSamples) {\n        return 0.5 * (1 - Math.cos((2 * Math.PI * index) / (totalSamples - 1)));\n    }\n\n    for (let t = 0; t < numTones; t++) {\n        for (let i = 0; i < toneSamples; i++) {\n            let sampleIndex = t * (toneSamples + silenceSamples) + i;\n            let window = hanningWindow(i, toneSamples);\n            let sample = amplitude * window * Math.sin(2 * Math.PI * frequency * (i / sampleRate));\n            buffer.writeInt16LE(sample, sampleIndex * 2);\n        }\n    }\n\n    msg.payload = buffer;\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            [
                "7c6ac802862984ea"
            ],
            [
                "88564f7ca71a3616"
            ]
        ]
    },
    {
        "id": "7c6ac802862984ea",
        "type": "file in",
        "z": "a6ec996dc8d4208d",
        "name": "Read Audio File",
        "filename": "payload.filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "88564f7ca71a3616"
            ]
        ]
    },
    {
        "id": "88564f7ca71a3616",
        "type": "function",
        "z": "a6ec996dc8d4208d",
        "name": "Combine JSON and Audio",
        "func": "// 读取音频文件内容\nconst audioBuffer = msg.payload;\n\n// 从 msg 中获取之前存储的 JSON Buffer 和分隔符\nconst jsonBuffer = msg.jsonBuffer;\nconst boundary = msg.boundary;\n\n// 生成 HTTP 响应\nmsg.payload = Buffer.concat([jsonBuffer, boundary, audioBuffer]);\nmsg.headers = { 'Content-Type': 'application/octet-stream' };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 580,
        "wires": [
            [
                "3e356d31b1124846"
            ]
        ]
    },
    {
        "id": "3e356d31b1124846",
        "type": "http response",
        "z": "a6ec996dc8d4208d",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1800,
        "y": 580,
        "wires": []
    },
    {
        "id": "5a75c9e05d170858",
        "type": "http in",
        "z": "336d4af7487f2429",
        "name": "",
        "url": "/v2/watcher/talk/view_task_detail",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "8ef38b1bc19a1c21"
            ]
        ]
    },
    {
        "id": "bb5684af2454b9d8",
        "type": "http response",
        "z": "336d4af7487f2429",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1180,
        "y": 660,
        "wires": []
    },
    {
        "id": "fd41a18cc0ba3963",
        "type": "http in",
        "z": "336d4af7487f2429",
        "name": "",
        "url": "/v1/watcher/vision",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 940,
        "wires": [
            [
                "5e72fad9417a86ce"
            ]
        ]
    },
    {
        "id": "5e72fad9417a86ce",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Parse Image",
        "func": "// 解析请求参数\nlet payload = msg.payload;\nlet imgBase64 = payload.img;\n\n// 将 Base64 编码的图像存储到 msg.payload\nmsg.payload = imgBase64;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 940,
        "wires": [
            [
                "511a11e641b282fd"
            ]
        ]
    },
    {
        "id": "bd55cc75279cd3fe",
        "type": "http response",
        "z": "336d4af7487f2429",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1140,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8ef38b1bc19a1c21",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Process Model Content",
        "func": "let silence_duration = parseInt(env.get(\"PIC_DURATION\"), 10);\nsilence_duration = Math.max(silence_duration, 1);\n\nlet model_content = {};\nlet conditions = [];\n\n\nmsg.payload = {\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\": {\n        \"tl\": {\n            \"tlid\": 1723771099517,\n            \"ctd\": 1723771099517,\n            \"tn\": \"watcher push to talk\",\n            \"type\": 3,\n            \"task_flow\": [\n                {\n                    \"id\": 60516737,\n                    \"type\": \"ai camera\",\n                    \"type_id\": 0,\n                    \"index\": 0,\n                    \"vision\": \"0.0.1\",\n                    \"params\": {\n                        \"model_type\": 0,\n                        \"model\": {}, // 使用读取到的model字段内容或默认值\n                        \"modes\": 1,\n                        \"conditions\": conditions,\n                        \"conditions_combo\": 0,\n                        \"silent_period\": {\n                            \"time_period\": {\n                                \"repeat\": [\n                                    1,\n                                    1,\n                                    1,\n                                    1,\n                                    1,\n                                    1,\n                                    1\n                                ],\n                                \"time_start\": \"00:00:00\",\n                                \"time_end\": \"23:59:59\"\n                            },\n                            \"silence_duration\": silence_duration\n                        },\n                        \"output_type\": 1,\n                        \"shutter\": 0\n                    },\n                    \"wires\": [\n                        [\n                            1582908678\n                        ]\n                    ]\n                },\n                {\n                    \"id\": 1582908678,\n                    \"type\": \"image analyzer\",\n                    \"type_id\": 3,\n                    \"index\": 1,\n                    \"version\": \"0.0.1\",\n                    \"params\": {\n                        \"url\": \"\",\n                        \"header\": \"\",\n                        \"body\": {\n                            \"prompt\": \"\",\n                            \"type\": 1,\n                            \"audio_txt\": \"\"\n                        }\n                    },\n                    \"wires\": []\n                }\n            ]\n        }\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 660,
        "wires": [
            [
                "bb5684af2454b9d8",
                "54c1dcecc2df8230"
            ]
        ]
    },
    {
        "id": "511a11e641b282fd",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Build Response",
        "func": "let image = msg.payload;\n\nmsg.payload = {\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\": {\n        \"state\": 0,// 0 不告警;1 告警\n        \"audio\": \"\",\n        \"img\": \"\",\n        \"res\": \"\"\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1000,
        "wires": [
            [
                "bd55cc75279cd3fe"
            ]
        ]
    },
    {
        "id": "2a63eacac06cf3b7",
        "type": "http in",
        "z": "336d4af7487f2429",
        "name": "",
        "url": "/v2/watcher/talk/audio_stream",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 500,
        "y": 420,
        "wires": [
            [
                "2b00ec4943d93347"
            ]
        ]
    },
    {
        "id": "2b00ec4943d93347",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Build JSON Response",
        "func": "// 获取环境变量的值\nconst screenText = env.get(\"RSP_TEXT\");\n\n// 构建包含音频和 JSON 的响应\nconst jsonResponse = {\n    \"code\": 200,\n    \"msg\": \"\",\n    \"data\": {\n        \"mode\": 2,\n        \"duration\": 1000,\n        \"screen_text\": screenText, // 使用环境变量的值\n        \"stt_result\": \"\",\n        \"task_summary\": {}\n    }\n};\n\n// 将 JSON 转换为 Buffer\nconst jsonBuffer = Buffer.from(JSON.stringify(jsonResponse), 'utf8');\n\n// 特殊分隔符\nconst boundary = Buffer.from('\\n---sensecraftboundary---\\n', 'utf8');\n\n// 将 JSON Buffer 和分隔符存储在 msg 中，以便在文件读取完成后使用\nmsg.jsonBuffer = jsonBuffer;\nmsg.boundary = boundary;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 420,
        "wires": [
            [
                "98098bcbc41b57bb"
            ]
        ]
    },
    {
        "id": "98098bcbc41b57bb",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Check RSP_AUDIO",
        "func": "const rspAudio = env.get(\"RSP_AUDIO\");\nif (rspAudio) {\n    msg.payload.filename = rspAudio;\n    return [msg, null];\n} else {\n    // Generate silent audio\n    const sampleRate = 16000;\n    const toneDuration = 0.2; // 0.2 second per tone\n    const silenceDuration = 0.1; // 0.1 second of silence between tones\n    const frequency = 440; // A4 note\n    const amplitude = 20000; // Reduced amplitude for 16-bit audio\n\n    const toneSamples = sampleRate * toneDuration;\n    const silenceSamples = sampleRate * silenceDuration;\n    const numTones = 3;\n    const numSamples = numTones * (toneSamples + silenceSamples) - silenceSamples;\n\n    let buffer = Buffer.alloc(numSamples * 2); // 16-bit mono\n\n    // Function to apply Hanning window\n    function hanningWindow(index, totalSamples) {\n        return 0.5 * (1 - Math.cos((2 * Math.PI * index) / (totalSamples - 1)));\n    }\n\n    for (let t = 0; t < numTones; t++) {\n        for (let i = 0; i < toneSamples; i++) {\n            let sampleIndex = t * (toneSamples + silenceSamples) + i;\n            let window = hanningWindow(i, toneSamples);\n            let sample = amplitude * window * Math.sin(2 * Math.PI * frequency * (i / sampleRate));\n            buffer.writeInt16LE(sample, sampleIndex * 2);\n        }\n    }\n\n    msg.payload = buffer;\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 420,
        "wires": [
            [
                "a31c863abcdce1fa"
            ],
            [
                "1277fe454dd02788"
            ]
        ]
    },
    {
        "id": "a31c863abcdce1fa",
        "type": "file in",
        "z": "336d4af7487f2429",
        "name": "Read Audio File",
        "filename": "payload.filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1300,
        "y": 360,
        "wires": [
            [
                "1277fe454dd02788"
            ]
        ]
    },
    {
        "id": "1277fe454dd02788",
        "type": "function",
        "z": "336d4af7487f2429",
        "name": "Combine JSON and Audio",
        "func": "// 读取音频文件内容\nconst audioBuffer = msg.payload;\n\n// 从 msg 中获取之前存储的 JSON Buffer 和分隔符\nconst jsonBuffer = msg.jsonBuffer;\nconst boundary = msg.boundary;\n\n// 生成 HTTP 响应\nmsg.payload = Buffer.concat([jsonBuffer, boundary, audioBuffer]);\nmsg.headers = { 'Content-Type': 'application/octet-stream' };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 420,
        "wires": [
            [
                "7fd4d8d4464768da"
            ]
        ]
    },
    {
        "id": "7fd4d8d4464768da",
        "type": "http response",
        "z": "336d4af7487f2429",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1840,
        "y": 420,
        "wires": []
    },
    {
        "id": "54c1dcecc2df8230",
        "type": "debug",
        "z": "336d4af7487f2429",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 580,
        "wires": []
    },
    {
        "id": "684df14293772fea",
        "type": "function",
        "z": "c1b434e7ff15727e",
        "name": "Check if the target is detected",
        "func": "if (Array.isArray(msg.payload)) {\n    var length = msg.payload.length;\n    if (length > 1) {\n        msg.payload = 1;\n    } else if (length === 0) {\n        msg.payload = 0;\n    } else {\n        msg.payload = 1;\n    }\n} else {\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "e5661c67a0e2a2fd"
            ]
        ]
    },
    {
        "id": "e5661c67a0e2a2fd",
        "type": "switch",
        "z": "c1b434e7ff15727e",
        "name": "yes or no",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5988c82904bef598",
        "type": "ui-led",
        "z": "0c809b82525ab765",
        "g": "c28dc59ceae9c32d",
        "name": "",
        "group": "ee7258bda6d1e1eb",
        "order": 1,
        "width": "5",
        "height": "1",
        "label": "Electronic fence status: ",
        "labelPlacement": "left",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "true",
                "valueType": "bool",
                "color": "#ff0000"
            },
            {
                "value": "false",
                "valueType": "bool",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "4ac8240eb50406b5",
        "type": "inject",
        "z": "0c809b82525ab765",
        "g": "98c40f424a9c44e2",
        "name": "on startup",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "62700aef3ed0781b"
            ]
        ]
    },
    {
        "id": "9db4c2e9d0a9ec58",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "v0.0.1",
        "info": "",
        "x": 430,
        "y": 1280,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "c3b1a5da5f43d713",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "53583def5a2df0c8",
        "name": "v0.0.2",
        "info": "",
        "x": 730,
        "y": 640,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "bb3471a7f85fb434",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "v0.0.2",
        "info": "",
        "x": 750,
        "y": 220,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "551908b4f634e351",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "More References solution",
        "info": "",
        "x": 150,
        "y": 740,
        "wires": []
    },
    {
        "id": "f353fb9f47e745d7",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "53583def5a2df0c8",
        "name": "Geofence Area",
        "info": "",
        "x": 120,
        "y": 320,
        "wires": []
    },
    {
        "id": "c343e6092a6dbe7c",
        "type": "comment",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "Digital Twin Area",
        "info": "",
        "x": 120,
        "y": 60,
        "wires": []
    },
    {
        "id": "8717ef571bd0c94b",
        "type": "subflow:c4c69de5166fafdd",
        "z": "0c809b82525ab765",
        "g": "519ba749ee53d39b",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "5c4a9eb8bcc506ec",
                "type": "conf-type"
            },
            {
                "name": "zoom",
                "value": "12",
                "type": "str"
            },
            {
                "name": "useOfflineMap",
                "value": "true",
                "type": "bool"
            },
            {
                "name": "offlineMapZoom",
                "value": "8",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "b18ad46558af0da4",
        "type": "subflow:864d0ea09f268ade",
        "z": "0c809b82525ab765",
        "g": "98c40f424a9c44e2",
        "name": "",
        "x": 560,
        "y": 600,
        "wires": []
    },
    {
        "id": "20ea6d9dd442b76f",
        "type": "subflow:a71c1f4952addcd7",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "4d962a89b81eb87a"
            ],
            [
                "995c84e705c42f95"
            ],
            [
                "f8e3221e1e80cbfe"
            ],
            [
                "645dfed0a903142d"
            ]
        ]
    },
    {
        "id": "ba5793fde63da3de",
        "type": "subflow:38e9748a918c1e10",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "25731624943ab460"
            ]
        ]
    },
    {
        "id": "424b8ba73055c5fd",
        "type": "subflow:f11a6acbc82d2c5c",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "temperature",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "humidity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "windSpeed",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "precipitation",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "vegetationDensity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fuelMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "soilMoisture",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 140,
        "y": 920,
        "wires": [
            [
                "01dc38762911d137"
            ]
        ]
    },
    {
        "id": "195f5a9cdc829090",
        "type": "subflow:f11a6acbc82d2c5c",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "temperature",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "windSpeed",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "precipitation",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "vegetationDensity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fuelMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "soilMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fireRisk",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 140,
        "y": 860,
        "wires": [
            [
                "1b8318210eb474c7"
            ]
        ]
    },
    {
        "id": "79bf31c1444fcbe6",
        "type": "subflow:f11a6acbc82d2c5c",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "humidity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "windSpeed",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "precipitation",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "vegetationDensity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fuelMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "soilMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fireRisk",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 140,
        "y": 800,
        "wires": [
            [
                "c10a21c1b22ffdab"
            ]
        ]
    },
    {
        "id": "1146255d1badf7fc",
        "type": "subflow:8e71ad1d725a1c4b",
        "z": "0c809b82525ab765",
        "g": "c28dc59ceae9c32d",
        "name": "",
        "x": 520,
        "y": 500,
        "wires": [
            [
                "5988c82904bef598"
            ]
        ]
    },
    {
        "id": "c843e5d7ef9ff5ae",
        "type": "subflow:ff55010600100002",
        "z": "0c809b82525ab765",
        "g": "c28dc59ceae9c32d",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "MQTT Broker",
                "value": "",
                "type": "str"
            }
        ],
        "x": 230,
        "y": 500,
        "wires": [
            [
                "1146255d1badf7fc"
            ]
        ]
    },
    {
        "id": "01dc38762911d137",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Fire factor",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Fire factor",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "%",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "40%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "5%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 10,
                "type": "str"
            }
        ],
        "x": 420,
        "y": 920,
        "wires": []
    },
    {
        "id": "25731624943ab460",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Seismic factor",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Seismic factor",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "%",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "40%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "27%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 9,
                "type": "str"
            }
        ],
        "x": 400,
        "y": 980,
        "wires": []
    },
    {
        "id": "645dfed0a903142d",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Battery discharge",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Battery discharge",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "W",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "70%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "71%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 4,
                "type": "str"
            }
        ],
        "x": 390,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f8e3221e1e80cbfe",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Battery status",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Battery status",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "%",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "70%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "49%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 7,
                "type": "str"
            }
        ],
        "x": 400,
        "y": 1160,
        "wires": []
    },
    {
        "id": "4d962a89b81eb87a",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Solar voltage",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Solar voltage",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "V",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "70%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "5%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 3,
                "type": "str"
            }
        ],
        "x": 410,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1b8318210eb474c7",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Humidity",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Humidity",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "40%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "71%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 11,
                "type": "str"
            }
        ],
        "x": 420,
        "y": 860,
        "wires": []
    },
    {
        "id": "c10a21c1b22ffdab",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Temperature",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Temperature",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "40%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "49%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 5,
                "type": "str"
            }
        ],
        "x": 410,
        "y": 800,
        "wires": []
    },
    {
        "id": "995c84e705c42f95",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "403fd0931430b1ba",
        "name": "Power of charge",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Power of charge",
                "type": "str"
            },
            {
                "name": "card_unit",
                "value": "W",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "70%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "27%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 6,
                "type": "str"
            }
        ],
        "x": 400,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c0aa7556530111a0",
        "type": "subflow:c64ffede4f1f69bd",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "Width",
                "value": "6",
                "type": "num"
            },
            {
                "name": "Height",
                "value": "5",
                "type": "num"
            },
            {
                "name": "imageSelector",
                "value": "file",
                "type": "str"
            },
            {
                "name": "imagePath",
                "value": "default_background.jpg",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "33ba69f8c29db322",
        "type": "subflow:ff55010600100002",
        "z": "0c809b82525ab765",
        "g": "519ba749ee53d39b",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "MQTT Broker",
                "value": "",
                "type": "str"
            }
        ],
        "x": 230,
        "y": 400,
        "wires": [
            [
                "8717ef571bd0c94b"
            ]
        ]
    },
    {
        "id": "84ae227288e9adad",
        "type": "subflow:e0d523198c47fac8",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 200,
        "y": 160,
        "wires": [
            [
                "20231490b3c12cec"
            ]
        ]
    },
    {
        "id": "20231490b3c12cec",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "digital twin data card - ultrasonic",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_unit",
                "value": "m",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "10%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "5%",
                "type": "str"
            },
            {
                "name": "UI Group",
                "value": "",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 2,
                "type": "str"
            }
        ],
        "x": 520,
        "y": 160,
        "wires": []
    },
    {
        "id": "2daa1918dc47a50f",
        "type": "subflow:c25ee8e3cadf74f6",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "digital twin data card - tripwire",
        "env": [
            {
                "name": "Group",
                "value": "8a67b5077a1657c0",
                "type": "conf-type"
            },
            {
                "name": "card_name",
                "value": "Tripwire",
                "type": "str"
            },
            {
                "name": "card_position_y",
                "value": "10%",
                "type": "str"
            },
            {
                "name": "card_position_x",
                "value": "27%",
                "type": "str"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": 8,
                "type": "str"
            }
        ],
        "x": 530,
        "y": 220,
        "wires": []
    },
    {
        "id": "73051e495187766b",
        "type": "subflow:fdfd26c77e5e2a42",
        "z": "0c809b82525ab765",
        "g": "b860a2396af6a58d",
        "name": "",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 200,
        "y": 220,
        "wires": [
            [
                "2daa1918dc47a50f"
            ]
        ]
    },
    {
        "id": "62700aef3ed0781b",
        "type": "ui-button",
        "z": "0c809b82525ab765",
        "g": "98c40f424a9c44e2",
        "group": "ee7258bda6d1e1eb",
        "name": "",
        "label": "Clear Geofence",
        "order": 2,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 360,
        "y": 600,
        "wires": [
            [
                "b18ad46558af0da4"
            ]
        ]
    },
    {
        "id": "89dae88b645185bd",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "v0.0.1",
        "info": "",
        "x": 610,
        "y": 920,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "f41bcc40229d88f3",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "name": "v0.0.1",
        "info": "",
        "x": 1150,
        "y": 420,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "7d6faec91cd41eb5",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "v0.0.1",
        "info": "",
        "x": 750,
        "y": 400,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "b2c277b5e5f0d381",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "b980ede9e4e6e0a1",
        "name": "v0.0.1",
        "info": "",
        "x": 550,
        "y": 160,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "aaf481974a57e1e8",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "name": "water level guage and chart",
        "info": "",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "963e2bb44b0d624e",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "b980ede9e4e6e0a1",
        "name": "introduction",
        "info": "",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "050b71b9be932811",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "alert message - tripwire and ultrasonic",
        "info": "",
        "x": 190,
        "y": 260,
        "wires": []
    },
    {
        "id": "a15bfa0a610171ec",
        "type": "comment",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "fire and seismic factor",
        "info": "",
        "x": 140,
        "y": 500,
        "wires": []
    },
    {
        "id": "379a0aaa5767e20c",
        "type": "template",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "Set alert message",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert!! The water level is about to exceed the limit",
        "output": "str",
        "x": 490,
        "y": 380,
        "wires": [
            [
                "f49129326bef6f16"
            ]
        ]
    },
    {
        "id": "cff700f5f73faa68",
        "type": "template",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "Set alert message",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Alert!! The trip wire set off",
        "output": "str",
        "x": 490,
        "y": 320,
        "wires": [
            [
                "f49129326bef6f16"
            ]
        ]
    },
    {
        "id": "aa4f3537143069d7",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - total",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 160,
        "y": 880,
        "wires": [
            [
                "a102e5a6ff2b3083"
            ]
        ]
    },
    {
        "id": "d48e7fe06e1554d5",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - surface water flow",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 200,
        "y": 840,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "6e29624efc573235",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - terrain change",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 190,
        "y": 800,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "59563b7dd998cfa6",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - slope",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 160,
        "y": 760,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "2d6367f378c0e452",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - fault activity",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 180,
        "y": 720,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "5c265efcb4ae662a",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - rock type",
        "env": [
            {
                "name": "rainfall",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 170,
        "y": 680,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "accc8527ff15d5cf",
        "type": "subflow:38e9748a918c1e10",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "geological sensor - rainfall",
        "env": [
            {
                "name": "rockType",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "faultActivity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "slope",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "terrainChange",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "surfaceWaterFlow",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "total",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 160,
        "y": 640,
        "wires": [
            [
                "7e2cb081415ff48a"
            ]
        ]
    },
    {
        "id": "f49129326bef6f16",
        "type": "ui-notification",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "ui": "2a6c6f3f0d1de049",
        "position": "top center",
        "colorDefault": true,
        "color": "#f50a0a",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": false,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "Alarm Message ui",
        "x": 710,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "74b1a10d56999ee0",
        "type": "ui-gauge",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "name": "Water Level",
        "group": "aaef1ae98f9e5ac7",
        "order": 1,
        "width": "19",
        "height": "1",
        "gtype": "gauge-tile",
        "gstyle": "needle",
        "title": "Water level",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "2",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1130,
        "y": 320,
        "wires": []
    },
    {
        "id": "9bc0ffab86826e62",
        "type": "ui-text",
        "z": "7ea6938ae37cbe94",
        "g": "b980ede9e4e6e0a1",
        "group": "fa596d99836a105b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Text Introduciton dashboard ui",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "d51874c22a88bcf0",
        "type": "inject",
        "z": "7ea6938ae37cbe94",
        "g": "b980ede9e4e6e0a1",
        "name": "Here is an introduction.",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "Here is an introduction.",
        "payloadType": "str",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "9bc0ffab86826e62"
            ]
        ]
    },
    {
        "id": "611b6e7781b9c234",
        "type": "ui-chart",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "group": "aaef1ae98f9e5ac7",
        "name": "Water Data",
        "label": "Water_data",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "yAxisLabel": "Water Level (m)",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "60",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "0",
        "height": "0",
        "className": "",
        "x": 1130,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a102e5a6ff2b3083",
        "type": "ui-gauge",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "Seismic factor",
        "group": "ae209b4f406aab66",
        "order": 2,
        "width": "6",
        "height": "6",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Seismic factor",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "80",
                "color": "#ffc800"
            },
            {
                "from": "100",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 580,
        "y": 880,
        "wires": []
    },
    {
        "id": "cda70a2a5aa2c560",
        "type": "ui-gauge",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "Fire factor",
        "group": "ae209b4f406aab66",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "gauge-34",
        "gstyle": "rounded",
        "title": "Fire factor",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "80",
                "color": "#ffc800"
            },
            {
                "from": "100",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 600,
        "y": 600,
        "wires": []
    },
    {
        "id": "7e2cb081415ff48a",
        "type": "ui-chart",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "group": "ae209b4f406aab66",
        "name": "Geohazard factor data source",
        "label": "地质灾害因子数据源",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "200",
        "colors": [
            "#1f77b4",
            "#abbace",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "6",
        "className": "",
        "x": 530,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "8a526b623bbf27c6",
        "type": "ui-chart",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "group": "ae209b4f406aab66",
        "name": "Fire factor data source",
        "label": "火灾因子数据源",
        "order": 4,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "200",
        "colors": [
            "#1f77b4",
            "#abbace",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "6",
        "className": "",
        "x": 560,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cc8e83e89534a08f",
        "type": "subflow:e0d523198c47fac8",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "ultrasonic",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 120,
        "y": 380,
        "wires": [
            [
                "4a616b5089116eae"
            ]
        ]
    },
    {
        "id": "4a616b5089116eae",
        "type": "switch",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "If =1 match, then ...",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 380,
        "wires": [
            [
                "379a0aaa5767e20c"
            ]
        ]
    },
    {
        "id": "d00dd35e25666b41",
        "type": "subflow:fdfd26c77e5e2a42",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "tripwire",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 110,
        "y": 320,
        "wires": [
            [
                "ea74dfdadcfbe09a"
            ]
        ]
    },
    {
        "id": "ea74dfdadcfbe09a",
        "type": "switch",
        "z": "7ea6938ae37cbe94",
        "g": "78ead2245c9ecb8e",
        "name": "If =1 match, then ...",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 320,
        "wires": [
            [
                "cff700f5f73faa68"
            ]
        ]
    },
    {
        "id": "e378acb9cb9e0b3d",
        "type": "subflow:e0d523198c47fac8",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "name": "ultrasonic",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 960,
        "y": 320,
        "wires": [
            [
                "74b1a10d56999ee0"
            ]
        ]
    },
    {
        "id": "38a0bd82eea44c01",
        "type": "subflow:e0d523198c47fac8",
        "z": "7ea6938ae37cbe94",
        "g": "b304e5ad0409a34b",
        "name": "ultrasonic",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "611b6e7781b9c234"
            ]
        ]
    },
    {
        "id": "6243e7f95a3c1843",
        "type": "subflow:f11a6acbc82d2c5c",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "7in1 weather station - 7 channels",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "_ADD_",
                "type": "conf-type"
            },
            {
                "name": "fireRisk",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 180,
        "y": 560,
        "wires": [
            [
                "8a526b623bbf27c6"
            ]
        ]
    },
    {
        "id": "979eea87e1ae3f87",
        "type": "subflow:f11a6acbc82d2c5c",
        "z": "7ea6938ae37cbe94",
        "g": "239ef0f0af9891c0",
        "name": "7in1 weather station - fire factor",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "_ADD_",
                "type": "conf-type"
            },
            {
                "name": "temperature",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "humidity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "windSpeed",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "precipitation",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "vegetationDensity",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "fuelMoisture",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "soilMoisture",
                "type": "bool",
                "value": "false"
            }
        ],
        "x": 180,
        "y": 600,
        "wires": [
            [
                "cda70a2a5aa2c560"
            ]
        ]
    },
    {
        "id": "1fd59b16301a17e8",
        "type": "subflow:6b6c5faec21326f9",
        "z": "a9319fe458afe6b6",
        "g": "346a2b3c97997210",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "e8de57e79e3ba00b",
                "type": "conf-type"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 360,
        "wires": []
    },
    {
        "id": "f080684a49dc646f",
        "type": "ui-button",
        "z": "a9319fe458afe6b6",
        "g": "346a2b3c97997210",
        "group": "6efcdf57f80c8926",
        "name": "",
        "label": "Clear Messages Button UI",
        "order": 7,
        "width": "3",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "53d0b77130e78707"
            ]
        ]
    },
    {
        "id": "53d0b77130e78707",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "346a2b3c97997210",
        "name": "delete flow.data",
        "rules": [
            {
                "t": "delete",
                "p": "data",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 340,
        "wires": [
            [
                "1fd59b16301a17e8"
            ]
        ]
    },
    {
        "id": "afb2442e6fbc5d8a",
        "type": "ui-text-input",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "group": "6efcdf57f80c8926",
        "name": "",
        "label": "Input chat message here",
        "order": 2,
        "width": "3",
        "height": "1",
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "fec2fa8ad7704214"
            ]
        ]
    },
    {
        "id": "65b38002d80a7926",
        "type": "ui-button",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "group": "6efcdf57f80c8926",
        "name": "",
        "label": "Send Message",
        "order": 8,
        "width": "3",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "current_inputtext",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "1ec0c0238c825493"
            ]
        ]
    },
    {
        "id": "fec2fa8ad7704214",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "name": "record text to flow",
        "rules": [
            {
                "t": "set",
                "p": "current_inputtext",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "1ec0c0238c825493",
        "type": "function",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "name": "wrap chat message",
        "func": "var chatUsername = '@You';\nvar chatMessage = msg.payload;\n\nreturn {\n    topic: chatUsername,\n    payload: chatMessage\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "53870e44e5ace8b2",
                "43be761c3e9e9f74"
            ]
        ]
    },
    {
        "id": "bebcbd1ab1269bbf",
        "type": "function",
        "z": "a9319fe458afe6b6",
        "g": "346a2b3c97997210",
        "name": "handle user chat ui data",
        "func": "// 将用户名转换为十六进制的字符串并截取最后四位\nconst chatUsername = msg.topic;\nconst chatMessage = msg.payload\n\n// ------------------ Generate Avatar -----------------------\n// 获取输入参数\nconst text = chatUsername;\nconst width = 30;\nconst height = 30;\nconst textColor = '#FFFFFF'; // 白色\n\n// 生成基于用户名的深色背景\nfunction stringToColor(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = '#';\n    for (let i = 0; i < 3; i++) {\n        let value = (hash >> (i * 8)) & 0xFF;\n        value = Math.floor(value * 0.6); // 调暗颜色\n        color += ('00' + value.toString(16)).substr(-2);\n    }\n    return color;\n}\n\nconst circleColor = stringToColor(chatUsername);\n\n// 使用HTML和CSS生成头像\nconst avatarHtml = `\n    <div style=\"width: ${width}px; height: ${height}px; border-radius: 50%; background-color: ${circleColor}; display: flex; align-items: center; justify-content: center; color: ${textColor}; font-size: 10px; font-weight: bold;\">\n        ${text}\n    </div>\n`;\n\n// ------------------- Generate chat history list ----------------------\nvar tmp = flow.get('data') || [];\n\ntmp.push({\n    image: avatarHtml,\n    sender: chatUsername,\n    message: chatMessage,\n    time: new Date()\n});\n\nflow.set('data', tmp);\nmsg.payload = tmp;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "1fd59b16301a17e8"
            ]
        ]
    },
    {
        "id": "03f1fdf2a31d8134",
        "type": "ui-text",
        "z": "a9319fe458afe6b6",
        "g": "8eb1280652c660c2",
        "group": "6efcdf57f80c8926",
        "order": 1,
        "width": "3",
        "height": "1",
        "name": "Show route info",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 820,
        "y": 120,
        "wires": []
    },
    {
        "id": "2fbc45a4def674f8",
        "type": "subflow:61d68b31136dfa92",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "green on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "green",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 940,
        "wires": []
    },
    {
        "id": "2c02a34157a2ec9b",
        "type": "subflow:61d68b31136dfa92",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "yellow on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "yellow",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 980,
        "wires": []
    },
    {
        "id": "747375a58c6ca14e",
        "type": "subflow:e0d523198c47fac8",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 220,
        "y": 1540,
        "wires": [
            [
                "a4bb8528feb6766c",
                "158ad691aac3f239"
            ]
        ]
    },
    {
        "id": "cf0be92962dd1c37",
        "type": "subflow:c331a93ea0d418b4",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "meshtastic chat -  receive message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            }
        ],
        "x": 220,
        "y": 980,
        "wires": [
            [
                "1e4ac8c4f95f8ccf"
            ]
        ]
    },
    {
        "id": "8d248fc5be748a9e",
        "type": "subflow:c331a93ea0d418b4",
        "z": "a9319fe458afe6b6",
        "g": "3c5b4e04f79ed01c",
        "name": "meshtastic chat - receive message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            }
        ],
        "x": 220,
        "y": 480,
        "wires": [
            [
                "f4e38e4884fc9cdc"
            ]
        ]
    },
    {
        "id": "db5ac7ba2a754d65",
        "type": "subflow:ff55010600100001",
        "z": "a9319fe458afe6b6",
        "g": "8eb1280652c660c2",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            }
        ],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "4a5b13a4e63396ee"
            ]
        ]
    },
    {
        "id": "4a5b13a4e63396ee",
        "type": "function",
        "z": "a9319fe458afe6b6",
        "g": "8eb1280652c660c2",
        "name": "set route info text",
        "func": "var routeIdHexStr = parseInt(msg.topic).toString(16);\nvar onlineStatusStr = msg.payload ? 'Online' : 'Offline';\n\nreturn {\n    payload: `Route State: ${onlineStatusStr}<br/>Route ID: ${msg.topic === 0 ? 'None' : (msg.topic + '(' + routeIdHexStr + ')')}`\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "03f1fdf2a31d8134"
            ]
        ]
    },
    {
        "id": "aa1a0522cb1e76b4",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "firstLineText",
                "value": "[Automatic]current ultrasonic value:",
                "type": "str"
            },
            {
                "name": "suffixText",
                "value": "m",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 1540,
        "wires": []
    },
    {
        "id": "53870e44e5ace8b2",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            }
        ],
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "a6279e97f8d67997",
        "type": "subflow:fdfd26c77e5e2a42",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "710ca388b2b9c30f",
                "70a4a1dd58581050"
            ]
        ]
    },
    {
        "id": "b288e522160ae3e5",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "firstLineText",
                "value": "[Automatic]current tripwire status:",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e2b620f2ecf5b4b7",
        "type": "ui-switch",
        "z": "a9319fe458afe6b6",
        "g": "1551266451c3fb26",
        "name": "",
        "label": "Enable sensor value reporting",
        "group": "6efcdf57f80c8926",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "db96dce448c12ae5"
            ]
        ]
    },
    {
        "id": "db96dce448c12ae5",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "1551266451c3fb26",
        "name": "set enable/disable flag",
        "rules": [
            {
                "t": "set",
                "p": "reportSensorValueEnabled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "a4bb8528feb6766c",
        "type": "switch",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "enabled?",
        "property": "reportSensorValueEnabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1540,
        "wires": [
            [
                "aa1a0522cb1e76b4"
            ]
        ]
    },
    {
        "id": "710ca388b2b9c30f",
        "type": "switch",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "enabled?",
        "property": "reportSensorValueEnabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 460,
        "y": 1620,
        "wires": [
            [
                "b288e522160ae3e5"
            ]
        ]
    },
    {
        "id": "2d6114a1bb679b95",
        "type": "ui-switch",
        "z": "a9319fe458afe6b6",
        "g": "89ed2cd971381520",
        "name": "",
        "label": "Enable control light",
        "group": "6efcdf57f80c8926",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "b87a78564d7dd3ff"
            ]
        ]
    },
    {
        "id": "b87a78564d7dd3ff",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "89ed2cd971381520",
        "name": "set enable/disable",
        "rules": [
            {
                "t": "set",
                "p": "controlLightEnabled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a671425179a5ebba",
        "type": "subflow:61d68b31136dfa92",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "red on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 810,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fde8650716160e52",
        "type": "subflow:61d68b31136dfa92",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "light off",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "off",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 1060,
        "wires": []
    },
    {
        "id": "74fde634240e1723",
        "type": "ui-text",
        "z": "a9319fe458afe6b6",
        "g": "89ed2cd971381520",
        "group": "6efcdf57f80c8926",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "\"light green\" \"light red\" \"light yellow\" \"light off\"",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "style": true,
        "font": "",
        "fontSize": "14",
        "color": "#c2c2c2",
        "className": "",
        "x": 260,
        "y": 900,
        "wires": []
    },
    {
        "id": "c9a448b4454fc848",
        "type": "ui-text",
        "z": "a9319fe458afe6b6",
        "g": "1551266451c3fb26",
        "group": "6efcdf57f80c8926",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "\"ultrasonic\" \"tripwire\"",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "style": true,
        "font": "",
        "fontSize": "14",
        "color": "#c2c2c2",
        "className": "",
        "x": 260,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f4e38e4884fc9cdc",
        "type": "link out",
        "z": "a9319fe458afe6b6",
        "g": "3c5b4e04f79ed01c",
        "name": "link A",
        "mode": "link",
        "links": [
            "b70b4cead50cf7b4"
        ],
        "x": 450,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "43be761c3e9e9f74",
        "type": "link out",
        "z": "a9319fe458afe6b6",
        "g": "715d4e1eff0435c7",
        "name": "link A",
        "mode": "link",
        "links": [
            "b70b4cead50cf7b4"
        ],
        "x": 670,
        "y": 580,
        "wires": [],
        "l": true
    },
    {
        "id": "b70b4cead50cf7b4",
        "type": "link in",
        "z": "a9319fe458afe6b6",
        "g": "346a2b3c97997210",
        "name": "link A'",
        "links": [
            "43be761c3e9e9f74",
            "f4e38e4884fc9cdc",
            "0a42f96220d3bb8b"
        ],
        "x": 130,
        "y": 380,
        "wires": [
            [
                "bebcbd1ab1269bbf"
            ]
        ],
        "l": true
    },
    {
        "id": "1e4ac8c4f95f8ccf",
        "type": "switch",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "start with '@mp'",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^@mp.*",
                "vt": "str",
                "case": true
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "ea24ab258435fcf5"
            ]
        ]
    },
    {
        "id": "158ad691aac3f239",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "save",
        "rules": [
            {
                "t": "set",
                "p": "save_u",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "70a4a1dd58581050",
        "type": "change",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "save",
        "rules": [
            {
                "t": "set",
                "p": "save_t",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "16c63bfa8614cb46",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "prefixText",
                "value": "",
                "type": "env"
            },
            {
                "name": "suffixText",
                "value": "m",
                "type": "str"
            }
        ],
        "x": 900,
        "y": 840,
        "wires": []
    },
    {
        "id": "b0b222c55b1cca0c",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "firstLineText",
                "value": "[Automatic]current tripwire status:",
                "type": "str"
            },
            {
                "name": "prefixText",
                "value": "",
                "type": "env"
            }
        ],
        "x": 900,
        "y": 880,
        "wires": []
    },
    {
        "id": "ea24ab258435fcf5",
        "type": "switch",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "command type",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 360,
        "y": 1040,
        "wires": [
            [
                "b6787453fdafa34f",
                "63ec0ca68c54bf68"
            ],
            [
                "1b254c2ecc8d070c"
            ],
            [
                "207ff54d4031988f"
            ]
        ]
    },
    {
        "id": "6974dd9f8541cf10",
        "type": "template",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "Done",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "@{{topic}}\n\nDone",
        "output": "str",
        "x": 690,
        "y": 1120,
        "wires": [
            [
                "906da40788a2a653"
            ]
        ]
    },
    {
        "id": "906da40788a2a653",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "prefixText",
                "value": "",
                "type": "env"
            }
        ],
        "x": 900,
        "y": 1120,
        "wires": []
    },
    {
        "id": "1b254c2ecc8d070c",
        "type": "switch",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "green",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "yellow",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "red",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "2fbc45a4def674f8",
                "6974dd9f8541cf10"
            ],
            [
                "2c02a34157a2ec9b",
                "6974dd9f8541cf10"
            ],
            [
                "a671425179a5ebba",
                "6974dd9f8541cf10"
            ],
            [
                "fde8650716160e52",
                "6974dd9f8541cf10"
            ]
        ]
    },
    {
        "id": "62028a4a17998fde",
        "type": "subflow:15e3d881bcd13372",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "meshtastic chat - send message",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            }
        ],
        "x": 900,
        "y": 1160,
        "wires": []
    },
    {
        "id": "bc11da047423a1a6",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "chat to control",
        "info": "",
        "x": 120,
        "y": 780,
        "wires": []
    },
    {
        "id": "8f011a4c95e46173",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "8eb1280652c660c2",
        "name": "initial meshtastic route, and get state",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "45547527be48c127",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "25dbbcda2ecff0d3",
        "name": "Chat",
        "info": "",
        "x": 90,
        "y": 260,
        "wires": []
    },
    {
        "id": "46a4333e9f1af0bb",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "send ultrasonic sensor value through meshtastic",
        "info": "",
        "x": 220,
        "y": 1300,
        "wires": []
    },
    {
        "id": "33637b17a506cbd0",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "8eb1280652c660c2",
        "name": "v0.0.1",
        "info": "",
        "x": 870,
        "y": 160,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "c908a7b3e9ceed5f",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "25dbbcda2ecff0d3",
        "name": "v0.0.1",
        "info": "",
        "x": 870,
        "y": 680,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "15b3a31efa73cab8",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "v0.0.1",
        "info": "",
        "x": 990,
        "y": 1200,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "7743bc6a2a1fee06",
        "type": "comment",
        "z": "a9319fe458afe6b6",
        "g": "d72fe5300f0090a1",
        "name": "v0.0.1",
        "info": "",
        "x": 790,
        "y": 1660,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "207ff54d4031988f",
        "type": "template",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "welcome txt",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Hi {{topic}}!\nYou can @mp and tell:\n1. light green\n2. light yellow\n3. light red\n4. light off\n5. sensor",
        "output": "str",
        "x": 670,
        "y": 1160,
        "wires": [
            [
                "62028a4a17998fde"
            ]
        ]
    },
    {
        "id": "b6787453fdafa34f",
        "type": "template",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "message template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "@{{topic}}\n\ncurrent tripwire: {{flow.save_t}}",
        "output": "str",
        "x": 650,
        "y": 880,
        "wires": [
            [
                "b0b222c55b1cca0c"
            ]
        ]
    },
    {
        "id": "63ec0ca68c54bf68",
        "type": "template",
        "z": "a9319fe458afe6b6",
        "g": "cabc3b813baaea59",
        "name": "message template",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "@{{topic}}\n\ncurrent ultrasonic: {{flow.save_u}}m",
        "output": "str",
        "x": 650,
        "y": 840,
        "wires": [
            [
                "16c63bfa8614cb46"
            ]
        ]
    },
    {
        "id": "8f9044118e666074",
        "type": "image",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "viewer",
        "width": "80",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": true,
        "outputs": 1,
        "x": 850,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "47ea013a9e20884f",
        "type": "image",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "viewer",
        "width": "80",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": true,
        "outputs": 1,
        "x": 950,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "edd116f7e01a9da3",
        "type": "image",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "viewer",
        "width": "80",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": true,
        "outputs": 1,
        "x": 430,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e36c938de732ca09",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "3.jpg",
        "payloadType": "str",
        "x": 130,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "ea20ed6b4d612b21",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "v0.0.1",
        "info": "",
        "x": 930,
        "y": 2360,
        "wires": []
    },
    {
        "id": "db99d241958055e8",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "f2240ffea702c711",
        "name": "v0.0.1",
        "info": "",
        "x": 1090,
        "y": 2120,
        "wires": []
    },
    {
        "id": "6e289ff55fb9ed6d",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "v0.0.1",
        "info": "",
        "x": 1210,
        "y": 1320,
        "wires": []
    },
    {
        "id": "071cbd0161446c28",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "v0.0.1",
        "info": "",
        "x": 510,
        "y": 700,
        "wires": []
    },
    {
        "id": "adfc8142f9adb1dc",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "v0.0.1",
        "info": "",
        "x": 1090,
        "y": 300,
        "wires": []
    },
    {
        "id": "ace583c874c299c4",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "Connect Camera",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "30a0d30e2edc72e9",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "IP camera ai inference",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "7470944df116f5ef",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "f2240ffea702c711",
        "name": "Tracking",
        "info": "",
        "x": 100,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e126765175623637",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "e20ea29c653e5b88",
        "name": "Object Detection and Action",
        "info": "",
        "x": 160,
        "y": 800,
        "wires": []
    },
    {
        "id": "59255b7804a9027d",
        "type": "comment",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "Preview Camera Image",
        "info": "",
        "x": 140,
        "y": 400,
        "wires": []
    },
    {
        "id": "b52b6d6f3e328256",
        "type": "template",
        "z": "1d374d406a20801f",
        "g": "f3a9740925b12270",
        "name": "show 'standby'",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "standby",
        "output": "str",
        "x": 620,
        "y": 900,
        "wires": [
            [
                "37bc0da73b669b7b"
            ]
        ]
    },
    {
        "id": "f6f689b31b1062b9",
        "type": "template",
        "z": "1d374d406a20801f",
        "g": "f3a9740925b12270",
        "name": "show 'detected'",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "detected",
        "output": "str",
        "x": 620,
        "y": 860,
        "wires": [
            [
                "37bc0da73b669b7b"
            ]
        ]
    },
    {
        "id": "2aff97b44b1f241d",
        "type": "debug",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 2340,
        "wires": []
    },
    {
        "id": "0e9b95629c161df6",
        "type": "debug",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 2300,
        "wires": []
    },
    {
        "id": "e5e47ed9301b0d9c",
        "type": "subflow:cca203ebc25b2ce6",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "",
        "x": 140,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "14ed4a4e100c7ee0",
        "type": "subflow:db0357a026e3fe9d",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "",
        "x": 480,
        "y": 2280,
        "wires": [
            [
                "cff0741c6fdb4b9d",
                "8f9044118e666074"
            ],
            [
                "0e9b95629c161df6"
            ],
            [
                "2aff97b44b1f241d"
            ]
        ],
        "inputLabels": [
            "image (base64 or buffer)"
        ]
    },
    {
        "id": "cff0741c6fdb4b9d",
        "type": "subflow:24744a865787dab5",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "cde4df4e1b515e62",
                "type": "conf-type"
            },
            {
                "name": "height",
                "value": "240",
                "type": "num"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 890,
        "y": 2240,
        "wires": []
    },
    {
        "id": "17a5c7085e533dc2",
        "type": "file in",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "read image",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "base64",
        "allProps": false,
        "x": 290,
        "y": 2280,
        "wires": [
            [
                "14ed4a4e100c7ee0"
            ]
        ]
    },
    {
        "id": "27305ebce4a2d493",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "69a9c77ee5e784d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "3.jpg",
        "payloadType": "str",
        "x": 130,
        "y": 2280,
        "wires": [
            [
                "17a5c7085e533dc2"
            ]
        ]
    },
    {
        "id": "6bb79b6736e46f24",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 1050,
        "y": 1920,
        "wires": [],
        "l": true
    },
    {
        "id": "a22201104c1ca67e",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 444,
        "y": 2040,
        "wires": [],
        "l": true
    },
    {
        "id": "384bd5f2261876c5",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 444,
        "y": 1980,
        "wires": [],
        "l": true
    },
    {
        "id": "02771dfb0f53c7ee",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 444,
        "y": 1920,
        "wires": [],
        "l": true
    },
    {
        "id": "da8357cccfce88e4",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 444,
        "y": 1860,
        "wires": [],
        "l": true
    },
    {
        "id": "6c2556eef543c802",
        "type": "link in",
        "z": "1d374d406a20801f",
        "g": "f9fc394e3a78208c",
        "name": "link F",
        "links": [
            "02771dfb0f53c7ee",
            "384bd5f2261876c5",
            "6bb79b6736e46f24",
            "a22201104c1ca67e",
            "da8357cccfce88e4",
            "dc1fa02156ca6d9d"
        ],
        "x": 124,
        "y": 1585.9666666666667,
        "wires": [
            [
                "b9d656e3df83017c"
            ]
        ],
        "l": true
    },
    {
        "id": "dc1fa02156ca6d9d",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "link F",
        "mode": "link",
        "links": [
            "6c2556eef543c802"
        ],
        "x": 444,
        "y": 1800,
        "wires": [],
        "l": true
    },
    {
        "id": "1bc42053c286df1f",
        "type": "link in",
        "z": "1d374d406a20801f",
        "g": "c0e18a9b71cf75ce",
        "name": "link B",
        "links": [
            "e720d1378dce789d"
        ],
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "683ac63b91ba9e9c"
            ]
        ],
        "l": true
    },
    {
        "id": "d84937099f72d257",
        "type": "link in",
        "z": "1d374d406a20801f",
        "g": "837666762be59777",
        "name": "link B",
        "links": [
            "e720d1378dce789d"
        ],
        "x": 150,
        "y": 1300,
        "wires": [
            [
                "23e369944d6111cc"
            ]
        ],
        "l": true
    },
    {
        "id": "e720d1378dce789d",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "link B",
        "mode": "link",
        "links": [
            "1bc42053c286df1f",
            "d84937099f72d257"
        ],
        "x": 1090,
        "y": 220,
        "wires": [],
        "l": true
    },
    {
        "id": "a3a3cc7e29d9c2bd",
        "type": "link in",
        "z": "1d374d406a20801f",
        "g": "f9fc394e3a78208c",
        "name": "link C",
        "links": [
            "372b39d8a21d0962"
        ],
        "x": 124,
        "y": 1525.9666666666667,
        "wires": [
            [
                "67a60ceff998a8fb"
            ]
        ],
        "l": true
    },
    {
        "id": "372b39d8a21d0962",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "link C",
        "mode": "link",
        "links": [
            "a3a3cc7e29d9c2bd"
        ],
        "x": 1090,
        "y": 260,
        "wires": [],
        "l": true
    },
    {
        "id": "6e6effaa0b4d76fa",
        "type": "link in",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "link A",
        "links": [
            "27c6fd8ae20ca543"
        ],
        "x": 120,
        "y": 500,
        "wires": [
            [
                "811d115f6f853d19",
                "c20388bdb4044b69",
                "edd116f7e01a9da3"
            ]
        ],
        "l": true
    },
    {
        "id": "27c6fd8ae20ca543",
        "type": "link out",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "link A",
        "mode": "link",
        "links": [
            "6e6effaa0b4d76fa",
            "e85e4eaf95230563",
            "79e7e38c0b0c8b1e"
        ],
        "x": 1090,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "6876814f9a6e4c10",
        "type": "subflow:24744a865787dab5",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "14ac8e16c178d0c3",
                "type": "conf-type"
            },
            {
                "name": "height",
                "value": "480",
                "type": "num"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 640,
        "wires": []
    },
    {
        "id": "9c82cde7e0992b0a",
        "type": "subflow:24744a865787dab5",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "",
        "env": [
            {
                "name": "Group",
                "value": "d2572cd2c6eedad3",
                "type": "conf-type"
            },
            {
                "name": "height",
                "value": "480",
                "type": "num"
            },
            {
                "key": "DB2_SF_ORDER",
                "value": "1",
                "type": "str"
            }
        ],
        "x": 704,
        "y": 1565.9666666666667,
        "wires": []
    },
    {
        "id": "4dfcbb3acf4d1a0b",
        "type": "change",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "send stop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "str",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 260,
        "wires": [
            [
                "891b79792f07979c"
            ]
        ]
    },
    {
        "id": "97b00c98013a1bf3",
        "type": "change",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "send start",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "start",
                "tot": "str",
                "dc": true
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "camera_camera_id",
                "tot": "flow",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "891b79792f07979c"
            ]
        ]
    },
    {
        "id": "a5b465a101397ed6",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "default off",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 610,
        "y": 1860,
        "wires": [
            [
                "e7be9b53522714bb"
            ]
        ]
    },
    {
        "id": "b9d656e3df83017c",
        "type": "function",
        "z": "1d374d406a20801f",
        "g": "f9fc394e3a78208c",
        "name": "build config set",
        "func": "\nreturn {\n    topic: 'config',\n    payload: {\n        k: msg.topic,\n        v: msg.payload\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 274,
        "y": 1585.9666666666667,
        "wires": [
            [
                "67a60ceff998a8fb"
            ]
        ]
    },
    {
        "id": "67a60ceff998a8fb",
        "type": "subflow:0d921b2cdb2f47a8",
        "z": "1d374d406a20801f",
        "g": "f9fc394e3a78208c",
        "name": "tracking analyze",
        "x": 434,
        "y": 1525.9666666666667,
        "wires": [
            [
                "72f1f93177f2cd96",
                "9c82cde7e0992b0a",
                "47ea013a9e20884f"
            ],
            [
                "c75cad718dc98486"
            ],
            [
                "8c4663d800e5ad84"
            ]
        ]
    },
    {
        "id": "683ac63b91ba9e9c",
        "type": "subflow:c1b434e7ff15727e",
        "z": "1d374d406a20801f",
        "g": "c0e18a9b71cf75ce",
        "name": "",
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "f6f689b31b1062b9",
                "80f532d63df0f5d2",
                "6cf44f9583bca5cb"
            ],
            [
                "b52b6d6f3e328256",
                "519436199c84ecfa",
                "5e4657564cf853ef"
            ]
        ]
    },
    {
        "id": "891b79792f07979c",
        "type": "subflow:1766c4cb75850c2c",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "",
        "env": [
            {
                "name": "mqtt-broker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "triggerMode",
                "value": "no",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 220,
        "wires": [
            [
                "27c6fd8ae20ca543"
            ],
            [
                "e720d1378dce789d"
            ],
            [
                "372b39d8a21d0962"
            ],
            []
        ]
    },
    {
        "id": "c20388bdb4044b69",
        "type": "delay",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 640,
        "wires": [
            [
                "6876814f9a6e4c10"
            ]
        ]
    },
    {
        "id": "0bb34702eace0c7e",
        "type": "debug",
        "z": "1d374d406a20801f",
        "g": "837666762be59777",
        "name": "Debug: show detect object id and count",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$join([\"object:\",$string(topic),\" \",\"count:\",$string(payload)], \" \")",
        "statusType": "jsonata",
        "x": 740,
        "y": 1300,
        "wires": []
    },
    {
        "id": "23e369944d6111cc",
        "type": "function",
        "z": "1d374d406a20801f",
        "g": "837666762be59777",
        "name": "output object id and counting",
        "func": "// 获取输入的payload\nlet payload = msg.payload;\n\nif (!Array.isArray(msg.payload)) {\n    return null;\n}\n// 初始化计数器\nlet countObject0 = 0;\nlet countObject2 = 0;\n\n// 遍历每个检测到的对象\nfor (let i = 0; i < payload.length; i++) {\n    let obj = payload[i];\n    let confidence = obj[4];\n    let objectId = obj[5];\n\n    // 检查并生成符合条件的对象0的消息\n    if (objectId === 0 && confidence > 70) {\n        countObject0++;\n        // 创建输出消息\n        let newMsg = {\n            topic: \"0\",\n            payload: countObject0\n        };\n        // 发送消息\n        node.send(newMsg);\n    }\n\n    // 检查并生成符合条件的对象2的消息\n    if (objectId === 2 && confidence > 80) {\n        countObject2++;\n        // 创建输出消息\n        let newMsg = {\n            topic: \"2\",\n            payload: countObject2\n        };\n        // 发送消息\n        node.send(newMsg);\n    }\n}\n\n// 结束函数，不返回任何消息，因为消息已经通过node.send发送\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1300,
        "wires": [
            [
                "0bb34702eace0c7e"
            ]
        ]
    },
    {
        "id": "1daa59b6fd8e3be8",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "on startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "e02d30882b420f09"
            ]
        ]
    },
    {
        "id": "7951f813e95e3bcb",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "default 50",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "50",
        "payloadType": "num",
        "x": 610,
        "y": 1920,
        "wires": [
            [
                "27bc94c5bcfd44f3",
                "173296a9d83552c4"
            ]
        ]
    },
    {
        "id": "692768f0c0fa6045",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "on",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 1920,
        "wires": [
            [
                "013e5b1c6161fd88",
                "b63a2834715d53a9",
                "e6c3b81f70e742c4",
                "9b9219df4bbd2df8",
                "30fcf796caae5dd7"
            ]
        ]
    },
    {
        "id": "e89af5b312b5cd69",
        "type": "inject",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "default ‘CAM2’",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "CAM2",
        "payloadType": "str",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "62a59ea7cea57517"
            ]
        ]
    },
    {
        "id": "c03fd77323e94d57",
        "type": "ui-text",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "group": "7f7efa6aab86223a",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "text ui '[Overlay]'",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 790,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8342f50e0cb34161",
        "type": "subflow:61d68b31136dfa92",
        "z": "1d374d406a20801f",
        "g": "b3452e3f6fbe33c8",
        "name": "light controller - turn off light",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "off",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_POWER",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1120,
        "y": 1200,
        "wires": []
    },
    {
        "id": "54a97e963a2bc46a",
        "type": "delay",
        "z": "1d374d406a20801f",
        "g": "b3452e3f6fbe33c8",
        "name": "delay 5 seconds",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "8342f50e0cb34161"
            ]
        ]
    },
    {
        "id": "5e4657564cf853ef",
        "type": "delay",
        "z": "1d374d406a20801f",
        "g": "b3452e3f6fbe33c8",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "6cf44f9583bca5cb",
        "type": "delay",
        "z": "1d374d406a20801f",
        "g": "b3452e3f6fbe33c8",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "2969553b63e67159",
                "54a97e963a2bc46a"
            ]
        ]
    },
    {
        "id": "2969553b63e67159",
        "type": "subflow:61d68b31136dfa92",
        "z": "1d374d406a20801f",
        "g": "b3452e3f6fbe33c8",
        "name": "light controller - flashing red",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "flashing",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 940,
        "y": 1140,
        "wires": []
    },
    {
        "id": "37bc0da73b669b7b",
        "type": "ui-text",
        "z": "1d374d406a20801f",
        "g": "f3a9740925b12270",
        "group": "1b9a8117899e03b1",
        "order": 2,
        "width": "1",
        "height": "1",
        "name": "detection result text ui",
        "label": "standby",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 820,
        "y": 880,
        "wires": []
    },
    {
        "id": "519436199c84ecfa",
        "type": "change",
        "z": "1d374d406a20801f",
        "g": "d5465cecd9e6586c",
        "name": "show green light",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1040,
        "wires": [
            [
                "865bdfb604ca22b5"
            ]
        ]
    },
    {
        "id": "80f532d63df0f5d2",
        "type": "change",
        "z": "1d374d406a20801f",
        "g": "d5465cecd9e6586c",
        "name": "show red light",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "865bdfb604ca22b5"
            ]
        ]
    },
    {
        "id": "865bdfb604ca22b5",
        "type": "ui-led",
        "z": "1d374d406a20801f",
        "g": "d5465cecd9e6586c",
        "name": "detection result led ui",
        "group": "1b9a8117899e03b1",
        "order": 1,
        "width": "1",
        "height": "1",
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "states": [
            {
                "value": "0",
                "valueType": "str",
                "color": "#00ff00"
            },
            {
                "value": "1",
                "valueType": "str",
                "color": "#ff0000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": true,
        "showGlow": true,
        "x": 820,
        "y": 1020,
        "wires": []
    },
    {
        "id": "72f1f93177f2cd96",
        "type": "msg-speed",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "Statistical message speed",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 724,
        "y": 1505.9666666666667,
        "wires": [
            [
                "5ecad99473bd81a6"
            ],
            []
        ]
    },
    {
        "id": "811d115f6f853d19",
        "type": "msg-speed",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "raw",
        "frequency": "sec",
        "interval": 1,
        "estimation": false,
        "ignore": false,
        "pauseAtStartup": false,
        "topicDependent": false,
        "x": 260,
        "y": 463.76666666666665,
        "wires": [
            [
                "9c401016eee3aa94"
            ],
            []
        ]
    },
    {
        "id": "5ecad99473bd81a6",
        "type": "ui-gauge",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "Tracking FPS gauge",
        "group": "d2572cd2c6eedad3",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Tracking FPS",
        "units": "fps",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "15",
                "color": "#ffc800"
            },
            {
                "from": "30",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1000,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9c401016eee3aa94",
        "type": "ui-gauge",
        "z": "1d374d406a20801f",
        "g": "d5d8df319b551320",
        "name": "Camera FPS gauge",
        "group": "14ac8e16c178d0c3",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Camera FPS",
        "units": "fps",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "15",
                "color": "#ffc800"
            },
            {
                "from": "30",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 470,
        "y": 460,
        "wires": []
    },
    {
        "id": "b5bee68cd3323fc0",
        "type": "change",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "name": "Store camera id to flow context",
        "rules": [
            {
                "t": "set",
                "p": "camera_camera_id",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "62a59ea7cea57517",
        "type": "ui-text-input",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "group": "b3386a5606a07fc6",
        "name": "Input camera id ui",
        "label": "Camera ID",
        "order": 1,
        "width": "2",
        "height": "1",
        "topic": "textInput",
        "topicType": "flow",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": false,
        "sendOnEnter": false,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "b5bee68cd3323fc0"
            ]
        ]
    },
    {
        "id": "8c4663d800e5ad84",
        "type": "ui-gauge",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "",
        "group": "d2572cd2c6eedad3",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "COUNT( B to A)",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "4",
                "color": "#ffc800"
            },
            {
                "from": "7",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": 10,
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 694,
        "y": 1665.9666666666667,
        "wires": []
    },
    {
        "id": "c75cad718dc98486",
        "type": "ui-gauge",
        "z": "1d374d406a20801f",
        "g": "f6a28ecd60a867cd",
        "name": "",
        "group": "d2572cd2c6eedad3",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "COUNT( A to B)",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "4",
                "color": "#ffc800"
            },
            {
                "from": "7",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": 10,
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 694,
        "y": 1625.9666666666667,
        "wires": []
    },
    {
        "id": "8101e902511a3c8a",
        "type": "function",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "setting",
        "func": "switch (msg.topic) {\n    case \"pos1\":\n        return {\n            topic: 'pos1',\n            payload: Math.round(msg.payload * 240 / 100)\n        };\n    case \"pos2\":\n        return {\n            topic: 'pos2',\n            payload: Math.round(msg.payload * 240 / 100)\n        };\n    case \"vertical\":\n        return {\n            topic: 'vertical',\n            payload: msg.payload\n        };\n    default:\n        break;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1920,
        "wires": [
            [
                "6bb79b6736e46f24"
            ]
        ]
    },
    {
        "id": "e7be9b53522714bb",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "vertical",
        "label": "vertical",
        "group": "7f7efa6aab86223a",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "vertical",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 780,
        "y": 1860,
        "wires": [
            [
                "8101e902511a3c8a"
            ]
        ]
    },
    {
        "id": "173296a9d83552c4",
        "type": "ui-slider",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "group": "7f7efa6aab86223a",
        "name": "pos2",
        "label": "pos2",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "pos2",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 770,
        "y": 1980,
        "wires": [
            [
                "8101e902511a3c8a"
            ]
        ]
    },
    {
        "id": "27bc94c5bcfd44f3",
        "type": "ui-slider",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "group": "7f7efa6aab86223a",
        "name": "pos1",
        "label": "pos1",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "all",
        "topic": "pos1",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 770,
        "y": 1920,
        "wires": [
            [
                "8101e902511a3c8a"
            ]
        ]
    },
    {
        "id": "30fcf796caae5dd7",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "",
        "label": "Heatmap",
        "group": "7f7efa6aab86223a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "heatmap",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 320,
        "y": 2040,
        "wires": [
            [
                "a22201104c1ca67e"
            ]
        ]
    },
    {
        "id": "9b9219df4bbd2df8",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "",
        "label": "Region",
        "group": "7f7efa6aab86223a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "polygon",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 320,
        "y": 1980,
        "wires": [
            [
                "384bd5f2261876c5"
            ]
        ]
    },
    {
        "id": "e6c3b81f70e742c4",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "",
        "label": "label",
        "group": "7f7efa6aab86223a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "labeling",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 310,
        "y": 1920,
        "wires": [
            [
                "02771dfb0f53c7ee"
            ]
        ]
    },
    {
        "id": "b63a2834715d53a9",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "",
        "label": "Track",
        "group": "7f7efa6aab86223a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "tracing",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 310,
        "y": 1860,
        "wires": [
            [
                "da8357cccfce88e4"
            ]
        ]
    },
    {
        "id": "013e5b1c6161fd88",
        "type": "ui-switch",
        "z": "1d374d406a20801f",
        "g": "7397d120b410ef9e",
        "name": "",
        "label": "Box",
        "group": "7f7efa6aab86223a",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": true,
        "topic": "bounding_box",
        "topicType": "str",
        "style": "",
        "className": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 310,
        "y": 1800,
        "wires": [
            [
                "dc1fa02156ca6d9d"
            ]
        ]
    },
    {
        "id": "e02d30882b420f09",
        "type": "ui-button",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "group": "b3386a5606a07fc6",
        "name": "",
        "label": "Confirm",
        "order": 2,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 440,
        "y": 200,
        "wires": [
            [
                "97b00c98013a1bf3"
            ]
        ]
    },
    {
        "id": "cc98ad9231b7c3e5",
        "type": "ui-button",
        "z": "1d374d406a20801f",
        "g": "5e9fa6d07b305402",
        "group": "b3386a5606a07fc6",
        "name": "",
        "label": "STOP",
        "order": 3,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "4dfcbb3acf4d1a0b"
            ]
        ]
    },
    {
        "id": "590f1055948eea5e",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 2,
        "cmdPath": "ffmpeg",
        "cmdArgs": "[\"-version\"]",
        "cmdOutputs": 1,
        "killSignal": "SIGKILL",
        "x": 1500,
        "y": 1640,
        "wires": [
            [
                "deb3e49d8c0150a9"
            ],
            []
        ]
    },
    {
        "id": "e2ec872923fa5813",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 1640,
        "wires": [
            [
                "590f1055948eea5e"
            ]
        ]
    },
    {
        "id": "deb3e49d8c0150a9",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1640,
        "wires": []
    },
    {
        "id": "6003aec5c30fdd75",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 2,
        "cmdPath": "",
        "cmdArgs": "[\"-version\"]",
        "cmdOutputs": 1,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 1960,
        "wires": [
            [],
            [
                "779e2c62c47eea6f"
            ]
        ]
    },
    {
        "id": "30667271b195d4ee",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "version",
        "statusType": "msg",
        "x": 2480,
        "y": 1960,
        "wires": []
    },
    {
        "id": "cdd59148788fc94f",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 1960,
        "wires": [
            [
                "6003aec5c30fdd75"
            ]
        ]
    },
    {
        "id": "779e2c62c47eea6f",
        "type": "function",
        "z": "1d374d406a20801f",
        "name": "",
        "func": "msg.payload = msg.payload.toString().split('\\n', 1)[0];\n\nmsg.version = msg.payload.split(' ')[2];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1960,
        "wires": [
            [
                "30667271b195d4ee"
            ]
        ]
    },
    {
        "id": "5250be3201db5d69",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 2,
        "cmdPath": "ffmpeg",
        "cmdArgs": "[]",
        "cmdOutputs": 1,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 2120,
        "wires": [
            [],
            [
                "cc1329d8ed041e4b"
            ]
        ]
    },
    {
        "id": "e8e054ce16520fa2",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "version",
        "statusType": "msg",
        "x": 2480,
        "y": 2120,
        "wires": []
    },
    {
        "id": "700f9e028971c929",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\",\"args\":[\"-version\"]}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 2120,
        "wires": [
            [
                "5250be3201db5d69"
            ]
        ]
    },
    {
        "id": "cc1329d8ed041e4b",
        "type": "function",
        "z": "1d374d406a20801f",
        "name": "",
        "func": "msg.payload = msg.payload.toString().split('\\n', 1)[0];\n\nmsg.version = msg.payload.split(' ')[2];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2120,
        "wires": [
            [
                "e8e054ce16520fa2"
            ]
        ]
    },
    {
        "id": "a872aab1aab7d80d",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Output ffmpeg version by setting args.",
        "info": "",
        "x": 1890,
        "y": 1900,
        "wires": []
    },
    {
        "id": "e465a5c35e0786d9",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Output ffmpeg version by injecting args.",
        "info": "",
        "x": 1890,
        "y": 2060,
        "wires": []
    },
    {
        "id": "9ae8a0f0a95eefe3",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 3,
        "cmdPath": "",
        "cmdArgs": "[]",
        "cmdOutputs": 2,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 2600,
        "wires": [
            [],
            [],
            [
                "7878403986d2b22d"
            ]
        ]
    },
    {
        "id": "bba80ebc3f16df77",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 2600,
        "wires": []
    },
    {
        "id": "7c9e544db30abf72",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\",\"args\":[\"-hide_banner\",\"-bad_arg\"]}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 2600,
        "wires": [
            [
                "9ae8a0f0a95eefe3"
            ]
        ]
    },
    {
        "id": "54d415457b1bbb6f",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Output ffmpeg error message to stderr by injecting bad args.",
        "info": "",
        "x": 1960,
        "y": 2540,
        "wires": []
    },
    {
        "id": "7878403986d2b22d",
        "type": "function",
        "z": "1d374d406a20801f",
        "name": "",
        "func": "msg.payload = msg.payload.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2600,
        "wires": [
            [
                "bba80ebc3f16df77"
            ]
        ]
    },
    {
        "id": "391757583541b551",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "FFMPEG IS NOT INCLUDED WITH THIS NODE. IT MUST BE INSTALLED SEPARATELY.",
        "info": "",
        "x": 2040,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fea07833bf049d7f",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Trigger ENOENT error by setting bad path.",
        "info": "",
        "x": 1900,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5ab8cd9c64630dba",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 1640,
        "wires": [
            [
                "c70910a7cc8b67f1"
            ]
        ]
    },
    {
        "id": "c70910a7cc8b67f1",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 2,
        "cmdPath": "ffmpeg",
        "cmdArgs": "[\"-version\"]",
        "cmdOutputs": 1,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 1640,
        "wires": [
            [],
            [
                "2777e3f6d2bad502"
            ]
        ]
    },
    {
        "id": "b5675cead39a47e8",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 2,
        "cmdPath": "",
        "cmdArgs": "[]",
        "cmdOutputs": 1,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 2280,
        "wires": [
            [],
            [
                "7409d57cc0f53d14"
            ]
        ]
    },
    {
        "id": "a7deb3e64aa45bb1",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "version",
        "statusType": "msg",
        "x": 2480,
        "y": 2280,
        "wires": []
    },
    {
        "id": "a3aa67c6bbeba9be",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\",\"path\":\"ffmpeg\",\"args\":[\"-version\"],\"signal\":\"SIGKILL\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 2280,
        "wires": [
            [
                "b5675cead39a47e8"
            ]
        ]
    },
    {
        "id": "7409d57cc0f53d14",
        "type": "function",
        "z": "1d374d406a20801f",
        "name": "",
        "func": "msg.payload = msg.payload.toString().split('\\n', 1)[0];\n\nmsg.version = msg.payload.split(' ')[2];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2280,
        "wires": [
            [
                "a7deb3e64aa45bb1"
            ]
        ]
    },
    {
        "id": "4114fad2d106f16e",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Output ffmpeg version by injecting path, args, and signal.",
        "info": "",
        "x": 1950,
        "y": 2220,
        "wires": []
    },
    {
        "id": "af9fcc73d531275e",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "ffmpeg",
        "outputs": 2,
        "cmdPath": "ffmpeg",
        "cmdArgs": "[\"-version\"]",
        "cmdOutputs": 1,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 1800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9eb17ed9f728c75f",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\",\"path\":\"ffmpeg\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 1800,
        "wires": [
            [
                "af9fcc73d531275e"
            ]
        ]
    },
    {
        "id": "d6f8ad6d021ceaca",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Trigger ENOENT error by injecting bad path.",
        "info": "",
        "x": 1910,
        "y": 1740,
        "wires": []
    },
    {
        "id": "740b832637dbb0ab",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "ENOENT error indicates that ffmpeg is not installed or its path is incorrect.",
        "info": "",
        "x": 2000,
        "y": 1440,
        "wires": []
    },
    {
        "id": "74a1b34b1f1e86ca",
        "type": "ffmpeg",
        "z": "1d374d406a20801f",
        "name": "",
        "outputs": 3,
        "cmdPath": "",
        "cmdArgs": "[\"-hide_banner\",\"-bad_arg\"]",
        "cmdOutputs": 2,
        "killSignal": "SIGTERM",
        "x": 2020,
        "y": 2440,
        "wires": [
            [],
            [],
            [
                "ca613107e8f1befd"
            ]
        ]
    },
    {
        "id": "a84dc3cc63cbd1a1",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 2440,
        "wires": []
    },
    {
        "id": "36b78d378a82372a",
        "type": "inject",
        "z": "1d374d406a20801f",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "{\"command\":\"start\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1810,
        "y": 2440,
        "wires": [
            [
                "74a1b34b1f1e86ca"
            ]
        ]
    },
    {
        "id": "7d93d475fd63767f",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Output ffmpeg error message to stderr by setting bad args.",
        "info": "",
        "x": 1950,
        "y": 2380,
        "wires": []
    },
    {
        "id": "ca613107e8f1befd",
        "type": "function",
        "z": "1d374d406a20801f",
        "name": "",
        "func": "msg.payload = msg.payload.toString();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2440,
        "wires": [
            [
                "a84dc3cc63cbd1a1"
            ]
        ]
    },
    {
        "id": "fc74f48844cdc34e",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "Settings for path, args, and signal can be individually overridden by injecting them.",
        "info": "",
        "x": 2030,
        "y": 1400,
        "wires": []
    },
    {
        "id": "49f0c36022562abc",
        "type": "comment",
        "z": "1d374d406a20801f",
        "name": "For help, publicly tag me in the Node-RED forum @kevinGodell.",
        "info": "`@kevinGodell`",
        "x": 1970,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2777e3f6d2bad502",
        "type": "debug",
        "z": "1d374d406a20801f",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.toString",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 1640,
        "wires": []
    },
    {
        "id": "2995a7860e9707f2",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "v0.0.1",
        "info": "",
        "x": 730,
        "y": 460,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "1a2fdaeaae8a6893",
        "type": "template",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Residual battery voltage",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "73",
        "output": "str",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "c932e698ae2bd064"
            ]
        ]
    },
    {
        "id": "a8be22b73701ee1a",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "name": "v0.0.1",
        "info": "",
        "x": 530,
        "y": 740,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "fe72aa57e87bd02c",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "name": "v0.0.1",
        "info": "",
        "x": 530,
        "y": 1000,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "ef8471cb96dc764e",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "v0.0.1",
        "info": "",
        "x": 530,
        "y": 1320,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "062e7b3b1001f53d",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "name": "v0.0.1",
        "info": "",
        "x": 1510,
        "y": 1560,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "2c2251d76372bb85",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "v0.0.1",
        "info": "",
        "x": 1150,
        "y": 900,
        "wires": [],
        "icon": "font-awesome/fa-exclamation-circle"
    },
    {
        "id": "8a50e605490ebb8a",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Showing the possibility of resilient",
        "info": "",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "af2ab6278f822d0c",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "name": "Light Control with Buttons",
        "info": "",
        "x": 770,
        "y": 1000,
        "wires": []
    },
    {
        "id": "55247c8ab539d04b",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "light dashboard ui, and update ui",
        "info": "",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "29a672a1c4e4d1ee",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "Check current light controller status",
        "info": "",
        "x": 180,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ec8b92d87eccb96f",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "name": "Sound Control",
        "info": "",
        "x": 120,
        "y": 840,
        "wires": []
    },
    {
        "id": "3defb712fb98a1e2",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "name": "Water Level",
        "info": "",
        "x": 110,
        "y": 560,
        "wires": []
    },
    {
        "id": "192bdcf3da14608f",
        "type": "subflow:a71c1f4952addcd7",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "54bdb1de78c78123",
                "bde7d2af1d20bdc0"
            ],
            [
                "021abd08a31e38fc"
            ],
            [],
            [
                "1477ebc70370783c"
            ]
        ]
    },
    {
        "id": "6cbb3414127e3215",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "name": "LIGHT_MODE options: on, blink, flashing, off",
        "info": "",
        "x": 990,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2e92fd27d7ac40a5",
        "type": "comment",
        "z": "ce3acd4e9503d8d4",
        "g": "7838c19b434525ad",
        "name": "LIGHT_COLOR options: red, green, yellow",
        "info": "",
        "x": 1000,
        "y": 1040,
        "wires": []
    },
    {
        "id": "61cf8d1cf496d042",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "yellow on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "yellow",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1020,
        "y": 1400,
        "wires": []
    },
    {
        "id": "dd54a1369b1d82bd",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "12dde4415dcc183a",
        "name": "light off",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "off",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_POWER",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1020,
        "y": 1540,
        "wires": []
    },
    {
        "id": "53799784356cbeae",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "yellow flashing",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "flashing",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "yellow",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1460,
        "y": 1400,
        "wires": []
    },
    {
        "id": "28d07e6ea9b5e64c",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "green flashing",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "flashing",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "green",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1460,
        "y": 1300,
        "wires": []
    },
    {
        "id": "45626d31481fa1a5",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Yellow Light On",
        "order": 4,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 1360,
        "wires": [
            [
                "61cf8d1cf496d042",
                "18d7770e94ae03c7"
            ]
        ]
    },
    {
        "id": "25be2db94e247a2b",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "12dde4415dcc183a",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Turn Off Light",
        "order": 8,
        "width": "3",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 1500,
        "wires": [
            [
                "dd54a1369b1d82bd",
                "24354cb7b8e2707e"
            ]
        ]
    },
    {
        "id": "9c59a67e0736c59e",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Yellow Light Flashing",
        "order": 7,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1240,
        "y": 1360,
        "wires": [
            [
                "53799784356cbeae",
                "3e5a100ccf36861b"
            ]
        ]
    },
    {
        "id": "cf2468590b419d1d",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Green Light Flashing",
        "order": 6,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1240,
        "y": 1260,
        "wires": [
            [
                "28d07e6ea9b5e64c",
                "99dcb5982cfa549e"
            ]
        ]
    },
    {
        "id": "866c6621fb385bed",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Red Light On",
        "order": 2,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "\"{\\\"LIGHT_COLOR\\\":\\\"red\\\",\\\"LIGHT_MODE\\\":\\\"blink\\\"}\"",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 770,
        "y": 1160,
        "wires": [
            [
                "b05e8825c9e1de3b",
                "ae736e6f24909157"
            ]
        ]
    },
    {
        "id": "a2c3efba58088756",
        "type": "ui-chart",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "group": "cd0ac6079998d71c",
        "name": "Water Level",
        "label": "Ultrasonic Data",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "Water Level",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "10",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": false,
        "removeOlder": "15",
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#461eb3",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "4",
        "className": "",
        "x": 450,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "bde7d2af1d20bdc0",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Solar charging voltage",
        "group": "4c42d5986c4bbb30",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Solar charging voltage",
        "units": "V",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "8",
                "color": "#ffc800"
            },
            {
                "from": "11",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "18",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 420,
        "y": 160,
        "wires": []
    },
    {
        "id": "44958244653afb30",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "name": "Ultrasonic Data",
        "group": "ee7e123b644fb0fb",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ultrasonic Data",
        "units": "m",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "2",
                "color": "#ffc800"
            },
            {
                "from": "3",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 460,
        "y": 600,
        "wires": []
    },
    {
        "id": "021abd08a31e38fc",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Power of charge",
        "group": "4c42d5986c4bbb30",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Power of charge",
        "units": "W",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "10",
                "color": "#ffc800"
            },
            {
                "from": "80",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "300",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 400,
        "y": 200,
        "wires": []
    },
    {
        "id": "7b3ad55f860d0b20",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Battery status",
        "group": "4c42d5986c4bbb30",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Battery status",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "20",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 680,
        "y": 340,
        "wires": []
    },
    {
        "id": "1477ebc70370783c",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Battery discharge status",
        "group": "4c42d5986c4bbb30",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Battery discharge status",
        "units": "W",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "10",
                "color": "#ffc800"
            },
            {
                "from": "15",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "30",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "133dda81cd7e7391",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "11c7bc76871ef97a",
        "name": "red",
        "label": "Red",
        "order": 4,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "battery-10",
        "iconPosition": "left",
        "payload": "red",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "edee6582d6c4a68e"
            ]
        ]
    },
    {
        "id": "1c4edea8d1de3c64",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "11c7bc76871ef97a",
        "name": "yellow",
        "label": "Yellow",
        "order": 5,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "battery-50",
        "iconPosition": "left",
        "payload": "yellow",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "edee6582d6c4a68e"
            ]
        ]
    },
    {
        "id": "afd21e9a47161fbb",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "11c7bc76871ef97a",
        "name": "green",
        "label": "Green",
        "order": 6,
        "width": "1",
        "height": "1",
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "battery-90",
        "iconPosition": "left",
        "payload": "green",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "edee6582d6c4a68e"
            ]
        ]
    },
    {
        "id": "3d1d87e0fe772899",
        "type": "switch",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Alarm selector",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "0",
                "vt": "num",
                "v2": "20",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "21",
                "vt": "num",
                "v2": "40",
                "v2t": "num"
            },
            {
                "t": "gte",
                "v": "40",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 240,
        "y": 420,
        "wires": [
            [
                "133dda81cd7e7391"
            ],
            [
                "1c4edea8d1de3c64"
            ],
            [
                "afd21e9a47161fbb"
            ]
        ]
    },
    {
        "id": "c3b28684d9e8c692",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "Battery status",
        "group": "11c7bc76871ef97a",
        "order": 1,
        "width": "6",
        "height": "1",
        "gtype": "gauge-tile",
        "gstyle": "rounded",
        "title": "Battery status",
        "units": "W",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "20",
                "color": "#ffc800"
            },
            {
                "from": "40",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 680,
        "y": 380,
        "wires": []
    },
    {
        "id": "c932e698ae2bd064",
        "type": "ui-slider",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "11c7bc76871ef97a",
        "name": "Battery status slider",
        "label": "slider",
        "tooltip": "",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "3d1d87e0fe772899",
                "7b3ad55f860d0b20",
                "c3b28684d9e8c692"
            ]
        ]
    },
    {
        "id": "54bdb1de78c78123",
        "type": "ui-chart",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "4c42d5986c4bbb30",
        "name": "Solar Voltage",
        "label": "Solar Voltage",
        "order": 5,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "yAxisLabel": "",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "20",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": false,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#b3ae1e",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "6",
        "height": "4",
        "className": "",
        "x": 390,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e79418b6c835dbae",
        "type": "ui-gauge",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "name": " Water monitoring",
        "group": "cd0ac6079998d71c",
        "order": 1,
        "width": "6",
        "height": "1",
        "gtype": "gauge-tile",
        "gstyle": "rounded",
        "title": " Water monitoring",
        "units": "W",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "2",
                "color": "#ffc800"
            },
            {
                "from": "3",
                "color": "#5cd65c"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 470,
        "y": 680,
        "wires": []
    },
    {
        "id": "ebcc401d9cf240f1",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "group": "69fbe1228561845f",
        "name": "",
        "label": "Alarm On",
        "order": 1,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 900,
        "wires": [
            [
                "b4cd65598a4d4f16"
            ]
        ]
    },
    {
        "id": "fdd12a4e99a4b657",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "group": "69fbe1228561845f",
        "name": "",
        "label": "Alarm off",
        "order": 2,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 120,
        "y": 960,
        "wires": [
            [
                "28274b491a42bae4"
            ]
        ]
    },
    {
        "id": "b2bba85d94b36aed",
        "type": "subflow:e0d523198c47fac8",
        "z": "ce3acd4e9503d8d4",
        "g": "287000f327b1be22",
        "name": "",
        "env": [
            {
                "name": "mqttBroker",
                "value": "ff55020100010001",
                "type": "conf-type"
            },
            {
                "name": "applicationId",
                "value": "",
                "type": "str"
            },
            {
                "name": "deviceId",
                "value": "",
                "type": "str"
            }
        ],
        "x": 200,
        "y": 640,
        "wires": [
            [
                "44958244653afb30",
                "a2c3efba58088756",
                "e79418b6c835dbae"
            ]
        ]
    },
    {
        "id": "b05e8825c9e1de3b",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "red on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1010,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b4cd65598a4d4f16",
        "type": "subflow:b8596ac29abcf525",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "name": "",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            }
        ],
        "x": 420,
        "y": 900,
        "wires": []
    },
    {
        "id": "28274b491a42bae4",
        "type": "subflow:b8596ac29abcf525",
        "z": "ce3acd4e9503d8d4",
        "g": "dfe811de8f857fd2",
        "name": "",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "action",
                "value": "stop",
                "type": "str"
            }
        ],
        "x": 420,
        "y": 960,
        "wires": []
    },
    {
        "id": "b3bc622d575108dc",
        "type": "switch",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0x0011",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0013",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0012",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0031",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0033",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0032",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0x0060",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 450,
        "y": 1200,
        "wires": [
            [
                "e63e3eaf3443875c"
            ],
            [
                "9eb62452c12e3fb2"
            ],
            [
                "0351159f478dfac6"
            ],
            [
                "8a7ef8709ca22408"
            ],
            [
                "a2e3a3cb4b0f3c7f"
            ],
            [
                "57594b14324cb2c5"
            ],
            [
                "4554f7bb1070da2a"
            ]
        ]
    },
    {
        "id": "16391da1d25c33d0",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to red",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 620,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "606db3a49302cb6b",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to green",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 660,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "ee33718c46d78681",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to yellow",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "yellow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "1bf5fbd9a14b9edc",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to blink-red",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "blink-red",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 740,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "395bfc24b7648832",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to blink-green",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "blink-green",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 780,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "1720de01fab9e8dc",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to blink-yellow",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "blink-yellow",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 820,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "345dc03ab48231a9",
        "type": "ui-template",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "group": "32e94b3eb843c9f2",
        "page": "",
        "ui": "",
        "name": "light dashboard ui",
        "order": 1,
        "width": "3",
        "height": "3",
        "head": "",
        "format": "<template>\n    <div>\n        <svg viewBox=\"0 0 128 128\" :class=\"['light', status]\">\n            <path d=\"M64 4C38.43 4 18 24.43 18 50c0 15.464 8.324 29.234 20.8 36.77C38.292 89.724 38 93.776 38 98v2c0 5.522 4.478 10 10 10h32c5.522 0 10-4.478 10-10v-2c0-4.224-.292-8.276-.8-11.23C101.676 79.234 110 65.464 110 50 110 24.43 89.57 4 64 4zm0 116c-2.21 0-4-1.79-4-4h8c0 2.21-1.79 4-4 4zm16-8H48v-4h32v4zm4-8H44v-4h40v4zm-2.66-16.768C73.344 94.014 68.81 96 64 96s-9.344-1.986-13.34-4.768C45.4 88.756 42 83.576 42 78v-2h44v2c0 5.576-3.4 10.756-8.66 13.232z\"/>\n        </svg>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                status: 'off' // Initial status: off\n            }\n        },\n        watch: {\n            msg: function () {\n                if (this.msg && this.msg.payload) {\n                    this.status = this.msg.payload;\n                }\n            }\n        },\n        methods: {\n            toggleStatus() {\n                const states = ['off', 'red', 'green', 'yellow', 'blink-red', 'blink-green', 'blink-yellow'];\n                this.status = states[(states.indexOf(this.status) + 1) % states.length];\n                this.send({ payload: this.status });\n            }\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (msg && msg.payload) {\n                    this.status = msg.payload;\n                }\n            });\n        }\n    }\n</script>\n\n<style>\n    .light {\n        width: 128px;\n        height: 128px;\n        display: block;\n        margin: 20px auto;\n        fill: gray;\n        transition: fill 0.3s;\n    }\n    .light.red { fill: red; }\n    .light.green { fill: green; }\n    .light.yellow { fill: yellow; }\n    .light.blink-red { animation: blink-red 1s infinite; }\n    .light.blink-green { animation: blink-green 1s infinite; }\n    .light.blink-yellow { animation: blink-yellow 1s infinite; }\n\n    @keyframes blink-red {\n        0%, 50% { fill: red; }\n        25%, 75% { fill: gray; }\n    }\n    @keyframes blink-green {\n        0%, 50% { fill: green; }\n        25%, 75% { fill: gray; }\n    }\n    @keyframes blink-yellow {\n        0%, 50% { fill: yellow; }\n        25%, 75% { fill: gray; }\n    }\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1110,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1d02f4acf91bc4c0",
        "type": "change",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "update ui to off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 860,
        "wires": [
            [
                "345dc03ab48231a9"
            ]
        ]
    },
    {
        "id": "2dbc641a4e839a72",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "green on",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_COLOR",
                "value": "green",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1020,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7a91ee276c0ee3a7",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Green Light On",
        "order": 3,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 1260,
        "wires": [
            [
                "2dbc641a4e839a72",
                "3c85d3b04d5b1ba6"
            ]
        ]
    },
    {
        "id": "a8572c7d4c62a237",
        "type": "subflow:61d68b31136dfa92",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "red flashing",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            },
            {
                "name": "productModel",
                "value": "typea",
                "type": "str"
            },
            {
                "name": "LIGHT_MODE",
                "value": "flashing",
                "type": "str"
            },
            {
                "name": "DEVICE_VENDOR",
                "value": "typea",
                "type": "str"
            }
        ],
        "x": 1450,
        "y": 1200,
        "wires": []
    },
    {
        "id": "256af3895f3096e4",
        "type": "ui-button",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "group": "32e94b3eb843c9f2",
        "name": "",
        "label": "Red Light Flashing",
        "order": 5,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1230,
        "y": 1160,
        "wires": [
            [
                "a8572c7d4c62a237",
                "7f1b18337f24478b"
            ]
        ]
    },
    {
        "id": "edee6582d6c4a68e",
        "type": "ui-template",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "group": "11c7bc76871ef97a",
        "page": "",
        "ui": "",
        "name": "light dashboard ui",
        "order": 2,
        "width": "3",
        "height": "3",
        "head": "",
        "format": "<template>\n    <div>\n        <svg viewBox=\"0 0 128 128\" :class=\"['light', status]\">\n            <path d=\"M64 4C38.43 4 18 24.43 18 50c0 15.464 8.324 29.234 20.8 36.77C38.292 89.724 38 93.776 38 98v2c0 5.522 4.478 10 10 10h32c5.522 0 10-4.478 10-10v-2c0-4.224-.292-8.276-.8-11.23C101.676 79.234 110 65.464 110 50 110 24.43 89.57 4 64 4zm0 116c-2.21 0-4-1.79-4-4h8c0 2.21-1.79 4-4 4zm16-8H48v-4h32v4zm4-8H44v-4h40v4zm-2.66-16.768C73.344 94.014 68.81 96 64 96s-9.344-1.986-13.34-4.768C45.4 88.756 42 83.576 42 78v-2h44v2c0 5.576-3.4 10.756-8.66 13.232z\"/>\n        </svg>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                status: 'off' // Initial status: off\n            }\n        },\n        watch: {\n            msg: function () {\n                if (this.msg && this.msg.payload) {\n                    this.status = this.msg.payload;\n                }\n            }\n        },\n        methods: {\n            toggleStatus() {\n                const states = ['off', 'red', 'green', 'yellow', 'blink-red', 'blink-green', 'blink-yellow'];\n                this.status = states[(states.indexOf(this.status) + 1) % states.length];\n                this.send({ payload: this.status });\n            }\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (msg && msg.payload) {\n                    this.status = msg.payload;\n                }\n            });\n        }\n    }\n</script>\n\n<style>\n    .light {\n        width: 128px;\n        height: 128px;\n        display: block;\n        margin: 20px auto;\n        fill: gray;\n        transition: fill 0.3s;\n    }\n    .light.red { fill: red; }\n    .light.green { fill: green; }\n    .light.yellow { fill: yellow; }\n    .light.blink-red { animation: blink-red 1s infinite; }\n    .light.blink-green { animation: blink-green 1s infinite; }\n    .light.blink-yellow { animation: blink-yellow 1s infinite; }\n\n    @keyframes blink-red {\n        0%, 50% { fill: red; }\n        25%, 75% { fill: gray; }\n    }\n    @keyframes blink-green {\n        0%, 50% { fill: green; }\n        25%, 75% { fill: gray; }\n    }\n    @keyframes blink-yellow {\n        0%, 50% { fill: yellow; }\n        25%, 75% { fill: gray; }\n    }\n</style>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2307e91bec054f96",
        "type": "inject",
        "z": "ce3acd4e9503d8d4",
        "g": "34c846645d31e79e",
        "name": "on startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "73",
        "payloadType": "num",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "1a2fdaeaae8a6893"
            ]
        ]
    },
    {
        "id": "5f580c8b1d58f87d",
        "type": "subflow:f31e55153689cae9",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "",
        "env": [
            {
                "name": "modbus-client",
                "value": "ff55020100020001",
                "type": "conf-type"
            }
        ],
        "x": 220,
        "y": 1200,
        "wires": [
            [
                "b3bc622d575108dc"
            ]
        ]
    },
    {
        "id": "e63e3eaf3443875c",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "6a1b4e060635d355",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6a1b4e060635d355",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 5",
        "links": [
            "e63e3eaf3443875c",
            "ae736e6f24909157"
        ],
        "x": 705,
        "y": 620,
        "wires": [
            [
                "16391da1d25c33d0"
            ]
        ]
    },
    {
        "id": "ae736e6f24909157",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "update ui 1",
        "mode": "link",
        "links": [
            "6a1b4e060635d355"
        ],
        "x": 975,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9eb62452c12e3fb2",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "827f835144d03ad4",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1160,
        "wires": []
    },
    {
        "id": "827f835144d03ad4",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 6",
        "links": [
            "9eb62452c12e3fb2",
            "3c85d3b04d5b1ba6"
        ],
        "x": 705,
        "y": 660,
        "wires": [
            [
                "606db3a49302cb6b"
            ]
        ]
    },
    {
        "id": "3c85d3b04d5b1ba6",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "827f835144d03ad4",
            "8ce24e15240d7b5c"
        ],
        "x": 975,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0351159f478dfac6",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "8074d3bd9f84a5f5",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8074d3bd9f84a5f5",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 7",
        "links": [
            "0351159f478dfac6",
            "18d7770e94ae03c7"
        ],
        "x": 705,
        "y": 700,
        "wires": [
            [
                "ee33718c46d78681"
            ]
        ]
    },
    {
        "id": "18d7770e94ae03c7",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "9b1ab04215747138",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "8074d3bd9f84a5f5",
            "8ce24e15240d7b5c"
        ],
        "x": 975,
        "y": 1360,
        "wires": []
    },
    {
        "id": "8a7ef8709ca22408",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "c3a9d9983156a44f",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c3a9d9983156a44f",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 8",
        "links": [
            "8a7ef8709ca22408",
            "7f1b18337f24478b"
        ],
        "x": 705,
        "y": 740,
        "wires": [
            [
                "1bf5fbd9a14b9edc"
            ]
        ]
    },
    {
        "id": "7f1b18337f24478b",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "c3a9d9983156a44f",
            "8ce24e15240d7b5c"
        ],
        "x": 1395,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a2e3a3cb4b0f3c7f",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "629144233b94a2a6",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1220,
        "wires": []
    },
    {
        "id": "629144233b94a2a6",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 9",
        "links": [
            "a2e3a3cb4b0f3c7f",
            "99dcb5982cfa549e"
        ],
        "x": 705,
        "y": 780,
        "wires": [
            [
                "395bfc24b7648832"
            ]
        ]
    },
    {
        "id": "99dcb5982cfa549e",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "629144233b94a2a6",
            "8ce24e15240d7b5c"
        ],
        "x": 1395,
        "y": 1260,
        "wires": []
    },
    {
        "id": "57594b14324cb2c5",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "dea375b48fcd6296",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1240,
        "wires": []
    },
    {
        "id": "dea375b48fcd6296",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 10",
        "links": [
            "57594b14324cb2c5",
            "3e5a100ccf36861b"
        ],
        "x": 705,
        "y": 820,
        "wires": [
            [
                "1720de01fab9e8dc"
            ]
        ]
    },
    {
        "id": "3e5a100ccf36861b",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "c67ba04301dac130",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "dea375b48fcd6296",
            "8ce24e15240d7b5c"
        ],
        "x": 1395,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4554f7bb1070da2a",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "8132d836852c68fe",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "029b1feb9b8344c4",
            "8ce24e15240d7b5c"
        ],
        "x": 565,
        "y": 1260,
        "wires": []
    },
    {
        "id": "029b1feb9b8344c4",
        "type": "link in",
        "z": "ce3acd4e9503d8d4",
        "g": "97a27d4ddc376247",
        "name": "link in 11",
        "links": [
            "4554f7bb1070da2a",
            "24354cb7b8e2707e"
        ],
        "x": 705,
        "y": 860,
        "wires": [
            [
                "1d02f4acf91bc4c0"
            ]
        ]
    },
    {
        "id": "24354cb7b8e2707e",
        "type": "link out",
        "z": "ce3acd4e9503d8d4",
        "g": "12dde4415dcc183a",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "029b1feb9b8344c4",
            "8ce24e15240d7b5c"
        ],
        "x": 975,
        "y": 1500,
        "wires": []
    }
]